
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00002b10  00002ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080015a  0080015a  00002bfe  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00002bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000027e  00000000  00000000  00002c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f98  00000000  00000000  00002ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000431  00000000  00000000  00003e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e92  00000000  00000000  00004285  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00005118  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  000052a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a8b  00000000  00000000  0000569c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00006127  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__ctors_end>
       4:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
       8:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
       c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      10:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      14:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      18:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      1c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      20:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      24:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      28:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      2c:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_11>
      30:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      34:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      38:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      3c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      40:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_16>
      44:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      48:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      4c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      50:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      54:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      58:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      5c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      60:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      64:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>

00000068 <CharMap>:
	...
      70:	5f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14 00     _...............
      80:	24 2a 7f 2a 12 00 23 13 08 64 62 00 36 49 56 20     $*.*..#..db.6IV 
      90:	50 00 00 08 07 03 00 00 00 1c 22 41 00 00 00 41     P........."A...A
      a0:	22 1c 00 00 2a 1c 7f 1c 2a 00 08 08 3e 08 08 00     "...*...*...>...
      b0:	00 80 70 30 00 00 08 08 08 08 08 00 00 00 60 60     ..p0..........``
      c0:	00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00 42     .. .....>QIE>..B
      d0:	7f 40 00 00 72 49 49 49 46 00 21 41 49 4d 33 00     .@..rIIIF.!AIM3.
      e0:	18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49 49     ......'EEE9.<JII
      f0:	31 00 41 21 11 09 07 00 36 49 49 49 36 00 46 49     1.A!....6III6.FI
     100:	49 29 1e 00 00 00 14 00 00 00 00 40 34 00 00 00     I).........@4...
     110:	00 08 14 22 41 00 14 14 14 14 14 00 00 41 22 14     ..."A........A".
     120:	08 00 02 01 59 09 06 00 3e 41 5d 59 4e 00 7c 12     ....Y...>A]YN.|.
     130:	11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22 00     ..|..III6.>AAA".
     140:	7f 41 41 41 3e 00 7f 49 49 49 41 00 7f 09 09 09     .AAA>..IIIA.....
     150:	01 00 3e 41 41 51 73 00 7f 08 08 08 7f 00 00 41     ..>AAQs........A
     160:	7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41 00     .A.. @A?....."A.
     170:	7f 40 40 40 40 00 7f 02 1c 02 7f 00 7f 04 08 10     .@@@@...........
     180:	7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e 41     ..>AAA>.......>A
     190:	51 21 5e 00 7f 09 19 29 46 00 26 49 49 49 32 00     Q!^....)F.&III2.
     1a0:	03 01 7f 01 03 00 3f 40 40 40 3f 00 1f 20 40 20     ......?@@@?.. @ 
     1b0:	1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 03 04     ..?@8@?.c...c...
     1c0:	78 04 03 00 61 59 49 4d 43 00 00 7f 41 41 41 00     x...aYIMC...AAA.
     1d0:	02 04 08 10 20 00 00 41 41 41 7f 00 04 02 01 02     .... ..AAA......
     1e0:	04 00 40 40 40 40 40 00 00 03 07 08 00 00 20 54     ..@@@@@....... T
     1f0:	54 78 40 00 7f 28 44 44 38 00 38 44 44 44 28 00     Tx@..(DD8.8DDD(.
     200:	38 44 44 28 7f 00 38 54 54 54 18 00 00 08 7e 09     8DD(..8TTT....~.
     210:	02 00 18 a4 a4 9c 78 00 7f 08 04 04 78 00 00 44     ......x.....x..D
     220:	7d 40 00 00 20 40 40 3d 00 00 7f 10 28 44 00 00     }@.. @@=....(D..
     230:	00 41 7f 40 00 00 7c 04 78 04 78 00 7c 08 04 04     .A.@..|.x.x.|...
     240:	78 00 38 44 44 44 38 00 fc 18 24 24 18 00 18 24     x.8DDD8...$$...$
     250:	24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 24 00     $...|.....HTTT$.
     260:	04 04 3f 44 24 00 3c 40 40 20 7c 00 1c 20 40 20     ..?D$.<@@ |.. @ 
     270:	1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 4c 90     ..<@0@<.D(.(D.L.
     280:	90 90 7c 00 44 64 54 4c 44 00 00 08 36 41 00 00     ..|.DdTLD...6A..
     290:	00 00 77 00 00 00 00 41 36 08 00 00 00 06 09 06     ..w....A6.......
     2a0:	00 00 ff ff ff ff ff 00                             ........

000002a8 <__ctors_end>:
     2a8:	11 24       	eor	r1, r1
     2aa:	1f be       	out	0x3f, r1	; 63
     2ac:	cf ef       	ldi	r28, 0xFF	; 255
     2ae:	d8 e0       	ldi	r29, 0x08	; 8
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	cd bf       	out	0x3d, r28	; 61

000002b4 <__do_copy_data>:
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	a0 e0       	ldi	r26, 0x00	; 0
     2b8:	b1 e0       	ldi	r27, 0x01	; 1
     2ba:	e0 e1       	ldi	r30, 0x10	; 16
     2bc:	fb e2       	ldi	r31, 0x2B	; 43
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <.do_copy_data_start>

000002c0 <.do_copy_data_loop>:
     2c0:	05 90       	lpm	r0, Z+
     2c2:	0d 92       	st	X+, r0

000002c4 <.do_copy_data_start>:
     2c4:	aa 35       	cpi	r26, 0x5A	; 90
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <.do_copy_data_loop>

000002ca <__do_clear_bss>:
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	aa e5       	ldi	r26, 0x5A	; 90
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	ae 37       	cpi	r26, 0x7E	; 126
     2d6:	b1 07       	cpc	r27, r17
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 67 06 	call	0xcce	; 0xcce <main>
     2de:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <_exit>

000002e2 <__bad_interrupt>:
     2e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e6 <__vector_16>:
uint8_t ISR_zaehler = 0;
uint8_t ms = 0;
uint8_t second = 0;
uint16_t minute = 0;
ISR (TIMER0_OVF_vect)
{
     2e6:	1f 92       	push	r1
     2e8:	0f 92       	push	r0
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	0f 92       	push	r0
     2ee:	11 24       	eor	r1, r1
     2f0:	8f 93       	push	r24
     2f2:	9f 93       	push	r25
	TCNT0 = 0;
     2f4:	16 bc       	out	0x26, r1	; 38
	ISR_zaehler++;
     2f6:	80 91 5a 01 	lds	r24, 0x015A
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	80 93 5a 01 	sts	0x015A, r24
	if(ISR_zaehler == 12)
     300:	8c 30       	cpi	r24, 0x0C	; 12
     302:	e9 f4       	brne	.+58     	; 0x33e <__vector_16+0x58>
	{
		ms++;
     304:	80 91 5b 01 	lds	r24, 0x015B
     308:	8f 5f       	subi	r24, 0xFF	; 255
     30a:	80 93 5b 01 	sts	0x015B, r24
		ISR_zaehler = 0;
     30e:	10 92 5a 01 	sts	0x015A, r1
		if (ms == 10)
     312:	8a 30       	cpi	r24, 0x0A	; 10
     314:	a1 f4       	brne	.+40     	; 0x33e <__vector_16+0x58>
		{
			second ++;
     316:	80 91 5c 01 	lds	r24, 0x015C
     31a:	8f 5f       	subi	r24, 0xFF	; 255
     31c:	80 93 5c 01 	sts	0x015C, r24
			ms = 0;
     320:	10 92 5b 01 	sts	0x015B, r1
			if (second == 60)
     324:	8c 33       	cpi	r24, 0x3C	; 60
     326:	59 f4       	brne	.+22     	; 0x33e <__vector_16+0x58>
			{
				minute ++;
     328:	80 91 5d 01 	lds	r24, 0x015D
     32c:	90 91 5e 01 	lds	r25, 0x015E
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	90 93 5e 01 	sts	0x015E, r25
     336:	80 93 5d 01 	sts	0x015D, r24
				second = 0;
     33a:	10 92 5c 01 	sts	0x015C, r1
			}
		}
	}
}//End of ISR
     33e:	9f 91       	pop	r25
     340:	8f 91       	pop	r24
     342:	0f 90       	pop	r0
     344:	0f be       	out	0x3f, r0	; 63
     346:	0f 90       	pop	r0
     348:	1f 90       	pop	r1
     34a:	18 95       	reti

0000034c <SPI_MasterTransmit>:

void SPI_MasterTransmit(uint8_t cData)
{/* Start transmission */
	SPDR = cData;
     34c:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     34e:	0d b4       	in	r0, 0x2d	; 45
     350:	07 fe       	sbrs	r0, 7
     352:	fd cf       	rjmp	.-6      	; 0x34e <SPI_MasterTransmit+0x2>
	;
}
     354:	08 95       	ret

00000356 <__vector_11>:
			//~ }
		}
	}

ISR (TIMER1_COMPA_vect)
{
     356:	1f 92       	push	r1
     358:	0f 92       	push	r0
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	0f 92       	push	r0
     35e:	11 24       	eor	r1, r1
	
}
     360:	0f 90       	pop	r0
     362:	0f be       	out	0x3f, r0	; 63
     364:	0f 90       	pop	r0
     366:	1f 90       	pop	r1
     368:	18 95       	reti

0000036a <ScoreBoard>:

	}//end of for()
}//end of main

void ScoreBoard(uint32_t Score, uint16_t PlayMin, uint8_t PlaySec)
	{
     36a:	2f 92       	push	r2
     36c:	3f 92       	push	r3
     36e:	4f 92       	push	r4
     370:	5f 92       	push	r5
     372:	6f 92       	push	r6
     374:	7f 92       	push	r7
     376:	8f 92       	push	r8
     378:	9f 92       	push	r9
     37a:	af 92       	push	r10
     37c:	bf 92       	push	r11
     37e:	cf 92       	push	r12
     380:	df 92       	push	r13
     382:	ef 92       	push	r14
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	df 93       	push	r29
     38c:	cf 93       	push	r28
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	e0 97       	sbiw	r28, 0x30	; 48
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	68 8f       	std	Y+24, r22	; 0x18
     3a0:	79 8f       	std	Y+25, r23	; 0x19
     3a2:	8a 8f       	std	Y+26, r24	; 0x1a
     3a4:	9b 8f       	std	Y+27, r25	; 0x1b
     3a6:	5d 8f       	std	Y+29, r21	; 0x1d
     3a8:	4c 8f       	std	Y+28, r20	; 0x1c
     3aa:	2e 8f       	std	Y+30, r18	; 0x1e
				//~ {
					//~ eeprom_update_byte((uint8_t*)Counter, 0);	//Read eeprom
				//~ }
			//~ }
		}
	}
     3ac:	8d b7       	in	r24, 0x3d	; 61
     3ae:	9e b7       	in	r25, 0x3e	; 62
     3b0:	9a a3       	std	Y+34, r25	; 0x22
     3b2:	89 a3       	std	Y+33, r24	; 0x21
			uint16_t ScoreMin;
			uint8_t ScoreSec;
			char PlayerName[3];
		};
		
		struct BoardItems Board[BoardSize];	//Score Storage for Unsorted and sorted Scores
     3b4:	ad b7       	in	r26, 0x3d	; 61
     3b6:	be b7       	in	r27, 0x3e	; 62
     3b8:	dc 97       	sbiw	r26, 0x3c	; 60
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	f8 94       	cli
     3be:	be bf       	out	0x3e, r27	; 62
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	ad bf       	out	0x3d, r26	; 61
     3c4:	8d b6       	in	r8, 0x3d	; 61
     3c6:	9e b6       	in	r9, 0x3e	; 62
     3c8:	08 94       	sec
     3ca:	81 1c       	adc	r8, r1
     3cc:	91 1c       	adc	r9, r1
		struct BoardItems SortBuffer[BoardSize];	//Buffer for sorting
     3ce:	ed b7       	in	r30, 0x3d	; 61
     3d0:	fe b7       	in	r31, 0x3e	; 62
     3d2:	fc 97       	sbiw	r30, 0x3c	; 60
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	fe bf       	out	0x3e, r31	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	ed bf       	out	0x3d, r30	; 61
     3de:	8d b7       	in	r24, 0x3d	; 61
     3e0:	9e b7       	in	r25, 0x3e	; 62
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	98 a3       	std	Y+32, r25	; 0x20
     3e6:	8f 8f       	std	Y+31, r24	; 0x1f
     3e8:	00 e0       	ldi	r16, 0x00	; 0
     3ea:	10 e0       	ldi	r17, 0x00	; 0
		
		//Change -1 values to zero to keep the sorting system working
		//==============================================================
		for (Counter = startAdress; Counter < (startAdress + (68 * BoardSize)); Counter++)
		{
			fore = WHITE;
     3ec:	aa 24       	eor	r10, r10
     3ee:	aa 94       	dec	r10
     3f0:	ba 2c       	mov	r11, r10
			sprintf(buffer, "%d", eeprom_read_byte((uint8_t*)Counter));
     3f2:	7e 01       	movw	r14, r28
     3f4:	08 94       	sec
     3f6:	e1 1c       	adc	r14, r1
     3f8:	f1 1c       	adc	r15, r1
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	c3 2e       	mov	r12, r19
     3fe:	31 e0       	ldi	r19, 0x01	; 1
     400:	d3 2e       	mov	r13, r19
		
		//Change -1 values to zero to keep the sorting system working
		//==============================================================
		for (Counter = startAdress; Counter < (startAdress + (68 * BoardSize)); Counter++)
		{
			fore = WHITE;
     402:	b0 92 52 01 	sts	0x0152, r11
     406:	a0 92 51 01 	sts	0x0151, r10
			sprintf(buffer, "%d", eeprom_read_byte((uint8_t*)Counter));
     40a:	c8 01       	movw	r24, r16
     40c:	0e 94 1a 14 	call	0x2834	; 0x2834 <__eerd_byte_m328p>
     410:	00 d0       	rcall	.+0      	; 0x412 <ScoreBoard+0xa8>
     412:	00 d0       	rcall	.+0      	; 0x414 <ScoreBoard+0xaa>
     414:	00 d0       	rcall	.+0      	; 0x416 <ScoreBoard+0xac>
     416:	ed b7       	in	r30, 0x3d	; 61
     418:	fe b7       	in	r31, 0x3e	; 62
     41a:	31 96       	adiw	r30, 0x01	; 1
     41c:	ad b7       	in	r26, 0x3d	; 61
     41e:	be b7       	in	r27, 0x3e	; 62
     420:	12 96       	adiw	r26, 0x02	; 2
     422:	fc 92       	st	X, r15
     424:	ee 92       	st	-X, r14
     426:	11 97       	sbiw	r26, 0x01	; 1
     428:	d3 82       	std	Z+3, r13	; 0x03
     42a:	c2 82       	std	Z+2, r12	; 0x02
     42c:	84 83       	std	Z+4, r24	; 0x04
     42e:	15 82       	std	Z+5, r1	; 0x05
     430:	0e 94 09 12 	call	0x2412	; 0x2412 <sprintf>
			PlotString(buffer);
     434:	ed b7       	in	r30, 0x3d	; 61
     436:	fe b7       	in	r31, 0x3e	; 62
     438:	36 96       	adiw	r30, 0x06	; 6
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	fe bf       	out	0x3e, r31	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	ed bf       	out	0x3d, r30	; 61
     444:	c7 01       	movw	r24, r14
     446:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <PlotString>
			if(eeprom_read_byte((uint8_t*)Counter) == 255)
     44a:	c8 01       	movw	r24, r16
     44c:	0e 94 1a 14 	call	0x2834	; 0x2834 <__eerd_byte_m328p>
     450:	8f 3f       	cpi	r24, 0xFF	; 255
     452:	21 f4       	brne	.+8      	; 0x45c <ScoreBoard+0xf2>
			{
				eeprom_write_byte((uint8_t*)startAdress + Counter, 0);	//Read eeprom
     454:	c8 01       	movw	r24, r16
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	0e 94 38 14 	call	0x2870	; 0x2870 <__eewr_byte_m328p>
     45c:	0f 5f       	subi	r16, 0xFF	; 255
     45e:	1f 4f       	sbci	r17, 0xFF	; 255
		struct BoardItems SortBuffer[BoardSize];	//Buffer for sorting
		//==============================================================
		
		//Change -1 values to zero to keep the sorting system working
		//==============================================================
		for (Counter = startAdress; Counter < (startAdress + (68 * BoardSize)); Counter++)
     460:	f1 e0       	ldi	r31, 0x01	; 1
     462:	08 39       	cpi	r16, 0x98	; 152
     464:	1f 07       	cpc	r17, r31
     466:	69 f6       	brne	.-102    	; 0x402 <ScoreBoard+0x98>
     468:	9e 8a       	std	Y+22, r9	; 0x16
     46a:	8d 8a       	std	Y+21, r8	; 0x15
     46c:	84 01       	movw	r16, r8
     46e:	aa 24       	eor	r10, r10
     470:	bb 24       	eor	r11, r11
     472:	33 24       	eor	r3, r3
     474:	22 24       	eor	r2, r2
     476:	1a a6       	std	Y+42, r1	; 0x2a
     478:	1b a6       	std	Y+43, r1	; 0x2b
     47a:	1c a6       	std	Y+44, r1	; 0x2c
     47c:	ee 24       	eor	r14, r14
     47e:	ff 24       	eor	r15, r15
     480:	20 e8       	ldi	r18, 0x80	; 128
     482:	42 2e       	mov	r4, r18
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	52 2e       	mov	r5, r18
     488:	90 e2       	ldi	r25, 0x20	; 32
     48a:	69 2e       	mov	r6, r25
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	79 2e       	mov	r7, r25
     490:	80 e5       	ldi	r24, 0x50	; 80
     492:	c8 2e       	mov	r12, r24
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	d8 2e       	mov	r13, r24
		}
		//==============================================================
		
		for (Counter = 0; Counter < BoardSize; Counter++)
		{
			Board[Counter].Score = eeprom_read_dword((uint32_t*)startAdress + (32 * Counter));	//Read Score from eeprom
     498:	c7 01       	movw	r24, r14
     49a:	0e 94 22 14 	call	0x2844	; 0x2844 <__eerd_dword_m328p>
     49e:	d8 01       	movw	r26, r16
     4a0:	6d 93       	st	X+, r22
     4a2:	7d 93       	st	X+, r23
     4a4:	8d 93       	st	X+, r24
     4a6:	9c 93       	st	X, r25
     4a8:	13 97       	sbiw	r26, 0x03	; 3
			Board[Counter].ScoreMin = eeprom_read_word((uint16_t*)startAdress + (16 * Counter) + (32 * BoardSize));	//Read Minutes from eeprom
     4aa:	c2 01       	movw	r24, r4
     4ac:	0e 94 28 14 	call	0x2850	; 0x2850 <__eerd_word_m328p>
     4b0:	f8 01       	movw	r30, r16
     4b2:	95 83       	std	Z+5, r25	; 0x05
     4b4:	84 83       	std	Z+4, r24	; 0x04
			Board[Counter].ScoreSec = eeprom_read_byte((uint8_t*)startAdress + (8 * Counter) + (48 * BoardSize));	//Read Seconds from eeprom
     4b6:	c3 01       	movw	r24, r6
     4b8:	0e 94 1a 14 	call	0x2834	; 0x2834 <__eerd_byte_m328p>
     4bc:	d8 01       	movw	r26, r16
     4be:	16 96       	adiw	r26, 0x06	; 6
     4c0:	8c 93       	st	X, r24
			eeprom_read_block(Board[Counter].PlayerName, (void*)startAdress + (12 * Counter) + (56 * BoardSize), 3);	//Read Player Name from eeprom
     4c2:	8a 2d       	mov	r24, r10
     4c4:	9b 2d       	mov	r25, r11
     4c6:	9c 01       	movw	r18, r24
     4c8:	b3 e0       	ldi	r27, 0x03	; 3
     4ca:	22 0f       	add	r18, r18
     4cc:	33 1f       	adc	r19, r19
     4ce:	ba 95       	dec	r27
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <ScoreBoard+0x160>
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	28 0f       	add	r18, r24
     4d8:	39 1f       	adc	r19, r25
     4da:	29 5f       	subi	r18, 0xF9	; 249
     4dc:	3f 4f       	sbci	r19, 0xFF	; 255
     4de:	c4 01       	movw	r24, r8
     4e0:	82 0f       	add	r24, r18
     4e2:	93 1f       	adc	r25, r19
     4e4:	b6 01       	movw	r22, r12
     4e6:	43 e0       	ldi	r20, 0x03	; 3
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	0e 94 0a 14 	call	0x2814	; 0x2814 <__eerd_block_m328p>
				eeprom_write_byte((uint8_t*)startAdress + Counter, 0);	//Read eeprom
			}
		}
		//==============================================================
		
		for (Counter = 0; Counter < BoardSize; Counter++)
     4ee:	6a 2d       	mov	r22, r10
     4f0:	6f 5f       	subi	r22, 0xFF	; 255
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	6a 15       	cp	r22, r10
     4f6:	08 f0       	brcs	.+2      	; 0x4fa <ScoreBoard+0x190>
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	58 2f       	mov	r21, r24
     4fc:	5b 0d       	add	r21, r11
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	5b 15       	cp	r21, r11
     502:	08 f0       	brcs	.+2      	; 0x506 <ScoreBoard+0x19c>
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	48 2f       	mov	r20, r24
     508:	43 0d       	add	r20, r3
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	43 15       	cp	r20, r3
     50e:	08 f0       	brcs	.+2      	; 0x512 <ScoreBoard+0x1a8>
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	38 2f       	mov	r19, r24
     514:	32 0d       	add	r19, r2
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	32 15       	cp	r19, r2
     51a:	08 f0       	brcs	.+2      	; 0x51e <ScoreBoard+0x1b4>
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	2a a5       	ldd	r18, Y+42	; 0x2a
     520:	28 0f       	add	r18, r24
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	ba a5       	ldd	r27, Y+42	; 0x2a
     526:	2b 17       	cp	r18, r27
     528:	08 f0       	brcs	.+2      	; 0x52c <ScoreBoard+0x1c2>
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	9b a5       	ldd	r25, Y+43	; 0x2b
     52e:	98 0f       	add	r25, r24
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	eb a5       	ldd	r30, Y+43	; 0x2b
     534:	9e 17       	cp	r25, r30
     536:	08 f0       	brcs	.+2      	; 0x53a <ScoreBoard+0x1d0>
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	fc a5       	ldd	r31, Y+44	; 0x2c
     53c:	8f 0f       	add	r24, r31
     53e:	a6 2e       	mov	r10, r22
     540:	b5 2e       	mov	r11, r21
     542:	34 2e       	mov	r3, r20
     544:	23 2e       	mov	r2, r19
     546:	2a a7       	std	Y+42, r18	; 0x2a
     548:	9b a7       	std	Y+43, r25	; 0x2b
     54a:	8c a7       	std	Y+44, r24	; 0x2c
     54c:	80 e8       	ldi	r24, 0x80	; 128
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	e8 0e       	add	r14, r24
     552:	f9 1e       	adc	r15, r25
     554:	a0 e2       	ldi	r26, 0x20	; 32
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	4a 0e       	add	r4, r26
     55a:	5b 1e       	adc	r5, r27
     55c:	06 5f       	subi	r16, 0xF6	; 246
     55e:	1f 4f       	sbci	r17, 0xFF	; 255
     560:	e8 e0       	ldi	r30, 0x08	; 8
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	6e 0e       	add	r6, r30
     566:	7f 1e       	adc	r7, r31
     568:	8c e0       	ldi	r24, 0x0C	; 12
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	c8 0e       	add	r12, r24
     56e:	d9 1e       	adc	r13, r25
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	e9 16       	cp	r14, r25
     574:	93 e0       	ldi	r25, 0x03	; 3
     576:	f9 06       	cpc	r15, r25
     578:	09 f0       	breq	.+2      	; 0x57c <ScoreBoard+0x212>
     57a:	8e cf       	rjmp	.-228    	; 0x498 <ScoreBoard+0x12e>
			Board[Counter].ScoreMin = eeprom_read_word((uint16_t*)startAdress + (16 * Counter) + (32 * BoardSize));	//Read Minutes from eeprom
			Board[Counter].ScoreSec = eeprom_read_byte((uint8_t*)startAdress + (8 * Counter) + (48 * BoardSize));	//Read Seconds from eeprom
			eeprom_read_block(Board[Counter].PlayerName, (void*)startAdress + (12 * Counter) + (56 * BoardSize), 3);	//Read Player Name from eeprom
		}
		
		Board[BoardSize - 1].Score = Score;			//Input new Score
     57c:	88 8d       	ldd	r24, Y+24	; 0x18
     57e:	99 8d       	ldd	r25, Y+25	; 0x19
     580:	aa 8d       	ldd	r26, Y+26	; 0x1a
     582:	bb 8d       	ldd	r27, Y+27	; 0x1b
     584:	f4 01       	movw	r30, r8
     586:	82 ab       	std	Z+50, r24	; 0x32
     588:	93 ab       	std	Z+51, r25	; 0x33
     58a:	a4 ab       	std	Z+52, r26	; 0x34
     58c:	b5 ab       	std	Z+53, r27	; 0x35
		Board[BoardSize - 1].ScoreMin = PlayMin;	//Input new Minute Time
     58e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     590:	9d 8d       	ldd	r25, Y+29	; 0x1d
     592:	97 ab       	std	Z+55, r25	; 0x37
     594:	86 ab       	std	Z+54, r24	; 0x36
		Board[BoardSize - 1].ScoreSec = PlaySec;	//Input new Seconds Time
     596:	9e 8d       	ldd	r25, Y+30	; 0x1e
     598:	90 af       	std	Z+56, r25	; 0x38
		
		Board[BoardSize - 1].PlayerName[0] = 'A';	//Set Player Name to AAA
     59a:	81 e4       	ldi	r24, 0x41	; 65
     59c:	81 af       	std	Z+57, r24	; 0x39
		Board[BoardSize - 1].PlayerName[1] = 'A';	//|
     59e:	82 af       	std	Z+58, r24	; 0x3a
		Board[BoardSize - 1].PlayerName[2] = 'A';	//|
     5a0:	83 af       	std	Z+59, r24	; 0x3b
		
		ClearDisplay();
     5a2:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <ClearDisplay>
     5a6:	f9 e3       	ldi	r31, 0x39	; 57
     5a8:	6f 2e       	mov	r6, r31
     5aa:	71 2c       	mov	r7, r1
     5ac:	68 0c       	add	r6, r8
     5ae:	79 1c       	adc	r7, r9
     5b0:	55 24       	eor	r5, r5
     5b2:	44 24       	eor	r4, r4
     5b4:	33 24       	eor	r3, r3
     5b6:	22 24       	eor	r2, r2
     5b8:	1e a2       	std	Y+38, r1	; 0x26
     5ba:	1f a2       	std	Y+39, r1	; 0x27
     5bc:	18 a6       	std	Y+40, r1	; 0x28
     5be:	19 a6       	std	Y+41, r1	; 0x29
		//Name Input
		//==============================================================
		for (Counter = 0; Counter < 3; Counter++)
		{
			scale = 3;
     5c0:	a3 e0       	ldi	r26, 0x03	; 3
     5c2:	b0 e0       	ldi	r27, 0x00	; 0
     5c4:	b0 93 54 01 	sts	0x0154, r27
     5c8:	a0 93 53 01 	sts	0x0153, r26
     5cc:	a4 c0       	rjmp	.+328    	; 0x716 <ScoreBoard+0x3ac>
			while(!T2)
			{
				if(T1)
     5ce:	4e 99       	sbic	0x09, 6	; 9
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <ScoreBoard+0x270>
				{
					Board[BoardSize - 1].PlayerName[Counter]--;	//Last Letter
     5d2:	f3 01       	movw	r30, r6
     5d4:	80 81       	ld	r24, Z
     5d6:	81 50       	subi	r24, 0x01	; 1
     5d8:	80 83       	st	Z, r24
				}
				
				if(T3)
     5da:	4d 99       	sbic	0x09, 5	; 9
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <ScoreBoard+0x27c>
				{
					Board[BoardSize - 1].PlayerName[Counter]++;	//Next Letter
     5de:	d3 01       	movw	r26, r6
     5e0:	8c 91       	ld	r24, X
     5e2:	8f 5f       	subi	r24, 0xFF	; 255
     5e4:	8c 93       	st	X, r24
				}
				while(T1 || T3);
     5e6:	4e 9b       	sbis	0x09, 6	; 9
     5e8:	fe cf       	rjmp	.-4      	; 0x5e6 <ScoreBoard+0x27c>
     5ea:	4d 9b       	sbis	0x09, 5	; 9
     5ec:	fc cf       	rjmp	.-8      	; 0x5e6 <ScoreBoard+0x27c>
				MoveTo(10, size / 2);
     5ee:	8a e0       	ldi	r24, 0x0A	; 10
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	60 e4       	ldi	r22, 0x40	; 64
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MoveTo>
     5fa:	aa 24       	eor	r10, r10
     5fc:	bb 24       	eor	r11, r11
     5fe:	cc 24       	eor	r12, r12
     600:	dd 24       	eor	r13, r13
     602:	ee 24       	eor	r14, r14
     604:	ff 24       	eor	r15, r15
     606:	00 e0       	ldi	r16, 0x00	; 0
     608:	10 e0       	ldi	r17, 0x00	; 0
				for (Counter2 = 0; Counter2 < 3; Counter2++)
				{
					if (Counter == Counter2)
     60a:	5a 14       	cp	r5, r10
     60c:	e9 f4       	brne	.+58     	; 0x648 <ScoreBoard+0x2de>
     60e:	4b 14       	cp	r4, r11
     610:	d9 f4       	brne	.+54     	; 0x648 <ScoreBoard+0x2de>
     612:	3c 14       	cp	r3, r12
     614:	c9 f4       	brne	.+50     	; 0x648 <ScoreBoard+0x2de>
     616:	2d 14       	cp	r2, r13
     618:	b9 f4       	brne	.+46     	; 0x648 <ScoreBoard+0x2de>
     61a:	be a1       	ldd	r27, Y+38	; 0x26
     61c:	be 15       	cp	r27, r14
     61e:	a1 f4       	brne	.+40     	; 0x648 <ScoreBoard+0x2de>
     620:	ef a1       	ldd	r30, Y+39	; 0x27
     622:	ef 15       	cp	r30, r15
     624:	89 f4       	brne	.+34     	; 0x648 <ScoreBoard+0x2de>
     626:	f8 a5       	ldd	r31, Y+40	; 0x28
     628:	f0 17       	cp	r31, r16
     62a:	71 f4       	brne	.+28     	; 0x648 <ScoreBoard+0x2de>
     62c:	29 a5       	ldd	r18, Y+41	; 0x29
     62e:	21 17       	cp	r18, r17
     630:	59 f4       	brne	.+22     	; 0x648 <ScoreBoard+0x2de>
					{
						fore = BLACK;
     632:	10 92 52 01 	sts	0x0152, r1
     636:	10 92 51 01 	sts	0x0151, r1
						back = WHITE;
     63a:	8f ef       	ldi	r24, 0xFF	; 255
     63c:	9f ef       	ldi	r25, 0xFF	; 255
     63e:	90 93 60 01 	sts	0x0160, r25
     642:	80 93 5f 01 	sts	0x015F, r24
     646:	0a c0       	rjmp	.+20     	; 0x65c <ScoreBoard+0x2f2>
					}
					
					else
					{
						fore = WHITE;
     648:	af ef       	ldi	r26, 0xFF	; 255
     64a:	bf ef       	ldi	r27, 0xFF	; 255
     64c:	b0 93 52 01 	sts	0x0152, r27
     650:	a0 93 51 01 	sts	0x0151, r26
						back = BLACK;
     654:	10 92 60 01 	sts	0x0160, r1
     658:	10 92 5f 01 	sts	0x015F, r1
					}
					PlotChar(Board[BoardSize - 1].PlayerName[Counter2]);
     65c:	f4 01       	movw	r30, r8
     65e:	ea 0d       	add	r30, r10
     660:	fb 1d       	adc	r31, r11
     662:	81 ad       	ldd	r24, Z+57	; 0x39
     664:	0e 94 3e 0c 	call	0x187c	; 0x187c <PlotChar>
				{
					Board[BoardSize - 1].PlayerName[Counter]++;	//Next Letter
				}
				while(T1 || T3);
				MoveTo(10, size / 2);
				for (Counter2 = 0; Counter2 < 3; Counter2++)
     668:	ea 2d       	mov	r30, r10
     66a:	ef 5f       	subi	r30, 0xFF	; 255
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	ea 15       	cp	r30, r10
     670:	08 f0       	brcs	.+2      	; 0x674 <ScoreBoard+0x30a>
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	79 2f       	mov	r23, r25
     676:	7b 0d       	add	r23, r11
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	7b 15       	cp	r23, r11
     67c:	08 f0       	brcs	.+2      	; 0x680 <ScoreBoard+0x316>
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	69 2f       	mov	r22, r25
     682:	6c 0d       	add	r22, r12
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	6c 15       	cp	r22, r12
     688:	08 f0       	brcs	.+2      	; 0x68c <ScoreBoard+0x322>
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	59 2f       	mov	r21, r25
     68e:	5d 0d       	add	r21, r13
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	5d 15       	cp	r21, r13
     694:	08 f0       	brcs	.+2      	; 0x698 <ScoreBoard+0x32e>
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	49 2f       	mov	r20, r25
     69a:	4e 0d       	add	r20, r14
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	4e 15       	cp	r20, r14
     6a0:	08 f0       	brcs	.+2      	; 0x6a4 <ScoreBoard+0x33a>
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	39 2f       	mov	r19, r25
     6a6:	3f 0d       	add	r19, r15
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	3f 15       	cp	r19, r15
     6ac:	08 f0       	brcs	.+2      	; 0x6b0 <ScoreBoard+0x346>
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	29 2f       	mov	r18, r25
     6b2:	20 0f       	add	r18, r16
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	20 17       	cp	r18, r16
     6b8:	08 f0       	brcs	.+2      	; 0x6bc <ScoreBoard+0x352>
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	89 2f       	mov	r24, r25
     6be:	81 0f       	add	r24, r17
     6c0:	ae 2e       	mov	r10, r30
     6c2:	b7 2e       	mov	r11, r23
     6c4:	c6 2e       	mov	r12, r22
     6c6:	d5 2e       	mov	r13, r21
     6c8:	e4 2e       	mov	r14, r20
     6ca:	f3 2e       	mov	r15, r19
     6cc:	02 2f       	mov	r16, r18
     6ce:	18 2f       	mov	r17, r24
     6d0:	b3 e0       	ldi	r27, 0x03	; 3
     6d2:	eb 17       	cp	r30, r27
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <ScoreBoard+0x36e>
     6d6:	99 cf       	rjmp	.-206    	; 0x60a <ScoreBoard+0x2a0>
     6d8:	77 23       	and	r23, r23
     6da:	09 f0       	breq	.+2      	; 0x6de <ScoreBoard+0x374>
     6dc:	96 cf       	rjmp	.-212    	; 0x60a <ScoreBoard+0x2a0>
     6de:	66 23       	and	r22, r22
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <ScoreBoard+0x37a>
     6e2:	93 cf       	rjmp	.-218    	; 0x60a <ScoreBoard+0x2a0>
     6e4:	55 23       	and	r21, r21
     6e6:	09 f0       	breq	.+2      	; 0x6ea <ScoreBoard+0x380>
     6e8:	90 cf       	rjmp	.-224    	; 0x60a <ScoreBoard+0x2a0>
     6ea:	44 23       	and	r20, r20
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <ScoreBoard+0x386>
     6ee:	8d cf       	rjmp	.-230    	; 0x60a <ScoreBoard+0x2a0>
     6f0:	33 23       	and	r19, r19
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <ScoreBoard+0x38c>
     6f4:	8a cf       	rjmp	.-236    	; 0x60a <ScoreBoard+0x2a0>
     6f6:	22 23       	and	r18, r18
     6f8:	09 f0       	breq	.+2      	; 0x6fc <ScoreBoard+0x392>
     6fa:	87 cf       	rjmp	.-242    	; 0x60a <ScoreBoard+0x2a0>
     6fc:	88 23       	and	r24, r24
     6fe:	09 f0       	breq	.+2      	; 0x702 <ScoreBoard+0x398>
     700:	84 cf       	rjmp	.-248    	; 0x60a <ScoreBoard+0x2a0>
						fore = WHITE;
						back = BLACK;
					}
					PlotChar(Board[BoardSize - 1].PlayerName[Counter2]);
				}
				fore = WHITE;
     702:	ef ef       	ldi	r30, 0xFF	; 255
     704:	ff ef       	ldi	r31, 0xFF	; 255
     706:	f0 93 52 01 	sts	0x0152, r31
     70a:	e0 93 51 01 	sts	0x0151, r30
				back = BLACK;
     70e:	10 92 60 01 	sts	0x0160, r1
     712:	10 92 5f 01 	sts	0x015F, r1
		//Name Input
		//==============================================================
		for (Counter = 0; Counter < 3; Counter++)
		{
			scale = 3;
			while(!T2)
     716:	4a 99       	sbic	0x09, 2	; 9
     718:	5a cf       	rjmp	.-332    	; 0x5ce <ScoreBoard+0x264>
					PlotChar(Board[BoardSize - 1].PlayerName[Counter2]);
				}
				fore = WHITE;
				back = BLACK;
			}
			while(T2);
     71a:	4a 9b       	sbis	0x09, 2	; 9
     71c:	fe cf       	rjmp	.-4      	; 0x71a <ScoreBoard+0x3b0>
		Board[BoardSize - 1].PlayerName[2] = 'A';	//|
		
		ClearDisplay();
		//Name Input
		//==============================================================
		for (Counter = 0; Counter < 3; Counter++)
     71e:	75 2d       	mov	r23, r5
     720:	7f 5f       	subi	r23, 0xFF	; 255
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	75 15       	cp	r23, r5
     726:	08 f0       	brcs	.+2      	; 0x72a <ScoreBoard+0x3c0>
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	68 2f       	mov	r22, r24
     72c:	64 0d       	add	r22, r4
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	64 15       	cp	r22, r4
     732:	08 f0       	brcs	.+2      	; 0x736 <ScoreBoard+0x3cc>
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	58 2f       	mov	r21, r24
     738:	53 0d       	add	r21, r3
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	53 15       	cp	r21, r3
     73e:	08 f0       	brcs	.+2      	; 0x742 <ScoreBoard+0x3d8>
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	48 2f       	mov	r20, r24
     744:	42 0d       	add	r20, r2
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	42 15       	cp	r20, r2
     74a:	08 f0       	brcs	.+2      	; 0x74e <ScoreBoard+0x3e4>
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	3e a1       	ldd	r19, Y+38	; 0x26
     750:	38 0f       	add	r19, r24
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	fe a1       	ldd	r31, Y+38	; 0x26
     756:	3f 17       	cp	r19, r31
     758:	08 f0       	brcs	.+2      	; 0x75c <ScoreBoard+0x3f2>
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	9f a1       	ldd	r25, Y+39	; 0x27
     75e:	98 0f       	add	r25, r24
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	2f a1       	ldd	r18, Y+39	; 0x27
     764:	92 17       	cp	r25, r18
     766:	08 f0       	brcs	.+2      	; 0x76a <ScoreBoard+0x400>
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	a8 a5       	ldd	r26, Y+40	; 0x28
     76c:	8a 0f       	add	r24, r26
     76e:	21 e0       	ldi	r18, 0x01	; 1
     770:	8a 17       	cp	r24, r26
     772:	08 f0       	brcs	.+2      	; 0x776 <ScoreBoard+0x40c>
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	2b 01       	movw	r4, r22
     778:	1a 01       	movw	r2, r20
     77a:	3e a3       	std	Y+38, r19	; 0x26
     77c:	9f a3       	std	Y+39, r25	; 0x27
     77e:	88 a7       	std	Y+40, r24	; 0x28
     780:	b9 a5       	ldd	r27, Y+41	; 0x29
     782:	b2 0f       	add	r27, r18
     784:	b9 a7       	std	Y+41, r27	; 0x29
     786:	08 94       	sec
     788:	61 1c       	adc	r6, r1
     78a:	71 1c       	adc	r7, r1
     78c:	e3 e0       	ldi	r30, 0x03	; 3
     78e:	5e 16       	cp	r5, r30
     790:	09 f0       	breq	.+2      	; 0x794 <ScoreBoard+0x42a>
     792:	16 cf       	rjmp	.-468    	; 0x5c0 <ScoreBoard+0x256>
     794:	66 23       	and	r22, r22
     796:	09 f0       	breq	.+2      	; 0x79a <ScoreBoard+0x430>
     798:	13 cf       	rjmp	.-474    	; 0x5c0 <ScoreBoard+0x256>
     79a:	55 23       	and	r21, r21
     79c:	09 f0       	breq	.+2      	; 0x7a0 <ScoreBoard+0x436>
     79e:	10 cf       	rjmp	.-480    	; 0x5c0 <ScoreBoard+0x256>
     7a0:	44 23       	and	r20, r20
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <ScoreBoard+0x43c>
     7a4:	0d cf       	rjmp	.-486    	; 0x5c0 <ScoreBoard+0x256>
     7a6:	33 23       	and	r19, r19
     7a8:	09 f0       	breq	.+2      	; 0x7ac <ScoreBoard+0x442>
     7aa:	0a cf       	rjmp	.-492    	; 0x5c0 <ScoreBoard+0x256>
     7ac:	99 23       	and	r25, r25
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <ScoreBoard+0x448>
     7b0:	07 cf       	rjmp	.-498    	; 0x5c0 <ScoreBoard+0x256>
     7b2:	88 23       	and	r24, r24
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <ScoreBoard+0x44e>
     7b6:	04 cf       	rjmp	.-504    	; 0x5c0 <ScoreBoard+0x256>
     7b8:	bb 23       	and	r27, r27
     7ba:	09 f0       	breq	.+2      	; 0x7be <ScoreBoard+0x454>
     7bc:	01 cf       	rjmp	.-510    	; 0x5c0 <ScoreBoard+0x256>
				fore = WHITE;
				back = BLACK;
			}
			while(T2);
		}
		scale = 1;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	90 93 54 01 	sts	0x0154, r25
     7c6:	80 93 53 01 	sts	0x0153, r24
		
		fore = WHITE;
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	9f ef       	ldi	r25, 0xFF	; 255
     7ce:	90 93 52 01 	sts	0x0152, r25
     7d2:	80 93 51 01 	sts	0x0151, r24
		
		//BoardSorting
		//==============================================================
		while(sorted == 0)
     7d6:	c4 01       	movw	r24, r8
     7d8:	0a 96       	adiw	r24, 0x0a	; 10
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	8d a7       	std	Y+45, r24	; 0x2d
     7de:	af 8d       	ldd	r26, Y+31	; 0x1f
     7e0:	b8 a1       	ldd	r27, Y+32	; 0x20
     7e2:	1a 96       	adiw	r26, 0x0a	; 10
     7e4:	b8 ab       	std	Y+48, r27	; 0x30
     7e6:	af a7       	std	Y+47, r26	; 0x2f
     7e8:	a4 c0       	rjmp	.+328    	; 0x932 <__stack+0x33>
		{
			sorted = 1;
			for (Counter = 1; Counter < BoardSize; Counter++)
			{
				if (Board[Counter - 1].Score < Board[Counter].Score)	//If last Score is smaller than current one then set them switched inside of Buffer
     7ea:	f8 01       	movw	r30, r16
     7ec:	20 81       	ld	r18, Z
     7ee:	31 81       	ldd	r19, Z+1	; 0x01
     7f0:	42 81       	ldd	r20, Z+2	; 0x02
     7f2:	53 81       	ldd	r21, Z+3	; 0x03
     7f4:	fb 01       	movw	r30, r22
     7f6:	80 81       	ld	r24, Z
     7f8:	91 81       	ldd	r25, Z+1	; 0x01
     7fa:	a2 81       	ldd	r26, Z+2	; 0x02
     7fc:	b3 81       	ldd	r27, Z+3	; 0x03
     7fe:	28 17       	cp	r18, r24
     800:	39 07       	cpc	r19, r25
     802:	4a 07       	cpc	r20, r26
     804:	5b 07       	cpc	r21, r27
     806:	80 f4       	brcc	.+32     	; 0x828 <ScoreBoard+0x4be>
				{
					sorted = 0;
					SortBuffer[Counter] = Board[Counter - 1];
     808:	d6 01       	movw	r26, r12
     80a:	f8 01       	movw	r30, r16
     80c:	8a e0       	ldi	r24, 0x0A	; 10
     80e:	01 90       	ld	r0, Z+
     810:	0d 92       	st	X+, r0
     812:	81 50       	subi	r24, 0x01	; 1
     814:	e1 f7       	brne	.-8      	; 0x80e <ScoreBoard+0x4a4>

					
					SortBuffer[Counter - 1] = Board[Counter];
     816:	d7 01       	movw	r26, r14
     818:	fb 01       	movw	r30, r22
     81a:	8a e0       	ldi	r24, 0x0A	; 10
     81c:	01 90       	ld	r0, Z+
     81e:	0d 92       	st	X+, r0
     820:	81 50       	subi	r24, 0x01	; 1
     822:	e1 f7       	brne	.-8      	; 0x81c <ScoreBoard+0x4b2>
     824:	1f 8a       	std	Y+23, r1	; 0x17
     826:	1f c0       	rjmp	.+62     	; 0x866 <ScoreBoard+0x4fc>

				}
				else 	//If not set current one in same position in Buffer
				{
					SortBuffer[Counter] = Board[Counter];
     828:	d6 01       	movw	r26, r12
     82a:	fb 01       	movw	r30, r22
     82c:	8a e0       	ldi	r24, 0x0A	; 10
     82e:	01 90       	ld	r0, Z+
     830:	0d 92       	st	X+, r0
     832:	81 50       	subi	r24, 0x01	; 1
     834:	e1 f7       	brne	.-8      	; 0x82e <ScoreBoard+0x4c4>

					if (Counter == 1)	//if current Score is 1 then set score 0 to position 0 buffer
     836:	f1 e0       	ldi	r31, 0x01	; 1
     838:	bf 16       	cp	r11, r31
     83a:	a9 f4       	brne	.+42     	; 0x866 <ScoreBoard+0x4fc>
     83c:	aa 20       	and	r10, r10
     83e:	99 f4       	brne	.+38     	; 0x866 <ScoreBoard+0x4fc>
     840:	77 20       	and	r7, r7
     842:	89 f4       	brne	.+34     	; 0x866 <ScoreBoard+0x4fc>
     844:	66 20       	and	r6, r6
     846:	79 f4       	brne	.+30     	; 0x866 <ScoreBoard+0x4fc>
     848:	55 20       	and	r5, r5
     84a:	69 f4       	brne	.+26     	; 0x866 <ScoreBoard+0x4fc>
     84c:	44 20       	and	r4, r4
     84e:	59 f4       	brne	.+22     	; 0x866 <ScoreBoard+0x4fc>
     850:	33 20       	and	r3, r3
     852:	49 f4       	brne	.+18     	; 0x866 <ScoreBoard+0x4fc>
     854:	22 20       	and	r2, r2
     856:	39 f4       	brne	.+14     	; 0x866 <ScoreBoard+0x4fc>
					{
						SortBuffer[Counter - 1] = Board[Counter - 1];
     858:	d7 01       	movw	r26, r14
     85a:	f8 01       	movw	r30, r16
     85c:	8a e0       	ldi	r24, 0x0A	; 10
     85e:	01 90       	ld	r0, Z+
     860:	0d 92       	st	X+, r0
     862:	81 50       	subi	r24, 0x01	; 1
     864:	e1 f7       	brne	.-8      	; 0x85e <ScoreBoard+0x4f4>
		//BoardSorting
		//==============================================================
		while(sorted == 0)
		{
			sorted = 1;
			for (Counter = 1; Counter < BoardSize; Counter++)
     866:	fb 2d       	mov	r31, r11
     868:	ff 5f       	subi	r31, 0xFF	; 255
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	fb 15       	cp	r31, r11
     86e:	08 f0       	brcs	.+2      	; 0x872 <ScoreBoard+0x508>
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	e8 2f       	mov	r30, r24
     874:	ea 0d       	add	r30, r10
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	ea 15       	cp	r30, r10
     87a:	08 f0       	brcs	.+2      	; 0x87e <ScoreBoard+0x514>
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	58 2f       	mov	r21, r24
     880:	57 0d       	add	r21, r7
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	57 15       	cp	r21, r7
     886:	08 f0       	brcs	.+2      	; 0x88a <ScoreBoard+0x520>
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	48 2f       	mov	r20, r24
     88c:	46 0d       	add	r20, r6
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	46 15       	cp	r20, r6
     892:	08 f0       	brcs	.+2      	; 0x896 <ScoreBoard+0x52c>
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	38 2f       	mov	r19, r24
     898:	35 0d       	add	r19, r5
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	35 15       	cp	r19, r5
     89e:	08 f0       	brcs	.+2      	; 0x8a2 <ScoreBoard+0x538>
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	28 2f       	mov	r18, r24
     8a4:	24 0d       	add	r18, r4
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	24 15       	cp	r18, r4
     8aa:	08 f0       	brcs	.+2      	; 0x8ae <ScoreBoard+0x544>
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	83 0d       	add	r24, r3
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	83 15       	cp	r24, r3
     8b4:	08 f0       	brcs	.+2      	; 0x8b8 <ScoreBoard+0x54e>
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	5f 01       	movw	r10, r30
     8ba:	3a 01       	movw	r6, r20
     8bc:	29 01       	movw	r4, r18
     8be:	38 2e       	mov	r3, r24
     8c0:	29 0e       	add	r2, r25
     8c2:	06 5f       	subi	r16, 0xF6	; 246
     8c4:	1f 4f       	sbci	r17, 0xFF	; 255
     8c6:	66 5f       	subi	r22, 0xF6	; 246
     8c8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ca:	aa e0       	ldi	r26, 0x0A	; 10
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	ca 0e       	add	r12, r26
     8d0:	db 1e       	adc	r13, r27
     8d2:	ea 0e       	add	r14, r26
     8d4:	fb 1e       	adc	r15, r27
     8d6:	b6 e0       	ldi	r27, 0x06	; 6
     8d8:	bb 16       	cp	r11, r27
     8da:	09 f0       	breq	.+2      	; 0x8de <ScoreBoard+0x574>
     8dc:	86 cf       	rjmp	.-244    	; 0x7ea <ScoreBoard+0x480>
     8de:	ee 23       	and	r30, r30
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <ScoreBoard+0x57a>
     8e2:	83 cf       	rjmp	.-250    	; 0x7ea <ScoreBoard+0x480>
     8e4:	55 23       	and	r21, r21
     8e6:	09 f0       	breq	.+2      	; 0x8ea <ScoreBoard+0x580>
     8e8:	80 cf       	rjmp	.-256    	; 0x7ea <ScoreBoard+0x480>
     8ea:	44 23       	and	r20, r20
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <ScoreBoard+0x586>
     8ee:	7d cf       	rjmp	.-262    	; 0x7ea <ScoreBoard+0x480>
     8f0:	33 23       	and	r19, r19
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <ScoreBoard+0x58c>
     8f4:	7a cf       	rjmp	.-268    	; 0x7ea <ScoreBoard+0x480>
     8f6:	22 23       	and	r18, r18
     8f8:	09 f0       	breq	.+2      	; 0x8fc <ScoreBoard+0x592>
     8fa:	77 cf       	rjmp	.-274    	; 0x7ea <ScoreBoard+0x480>
     8fc:	88 23       	and	r24, r24
     8fe:	09 f0       	breq	.+2      	; 0x902 <__stack+0x3>
     900:	74 cf       	rjmp	.-280    	; 0x7ea <ScoreBoard+0x480>
     902:	22 20       	and	r2, r2
     904:	09 f0       	breq	.+2      	; 0x908 <__stack+0x9>
     906:	71 cf       	rjmp	.-286    	; 0x7ea <ScoreBoard+0x480>
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
					}
				}
			}
			for (Counter = 0; Counter < BoardSize; Counter++)
			{
				Board[Counter] = SortBuffer[Counter];
     90c:	d4 01       	movw	r26, r8
     90e:	a8 0f       	add	r26, r24
     910:	b9 1f       	adc	r27, r25
     912:	ef 8d       	ldd	r30, Y+31	; 0x1f
     914:	f8 a1       	ldd	r31, Y+32	; 0x20
     916:	e8 0f       	add	r30, r24
     918:	f9 1f       	adc	r31, r25
     91a:	2a e0       	ldi	r18, 0x0A	; 10
     91c:	01 90       	ld	r0, Z+
     91e:	0d 92       	st	X+, r0
     920:	21 50       	subi	r18, 0x01	; 1
     922:	e1 f7       	brne	.-8      	; 0x91c <__stack+0x1d>
     924:	0a 96       	adiw	r24, 0x0a	; 10
					{
						SortBuffer[Counter - 1] = Board[Counter - 1];
					}
				}
			}
			for (Counter = 0; Counter < BoardSize; Counter++)
     926:	8c 33       	cpi	r24, 0x3C	; 60
     928:	91 05       	cpc	r25, r1
     92a:	81 f7       	brne	.-32     	; 0x90c <__stack+0xd>
		
		fore = WHITE;
		
		//BoardSorting
		//==============================================================
		while(sorted == 0)
     92c:	ef 89       	ldd	r30, Y+23	; 0x17
     92e:	ee 23       	and	r30, r30
     930:	99 f4       	brne	.+38     	; 0x958 <__stack+0x59>
     932:	84 01       	movw	r16, r8
     934:	6d a5       	ldd	r22, Y+45	; 0x2d
     936:	7e a5       	ldd	r23, Y+46	; 0x2e
     938:	cf a4       	ldd	r12, Y+47	; 0x2f
     93a:	d8 a8       	ldd	r13, Y+48	; 0x30
     93c:	ef 8c       	ldd	r14, Y+31	; 0x1f
     93e:	f8 a0       	ldd	r15, Y+32	; 0x20
     940:	f1 e0       	ldi	r31, 0x01	; 1
     942:	ff 8b       	std	Y+23, r31	; 0x17
     944:	bb 24       	eor	r11, r11
     946:	b3 94       	inc	r11
     948:	aa 24       	eor	r10, r10
     94a:	77 24       	eor	r7, r7
     94c:	66 24       	eor	r6, r6
     94e:	55 24       	eor	r5, r5
     950:	44 24       	eor	r4, r4
     952:	33 24       	eor	r3, r3
     954:	22 24       	eor	r2, r2
     956:	49 cf       	rjmp	.-366    	; 0x7ea <ScoreBoard+0x480>
     958:	84 01       	movw	r16, r8
     95a:	66 24       	eor	r6, r6
     95c:	77 24       	eor	r7, r7
     95e:	33 24       	eor	r3, r3
     960:	22 24       	eor	r2, r2
     962:	1b a2       	std	Y+35, r1	; 0x23
     964:	1c a2       	std	Y+36, r1	; 0x24
     966:	1d a2       	std	Y+37, r1	; 0x25
     968:	ee 24       	eor	r14, r14
     96a:	ff 24       	eor	r15, r15
     96c:	e0 e8       	ldi	r30, 0x80	; 128
     96e:	4e 2e       	mov	r4, r30
     970:	e1 e0       	ldi	r30, 0x01	; 1
     972:	5e 2e       	mov	r5, r30
     974:	70 e2       	ldi	r23, 0x20	; 32
     976:	a7 2e       	mov	r10, r23
     978:	71 e0       	ldi	r23, 0x01	; 1
     97a:	b7 2e       	mov	r11, r23
     97c:	60 e5       	ldi	r22, 0x50	; 80
     97e:	c6 2e       	mov	r12, r22
     980:	61 e0       	ldi	r22, 0x01	; 1
     982:	d6 2e       	mov	r13, r22
				Board[Counter] = SortBuffer[Counter];
			}
		}
		for (Counter = 0; Counter < BoardSize; Counter++)
		{
			eeprom_write_dword((uint32_t*)startAdress + (32 * Counter), Board[Counter].Score);	//Read eeprom
     984:	d8 01       	movw	r26, r16
     986:	4d 91       	ld	r20, X+
     988:	5d 91       	ld	r21, X+
     98a:	6d 91       	ld	r22, X+
     98c:	7c 91       	ld	r23, X
     98e:	c7 01       	movw	r24, r14
     990:	0e 94 46 14 	call	0x288c	; 0x288c <__eewr_dword_m328p>
			eeprom_write_word((uint16_t*)startAdress + (16 * Counter) + (32 * BoardSize), Board[Counter].ScoreMin);	//Read eeprom
     994:	f8 01       	movw	r30, r16
     996:	64 81       	ldd	r22, Z+4	; 0x04
     998:	75 81       	ldd	r23, Z+5	; 0x05
     99a:	c2 01       	movw	r24, r4
     99c:	0e 94 4e 14 	call	0x289c	; 0x289c <__eewr_word_m328p>
			eeprom_write_byte((uint8_t*)startAdress + (8 * Counter) + (48 * BoardSize), Board[Counter].ScoreSec);	//Read eeprom
     9a0:	c5 01       	movw	r24, r10
     9a2:	d8 01       	movw	r26, r16
     9a4:	16 96       	adiw	r26, 0x06	; 6
     9a6:	6c 91       	ld	r22, X
     9a8:	0e 94 38 14 	call	0x2870	; 0x2870 <__eewr_byte_m328p>
			eeprom_write_block(Board[Counter].PlayerName, (void*)startAdress + (12 * Counter) + (56 * BoardSize), 3);
     9ac:	86 2d       	mov	r24, r6
     9ae:	97 2d       	mov	r25, r7
     9b0:	9c 01       	movw	r18, r24
     9b2:	53 e0       	ldi	r21, 0x03	; 3
     9b4:	22 0f       	add	r18, r18
     9b6:	33 1f       	adc	r19, r19
     9b8:	5a 95       	dec	r21
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <__stack+0xb5>
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	28 0f       	add	r18, r24
     9c2:	39 1f       	adc	r19, r25
     9c4:	29 5f       	subi	r18, 0xF9	; 249
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255
     9c8:	c4 01       	movw	r24, r8
     9ca:	82 0f       	add	r24, r18
     9cc:	93 1f       	adc	r25, r19
     9ce:	b6 01       	movw	r22, r12
     9d0:	43 e0       	ldi	r20, 0x03	; 3
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	0e 94 2e 14 	call	0x285c	; 0x285c <__eewr_block_m328p>
			for (Counter = 0; Counter < BoardSize; Counter++)
			{
				Board[Counter] = SortBuffer[Counter];
			}
		}
		for (Counter = 0; Counter < BoardSize; Counter++)
     9d8:	66 2d       	mov	r22, r6
     9da:	6f 5f       	subi	r22, 0xFF	; 255
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	66 15       	cp	r22, r6
     9e0:	08 f0       	brcs	.+2      	; 0x9e4 <__stack+0xe5>
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	58 2f       	mov	r21, r24
     9e6:	57 0d       	add	r21, r7
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	57 15       	cp	r21, r7
     9ec:	08 f0       	brcs	.+2      	; 0x9f0 <__stack+0xf1>
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	48 2f       	mov	r20, r24
     9f2:	43 0d       	add	r20, r3
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	43 15       	cp	r20, r3
     9f8:	08 f0       	brcs	.+2      	; 0x9fc <__stack+0xfd>
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	38 2f       	mov	r19, r24
     9fe:	32 0d       	add	r19, r2
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	32 15       	cp	r19, r2
     a04:	08 f0       	brcs	.+2      	; 0xa08 <__stack+0x109>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	2b a1       	ldd	r18, Y+35	; 0x23
     a0a:	28 0f       	add	r18, r24
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	bb a1       	ldd	r27, Y+35	; 0x23
     a10:	2b 17       	cp	r18, r27
     a12:	08 f0       	brcs	.+2      	; 0xa16 <__stack+0x117>
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	9c a1       	ldd	r25, Y+36	; 0x24
     a18:	98 0f       	add	r25, r24
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	ec a1       	ldd	r30, Y+36	; 0x24
     a1e:	9e 17       	cp	r25, r30
     a20:	08 f0       	brcs	.+2      	; 0xa24 <__stack+0x125>
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	fd a1       	ldd	r31, Y+37	; 0x25
     a26:	8f 0f       	add	r24, r31
     a28:	66 2e       	mov	r6, r22
     a2a:	75 2e       	mov	r7, r21
     a2c:	34 2e       	mov	r3, r20
     a2e:	23 2e       	mov	r2, r19
     a30:	2b a3       	std	Y+35, r18	; 0x23
     a32:	9c a3       	std	Y+36, r25	; 0x24
     a34:	8d a3       	std	Y+37, r24	; 0x25
     a36:	80 e8       	ldi	r24, 0x80	; 128
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	e8 0e       	add	r14, r24
     a3c:	f9 1e       	adc	r15, r25
     a3e:	06 5f       	subi	r16, 0xF6	; 246
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	a0 e2       	ldi	r26, 0x20	; 32
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	4a 0e       	add	r4, r26
     a48:	5b 1e       	adc	r5, r27
     a4a:	e8 e0       	ldi	r30, 0x08	; 8
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	ae 0e       	add	r10, r30
     a50:	bf 1e       	adc	r11, r31
     a52:	8c e0       	ldi	r24, 0x0C	; 12
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	c8 0e       	add	r12, r24
     a58:	d9 1e       	adc	r13, r25
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	e9 16       	cp	r14, r25
     a5e:	93 e0       	ldi	r25, 0x03	; 3
     a60:	f9 06       	cpc	r15, r25
     a62:	09 f0       	breq	.+2      	; 0xa66 <__stack+0x167>
     a64:	8f cf       	rjmp	.-226    	; 0x984 <__stack+0x85>
			eeprom_write_word((uint16_t*)startAdress + (16 * Counter) + (32 * BoardSize), Board[Counter].ScoreMin);	//Read eeprom
			eeprom_write_byte((uint8_t*)startAdress + (8 * Counter) + (48 * BoardSize), Board[Counter].ScoreSec);	//Read eeprom
			eeprom_write_block(Board[Counter].PlayerName, (void*)startAdress + (12 * Counter) + (56 * BoardSize), 3);
		}
		//==============================================================
		ClearDisplay();
     a66:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <ClearDisplay>
		fore = WHITE;
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	9f ef       	ldi	r25, 0xFF	; 255
     a6e:	90 93 52 01 	sts	0x0152, r25
     a72:	80 93 51 01 	sts	0x0151, r24
     a76:	06 e7       	ldi	r16, 0x76	; 118
     a78:	10 e0       	ldi	r17, 0x00	; 0
			MoveTo(0, ((size - 10) - (10 * Counter)));
			for (Counter2 = 0; Counter2 < 3; Counter2++)
			{
				PlotChar(Board[Counter].PlayerName[Counter2]);
			}
			sprintf(buffer, "  %d:",Board[Counter].ScoreMin);
     a7a:	7e 01       	movw	r14, r28
     a7c:	08 94       	sec
     a7e:	e1 1c       	adc	r14, r1
     a80:	f1 1c       	adc	r15, r1
     a82:	23 e0       	ldi	r18, 0x03	; 3
     a84:	82 2e       	mov	r8, r18
     a86:	21 e0       	ldi	r18, 0x01	; 1
     a88:	92 2e       	mov	r9, r18
			PlotString(buffer);
			sprintf(buffer, "%d", Board[Counter].ScoreSec);
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a9 2e       	mov	r10, r25
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	b9 2e       	mov	r11, r25
			PlotString(buffer);
			sprintf(buffer, "  %d", Board[Counter].Score);
     a92:	89 e0       	ldi	r24, 0x09	; 9
     a94:	c8 2e       	mov	r12, r24
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	d8 2e       	mov	r13, r24
		
		//Print Score
		//==============================================================
		for (Counter = 0; Counter < BoardSize; Counter++)
		{
			MoveTo(0, ((size - 10) - (10 * Counter)));
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	b8 01       	movw	r22, r16
     aa0:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MoveTo>
			for (Counter2 = 0; Counter2 < 3; Counter2++)
			{
				PlotChar(Board[Counter].PlayerName[Counter2]);
     aa4:	ad 89       	ldd	r26, Y+21	; 0x15
     aa6:	be 89       	ldd	r27, Y+22	; 0x16
     aa8:	17 96       	adiw	r26, 0x07	; 7
     aaa:	8c 91       	ld	r24, X
     aac:	0e 94 3e 0c 	call	0x187c	; 0x187c <PlotChar>
     ab0:	ed 89       	ldd	r30, Y+21	; 0x15
     ab2:	fe 89       	ldd	r31, Y+22	; 0x16
     ab4:	80 85       	ldd	r24, Z+8	; 0x08
     ab6:	0e 94 3e 0c 	call	0x187c	; 0x187c <PlotChar>
     aba:	ad 89       	ldd	r26, Y+21	; 0x15
     abc:	be 89       	ldd	r27, Y+22	; 0x16
     abe:	19 96       	adiw	r26, 0x09	; 9
     ac0:	8c 91       	ld	r24, X
     ac2:	0e 94 3e 0c 	call	0x187c	; 0x187c <PlotChar>
			}
			sprintf(buffer, "  %d:",Board[Counter].ScoreMin);
     ac6:	00 d0       	rcall	.+0      	; 0xac8 <__stack+0x1c9>
     ac8:	00 d0       	rcall	.+0      	; 0xaca <__stack+0x1cb>
     aca:	00 d0       	rcall	.+0      	; 0xacc <__stack+0x1cd>
     acc:	ed b7       	in	r30, 0x3d	; 61
     ace:	fe b7       	in	r31, 0x3e	; 62
     ad0:	31 96       	adiw	r30, 0x01	; 1
     ad2:	ad b7       	in	r26, 0x3d	; 61
     ad4:	be b7       	in	r27, 0x3e	; 62
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	fc 92       	st	X, r15
     ada:	ee 92       	st	-X, r14
     adc:	11 97       	sbiw	r26, 0x01	; 1
     ade:	93 82       	std	Z+3, r9	; 0x03
     ae0:	82 82       	std	Z+2, r8	; 0x02
     ae2:	ad 89       	ldd	r26, Y+21	; 0x15
     ae4:	be 89       	ldd	r27, Y+22	; 0x16
     ae6:	14 96       	adiw	r26, 0x04	; 4
     ae8:	8d 91       	ld	r24, X+
     aea:	9c 91       	ld	r25, X
     aec:	15 97       	sbiw	r26, 0x05	; 5
     aee:	95 83       	std	Z+5, r25	; 0x05
     af0:	84 83       	std	Z+4, r24	; 0x04
     af2:	0e 94 09 12 	call	0x2412	; 0x2412 <sprintf>
			PlotString(buffer);
     af6:	ed b7       	in	r30, 0x3d	; 61
     af8:	fe b7       	in	r31, 0x3e	; 62
     afa:	36 96       	adiw	r30, 0x06	; 6
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	fe bf       	out	0x3e, r31	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	ed bf       	out	0x3d, r30	; 61
     b06:	c7 01       	movw	r24, r14
     b08:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <PlotString>
			sprintf(buffer, "%d", Board[Counter].ScoreSec);
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <__stack+0x20f>
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <__stack+0x211>
     b10:	00 d0       	rcall	.+0      	; 0xb12 <__stack+0x213>
     b12:	ed b7       	in	r30, 0x3d	; 61
     b14:	fe b7       	in	r31, 0x3e	; 62
     b16:	31 96       	adiw	r30, 0x01	; 1
     b18:	ad b7       	in	r26, 0x3d	; 61
     b1a:	be b7       	in	r27, 0x3e	; 62
     b1c:	12 96       	adiw	r26, 0x02	; 2
     b1e:	fc 92       	st	X, r15
     b20:	ee 92       	st	-X, r14
     b22:	11 97       	sbiw	r26, 0x01	; 1
     b24:	b3 82       	std	Z+3, r11	; 0x03
     b26:	a2 82       	std	Z+2, r10	; 0x02
     b28:	ad 89       	ldd	r26, Y+21	; 0x15
     b2a:	be 89       	ldd	r27, Y+22	; 0x16
     b2c:	16 96       	adiw	r26, 0x06	; 6
     b2e:	8c 91       	ld	r24, X
     b30:	84 83       	std	Z+4, r24	; 0x04
     b32:	15 82       	std	Z+5, r1	; 0x05
     b34:	0e 94 09 12 	call	0x2412	; 0x2412 <sprintf>
			PlotString(buffer);
     b38:	ed b7       	in	r30, 0x3d	; 61
     b3a:	fe b7       	in	r31, 0x3e	; 62
     b3c:	36 96       	adiw	r30, 0x06	; 6
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	fe bf       	out	0x3e, r31	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	ed bf       	out	0x3d, r30	; 61
     b48:	c7 01       	movw	r24, r14
     b4a:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <PlotString>
			sprintf(buffer, "  %d", Board[Counter].Score);
     b4e:	8d b7       	in	r24, 0x3d	; 61
     b50:	9e b7       	in	r25, 0x3e	; 62
     b52:	08 97       	sbiw	r24, 0x08	; 8
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	9e bf       	out	0x3e, r25	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	8d bf       	out	0x3d, r24	; 61
     b5e:	ed b7       	in	r30, 0x3d	; 61
     b60:	fe b7       	in	r31, 0x3e	; 62
     b62:	31 96       	adiw	r30, 0x01	; 1
     b64:	ad b7       	in	r26, 0x3d	; 61
     b66:	be b7       	in	r27, 0x3e	; 62
     b68:	12 96       	adiw	r26, 0x02	; 2
     b6a:	fc 92       	st	X, r15
     b6c:	ee 92       	st	-X, r14
     b6e:	11 97       	sbiw	r26, 0x01	; 1
     b70:	d3 82       	std	Z+3, r13	; 0x03
     b72:	c2 82       	std	Z+2, r12	; 0x02
     b74:	ad 89       	ldd	r26, Y+21	; 0x15
     b76:	be 89       	ldd	r27, Y+22	; 0x16
     b78:	2d 91       	ld	r18, X+
     b7a:	3d 91       	ld	r19, X+
     b7c:	4d 91       	ld	r20, X+
     b7e:	5c 91       	ld	r21, X
     b80:	24 83       	std	Z+4, r18	; 0x04
     b82:	35 83       	std	Z+5, r19	; 0x05
     b84:	46 83       	std	Z+6, r20	; 0x06
     b86:	57 83       	std	Z+7, r21	; 0x07
     b88:	0e 94 09 12 	call	0x2412	; 0x2412 <sprintf>
			PlotString(buffer);
     b8c:	ed b7       	in	r30, 0x3d	; 61
     b8e:	fe b7       	in	r31, 0x3e	; 62
     b90:	38 96       	adiw	r30, 0x08	; 8
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	fe bf       	out	0x3e, r31	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	ed bf       	out	0x3d, r30	; 61
     b9c:	c7 01       	movw	r24, r14
     b9e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <PlotString>
     ba2:	0a 50       	subi	r16, 0x0A	; 10
     ba4:	10 40       	sbci	r17, 0x00	; 0
     ba6:	8d 89       	ldd	r24, Y+21	; 0x15
     ba8:	9e 89       	ldd	r25, Y+22	; 0x16
     baa:	0a 96       	adiw	r24, 0x0a	; 10
     bac:	9e 8b       	std	Y+22, r25	; 0x16
     bae:	8d 8b       	std	Y+21, r24	; 0x15
		fore = WHITE;
		//==============================================================
		
		//Print Score
		//==============================================================
		for (Counter = 0; Counter < BoardSize; Counter++)
     bb0:	0a 33       	cpi	r16, 0x3A	; 58
     bb2:	11 05       	cpc	r17, r1
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <__stack+0x2b9>
     bb6:	71 cf       	rjmp	.-286    	; 0xa9a <__stack+0x19b>
			sprintf(buffer, "%d", Board[Counter].ScoreSec);
			PlotString(buffer);
			sprintf(buffer, "  %d", Board[Counter].Score);
			PlotString(buffer);
		}
		while(!T2)
     bb8:	4a 99       	sbic	0x09, 2	; 9
     bba:	fe cf       	rjmp	.-4      	; 0xbb8 <__stack+0x2b9>
				//~ {
					//~ eeprom_update_byte((uint8_t*)Counter, 0);	//Read eeprom
				//~ }
			//~ }
		}
	}
     bbc:	a9 a1       	ldd	r26, Y+33	; 0x21
     bbe:	ba a1       	ldd	r27, Y+34	; 0x22
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	be bf       	out	0x3e, r27	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	ad bf       	out	0x3d, r26	; 61
     bca:	e0 96       	adiw	r28, 0x30	; 48
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	cf 90       	pop	r12
     be6:	bf 90       	pop	r11
     be8:	af 90       	pop	r10
     bea:	9f 90       	pop	r9
     bec:	8f 90       	pop	r8
     bee:	7f 90       	pop	r7
     bf0:	6f 90       	pop	r6
     bf2:	5f 90       	pop	r5
     bf4:	4f 90       	pop	r4
     bf6:	3f 90       	pop	r3
     bf8:	2f 90       	pop	r2
     bfa:	08 95       	ret

00000bfc <BuildGrid.2003>:
	
	uint64_t Score = 0;	//Variable to store PlayerScore;
	int x;
	int y;
	void BuildGrid(void)
	{
     bfc:	2f 92       	push	r2
     bfe:	3f 92       	push	r3
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	e1 01       	movw	r28, r2
		for (x = 0; x < BlockGridSize[0]; x++)
     c08:	1b 86       	std	Y+11, r1	; 0x0b
     c0a:	1a 86       	std	Y+10, r1	; 0x0a
		{
			for (y = 0; y < BlockGridSize[1]; y++)
			{
				fore = rand();
				BlocksStatus[x][y] = 1;
     c0c:	11 e0       	ldi	r17, 0x01	; 1
     c0e:	51 c0       	rjmp	.+162    	; 0xcb2 <BuildGrid.2003+0xb6>
	int y;
	void BuildGrid(void)
	{
		for (x = 0; x < BlockGridSize[0]; x++)
		{
			for (y = 0; y < BlockGridSize[1]; y++)
     c10:	19 86       	std	Y+9, r1	; 0x09
     c12:	18 86       	std	Y+8, r1	; 0x08
     c14:	41 c0       	rjmp	.+130    	; 0xc98 <BuildGrid.2003+0x9c>
			{
				fore = rand();
     c16:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <rand>
     c1a:	90 93 52 01 	sts	0x0152, r25
     c1e:	80 93 51 01 	sts	0x0151, r24
				BlocksStatus[x][y] = 1;
     c22:	2a 85       	ldd	r18, Y+10	; 0x0a
     c24:	3b 85       	ldd	r19, Y+11	; 0x0b
     c26:	48 85       	ldd	r20, Y+8	; 0x08
     c28:	59 85       	ldd	r21, Y+9	; 0x09
     c2a:	ec 81       	ldd	r30, Y+4	; 0x04
     c2c:	fd 81       	ldd	r31, Y+5	; 0x05
     c2e:	8e 81       	ldd	r24, Y+6	; 0x06
     c30:	9f 81       	ldd	r25, Y+7	; 0x07
     c32:	bc 01       	movw	r22, r24
     c34:	26 9f       	mul	r18, r22
     c36:	c0 01       	movw	r24, r0
     c38:	27 9f       	mul	r18, r23
     c3a:	90 0d       	add	r25, r0
     c3c:	36 9f       	mul	r19, r22
     c3e:	90 0d       	add	r25, r0
     c40:	11 24       	eor	r1, r1
     c42:	e4 0f       	add	r30, r20
     c44:	f5 1f       	adc	r31, r21
     c46:	e8 0f       	add	r30, r24
     c48:	f9 1f       	adc	r31, r25
     c4a:	10 83       	st	Z, r17
				MoveTo(x * (BlockSize[0]) + BlockDist, (size / 2) + (y * BlockSize[1]) + BlockDist);
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	bc 01       	movw	r22, r24
     c52:	62 9f       	mul	r22, r18
     c54:	c0 01       	movw	r24, r0
     c56:	63 9f       	mul	r22, r19
     c58:	90 0d       	add	r25, r0
     c5a:	72 9f       	mul	r23, r18
     c5c:	90 0d       	add	r25, r0
     c5e:	11 24       	eor	r1, r1
     c60:	2b 81       	ldd	r18, Y+3	; 0x03
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	24 9f       	mul	r18, r20
     c66:	b0 01       	movw	r22, r0
     c68:	25 9f       	mul	r18, r21
     c6a:	70 0d       	add	r23, r0
     c6c:	34 9f       	mul	r19, r20
     c6e:	70 0d       	add	r23, r0
     c70:	11 24       	eor	r1, r1
     c72:	6f 5b       	subi	r22, 0xBF	; 191
     c74:	7f 4f       	sbci	r23, 0xFF	; 255
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MoveTo>
				FillRect(BlockSize[0] - BlockDist, BlockSize[1] - BlockDist);
     c7c:	8a 81       	ldd	r24, Y+2	; 0x02
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	6b 81       	ldd	r22, Y+3	; 0x03
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	61 50       	subi	r22, 0x01	; 1
     c86:	70 40       	sbci	r23, 0x00	; 0
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <FillRect>
	int y;
	void BuildGrid(void)
	{
		for (x = 0; x < BlockGridSize[0]; x++)
		{
			for (y = 0; y < BlockGridSize[1]; y++)
     c8e:	88 85       	ldd	r24, Y+8	; 0x08
     c90:	99 85       	ldd	r25, Y+9	; 0x09
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	99 87       	std	Y+9, r25	; 0x09
     c96:	88 87       	std	Y+8, r24	; 0x08
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	28 85       	ldd	r18, Y+8	; 0x08
     c9e:	39 85       	ldd	r19, Y+9	; 0x09
     ca0:	28 17       	cp	r18, r24
     ca2:	39 07       	cpc	r19, r25
     ca4:	0c f4       	brge	.+2      	; 0xca8 <BuildGrid.2003+0xac>
     ca6:	b7 cf       	rjmp	.-146    	; 0xc16 <BuildGrid.2003+0x1a>
	uint64_t Score = 0;	//Variable to store PlayerScore;
	int x;
	int y;
	void BuildGrid(void)
	{
		for (x = 0; x < BlockGridSize[0]; x++)
     ca8:	8a 85       	ldd	r24, Y+10	; 0x0a
     caa:	9b 85       	ldd	r25, Y+11	; 0x0b
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	9b 87       	std	Y+11, r25	; 0x0b
     cb0:	8a 87       	std	Y+10, r24	; 0x0a
     cb2:	88 81       	ld	r24, Y
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	2a 85       	ldd	r18, Y+10	; 0x0a
     cb8:	3b 85       	ldd	r19, Y+11	; 0x0b
     cba:	28 17       	cp	r18, r24
     cbc:	39 07       	cpc	r19, r25
     cbe:	0c f4       	brge	.+2      	; 0xcc2 <BuildGrid.2003+0xc6>
     cc0:	a7 cf       	rjmp	.-178    	; 0xc10 <BuildGrid.2003+0x14>
				BlocksStatus[x][y] = 1;
				MoveTo(x * (BlockSize[0]) + BlockDist, (size / 2) + (y * BlockSize[1]) + BlockDist);
				FillRect(BlockSize[0] - BlockDist, BlockSize[1] - BlockDist);
			}
		}
	}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	3f 90       	pop	r3
     cca:	2f 90       	pop	r2
     ccc:	08 95       	ret

00000cce <main>:
void ScoreBoard(uint32_t Score, uint16_t PlayMin, uint8_t PlaySec);

const uint8_t size = 128;

int main(void)
{
     cce:	2f 92       	push	r2
     cd0:	3f 92       	push	r3
     cd2:	4f 92       	push	r4
     cd4:	5f 92       	push	r5
     cd6:	6f 92       	push	r6
     cd8:	7f 92       	push	r7
     cda:	8f 92       	push	r8
     cdc:	9f 92       	push	r9
     cde:	af 92       	push	r10
     ce0:	bf 92       	push	r11
     ce2:	cf 92       	push	r12
     ce4:	df 92       	push	r13
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	c7 54       	subi	r28, 0x47	; 71
     cf8:	d0 40       	sbci	r29, 0x00	; 0
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
	DDRB |= (1<<DC) | (1<<CS) | (1<<MOSI) |( 1<<SCK); 	// All outputs
     d04:	64 b1       	in	r22, 0x04	; 4
     d06:	21 e0       	ldi	r18, 0x01	; 1
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	f9 01       	movw	r30, r18
     d0c:	00 90 49 01 	lds	r0, 0x0149
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <main+0x48>
     d12:	ee 0f       	add	r30, r30
     d14:	ff 1f       	adc	r31, r31
     d16:	0a 94       	dec	r0
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <main+0x44>
     d1a:	a9 01       	movw	r20, r18
     d1c:	00 90 47 01 	lds	r0, 0x0147
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <main+0x58>
     d22:	44 0f       	add	r20, r20
     d24:	55 1f       	adc	r21, r21
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <main+0x54>
     d2a:	c9 01       	movw	r24, r18
     d2c:	00 90 43 01 	lds	r0, 0x0143
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <main+0x68>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <main+0x64>
     d3a:	8e 2b       	or	r24, r30
     d3c:	68 2b       	or	r22, r24
     d3e:	00 90 45 01 	lds	r0, 0x0145
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <main+0x7a>
     d44:	22 0f       	add	r18, r18
     d46:	33 1f       	adc	r19, r19
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <main+0x76>
     d4c:	62 2b       	or	r22, r18
     d4e:	64 2b       	or	r22, r20
     d50:	64 b9       	out	0x04, r22	; 4
	PORTB = (1<<SCK) | (1<<CS) | (1<<DC);          		// clk, dc, and cs high
     d52:	84 2b       	or	r24, r20
     d54:	85 b9       	out	0x05, r24	; 5
	DDRB |= (1<<PB2);									//lcd Backlight output
     d56:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<CS) | (1<<PB2);                  		// cs high
     d58:	85 b1       	in	r24, 0x05	; 5
     d5a:	84 60       	ori	r24, 0x04	; 4
     d5c:	8e 2b       	or	r24, r30
     d5e:	85 b9       	out	0x05, r24	; 5
	DDRC |= (1<<PC3);									//Reset Output
     d60:	3b 9a       	sbi	0x07, 3	; 7
	DDRD |= (1<<PD7);									//Reset Output
     d62:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= (1<<PD7);	
     d64:	5f 9a       	sbi	0x0b, 7	; 11
									//Reset High
	DDRD &= ~((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//Taster 1-3
     d66:	8a b1       	in	r24, 0x0a	; 10
     d68:	8b 79       	andi	r24, 0x9B	; 155
     d6a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= ((1<<PD6) | (1<<PD2) | (1<<PD5)); 	//PUllups für Taster einschalten
     d6c:	8b b1       	in	r24, 0x0b	; 11
     d6e:	84 66       	ori	r24, 0x64	; 100
     d70:	8b b9       	out	0x0b, r24	; 11
	
		//Init SPI		CLK/2
	//==================================================================
	SPCR |= (1<<SPE) | (1<<MSTR);
     d72:	8c b5       	in	r24, 0x2c	; 44
     d74:	80 65       	ori	r24, 0x50	; 80
     d76:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
     d78:	8d b5       	in	r24, 0x2d	; 45
     d7a:	81 60       	ori	r24, 0x01	; 1
     d7c:	8d bd       	out	0x2d, r24	; 45
	//==================================================================
	
		//Timer 1 Configuration
	OCR1A = 1249;	//OCR1A = 0x3D08;==1sec
     d7e:	81 ee       	ldi	r24, 0xE1	; 225
     d80:	94 e0       	ldi	r25, 0x04	; 4
     d82:	90 93 89 00 	sts	0x0089, r25
     d86:	80 93 88 00 	sts	0x0088, r24
	
    TCCR1B |= (1 << WGM12);
     d8a:	80 91 81 00 	lds	r24, 0x0081
     d8e:	88 60       	ori	r24, 0x08	; 8
     d90:	80 93 81 00 	sts	0x0081, r24
    // Mode 4, CTC on OCR1A

    TIMSK1 |= (1 << OCIE1A);
     d94:	80 91 6f 00 	lds	r24, 0x006F
     d98:	82 60       	ori	r24, 0x02	; 2
     d9a:	80 93 6f 00 	sts	0x006F, r24
    //Set interrupt on compare match

    TCCR1B |= (1 << CS11) | (1 << CS10);
     d9e:	80 91 81 00 	lds	r24, 0x0081
     da2:	83 60       	ori	r24, 0x03	; 3
     da4:	80 93 81 00 	sts	0x0081, r24
    // set prescaler to 64 and start the timer

    sei();
     da8:	78 94       	sei
    // enable interrupts
    
    ms10=0;
     daa:	10 92 75 01 	sts	0x0175, r1
    ms100=0;
     dae:	10 92 78 01 	sts	0x0178, r1
    sec=0;
     db2:	10 92 79 01 	sts	0x0179, r1
    min=0;
     db6:	10 92 77 01 	sts	0x0177, r1
    entprell=0;
     dba:	10 92 76 01 	sts	0x0176, r1
	
	BACKLIGHT_ON;
     dbe:	2a 9a       	sbi	0x05, 2	; 5
	LED_ON;
     dc0:	43 9a       	sbi	0x08, 3	; 8

	setup();
     dc2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <setup>
	
	//Konfiguration Timer Overflow
	//==================================================================
	TCCR0A	= 0x00;
     dc6:	14 bc       	out	0x24, r1	; 36
	TCCR0B	= 0x04;
     dc8:	84 e0       	ldi	r24, 0x04	; 4
     dca:	85 bd       	out	0x25, r24	; 37
	TIMSK0	|= (1 << TOIE0);
     dcc:	80 91 6e 00 	lds	r24, 0x006E
     dd0:	81 60       	ori	r24, 0x01	; 1
     dd2:	80 93 6e 00 	sts	0x006E, r24
	TIFR0 |= (1 << TOV0);
     dd6:	a8 9a       	sbi	0x15, 0	; 21
	sei();
     dd8:	78 94       	sei
	
	uint8_t Frame = 0;	//Current Frame
	uint8_t UpdateFrequency = 1; //The amount of Frames between DisplayUpdates
	
	uint8_t BlockGridSize[2];
	BlockGridSize[0] =	10;	//Horizontal Size
     dda:	8a e0       	ldi	r24, 0x0A	; 10
     ddc:	89 83       	std	Y+1, r24	; 0x01
	BlockGridSize[1] =	5;	//Vertical Size
     dde:	85 e0       	ldi	r24, 0x05	; 5
     de0:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t BlockSize[2];
	BlockSize[0] = (size / BlockGridSize[0]);
     de2:	8c e0       	ldi	r24, 0x0C	; 12
     de4:	8b 83       	std	Y+3, r24	; 0x03
	BlockSize[1] = ((size / 2) / BlockGridSize[1]);
     de6:	8c 83       	std	Y+4, r24	; 0x04
	
	uint8_t BlocksStatus[BlockGridSize[0]][BlockGridSize[1]];
     de8:	85 e0       	ldi	r24, 0x05	; 5
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	98 87       	std	Y+8, r25	; 0x08
     dee:	8f 83       	std	Y+7, r24	; 0x07
     df0:	2d b7       	in	r18, 0x3d	; 61
     df2:	3e b7       	in	r19, 0x3e	; 62
     df4:	22 53       	subi	r18, 0x32	; 50
     df6:	30 40       	sbci	r19, 0x00	; 0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	3e bf       	out	0x3e, r19	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	2d bf       	out	0x3d, r18	; 61
     e02:	8d b7       	in	r24, 0x3d	; 61
     e04:	9e b7       	in	r25, 0x3e	; 62
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	9e 83       	std	Y+6, r25	; 0x06
     e0a:	8d 83       	std	Y+5, r24	; 0x05
				MoveTo(x * (BlockSize[0]) + BlockDist, (size / 2) + (y * BlockSize[1]) + BlockDist);
				FillRect(BlockSize[0] - BlockDist, BlockSize[1] - BlockDist);
			}
		}
	}
	BuildGrid();
     e0c:	8e 01       	movw	r16, r28
     e0e:	0f 5f       	subi	r16, 0xFF	; 255
     e10:	1f 4f       	sbci	r17, 0xFF	; 255
     e12:	18 01       	movw	r2, r16
     e14:	0e 94 fe 05 	call	0xbfc	; 0xbfc <BuildGrid.2003>
     e18:	33 e0       	ldi	r19, 0x03	; 3
     e1a:	3b ab       	std	Y+51, r19	; 0x33
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	6a ab       	std	Y+50, r22	; 0x32
     e20:	19 aa       	std	Y+49, r1	; 0x31
     e22:	1c aa       	std	Y+52, r1	; 0x34
     e24:	1d aa       	std	Y+53, r1	; 0x35
     e26:	1e aa       	std	Y+54, r1	; 0x36
     e28:	1f aa       	std	Y+55, r1	; 0x37
     e2a:	18 ae       	std	Y+56, r1	; 0x38
     e2c:	19 ae       	std	Y+57, r1	; 0x39
     e2e:	1a ae       	std	Y+58, r1	; 0x3a
     e30:	1b ae       	std	Y+59, r1	; 0x3b
     e32:	18 aa       	std	Y+48, r1	; 0x30
     e34:	1f a6       	std	Y+47, r1	; 0x2f
     e36:	0f 2e       	mov	r0, r31
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	4f 2e       	mov	r4, r31
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	5f 2e       	mov	r5, r31
     e40:	f0 e8       	ldi	r31, 0x80	; 128
     e42:	6f 2e       	mov	r6, r31
     e44:	ff eb       	ldi	r31, 0xBF	; 191
     e46:	7f 2e       	mov	r7, r31
     e48:	f0 2d       	mov	r31, r0
     e4a:	0f 2e       	mov	r0, r31
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	af 2e       	mov	r10, r31
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	bf 2e       	mov	r11, r31
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	cf 2e       	mov	r12, r31
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	df 2e       	mov	r13, r31
     e5c:	f0 2d       	mov	r31, r0
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	a0 e8       	ldi	r26, 0x80	; 128
     e64:	b2 e4       	ldi	r27, 0x42	; 66
     e66:	89 a7       	std	Y+41, r24	; 0x29
     e68:	9a a7       	std	Y+42, r25	; 0x2a
     e6a:	ab a7       	std	Y+43, r26	; 0x2b
     e6c:	bc a7       	std	Y+44, r27	; 0x2c
     e6e:	8d a3       	std	Y+37, r24	; 0x25
     e70:	9e a3       	std	Y+38, r25	; 0x26
     e72:	af a3       	std	Y+39, r26	; 0x27
     e74:	b8 a7       	std	Y+40, r27	; 0x28
     e76:	a0 e4       	ldi	r26, 0x40	; 64
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	bc a3       	std	Y+36, r27	; 0x24
     e7c:	ab a3       	std	Y+35, r26	; 0x23
     e7e:	ba a3       	std	Y+34, r27	; 0x22
     e80:	a9 a3       	std	Y+33, r26	; 0x21
				BallMove[0] = -1;
			}
			collided_Platform = 1;
			if (isActive == 0)
			{
				BuildGrid();
     e82:	23 96       	adiw	r28, 0x03	; 3
     e84:	0f af       	std	Y+63, r16	; 0x3f
     e86:	23 97       	sbiw	r28, 0x03	; 3
     e88:	24 96       	adiw	r28, 0x04	; 4
     e8a:	1f af       	std	Y+63, r17	; 0x3f
     e8c:	24 97       	sbiw	r28, 0x04	; 4
	while (1)
	{
		Frame++;
		//Input and RectangleClear
		//==============================================================
		fore = BLACK;
     e8e:	10 92 52 01 	sts	0x0152, r1
     e92:	10 92 51 01 	sts	0x0151, r1
		if (T3)
     e96:	4d 99       	sbic	0x09, 5	; 9
     e98:	14 c0       	rjmp	.+40     	; 0xec2 <main+0x1f4>
		{
			MoveTo(RectX - 1, RectY);
     e9a:	b8 a9       	ldd	r27, Y+48	; 0x30
     e9c:	8b 2f       	mov	r24, r27
     e9e:	99 27       	eor	r25, r25
     ea0:	87 fd       	sbrc	r24, 7
     ea2:	90 95       	com	r25
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	6a e0       	ldi	r22, 0x0A	; 10
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MoveTo>
			FillRect(2, rectHeight);
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	64 e0       	ldi	r22, 0x04	; 4
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <FillRect>
			RectX += rectSpeed;
     eba:	e8 a9       	ldd	r30, Y+48	; 0x30
     ebc:	ee 5f       	subi	r30, 0xFE	; 254
     ebe:	e8 ab       	std	Y+48, r30	; 0x30
     ec0:	15 c0       	rjmp	.+42     	; 0xeec <main+0x21e>
		}
		else if (T1)
     ec2:	4e 99       	sbic	0x09, 6	; 9
     ec4:	13 c0       	rjmp	.+38     	; 0xeec <main+0x21e>
		{
			MoveTo(RectX + rectWidth, RectY);
     ec6:	f8 a9       	ldd	r31, Y+48	; 0x30
     ec8:	8f 2f       	mov	r24, r31
     eca:	99 27       	eor	r25, r25
     ecc:	87 fd       	sbrc	r24, 7
     ece:	90 95       	com	r25
     ed0:	44 96       	adiw	r24, 0x14	; 20
     ed2:	6a e0       	ldi	r22, 0x0A	; 10
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MoveTo>
			FillRect(2, rectHeight);
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	64 e0       	ldi	r22, 0x04	; 4
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <FillRect>
			RectX -= rectSpeed;
     ee6:	28 a9       	ldd	r18, Y+48	; 0x30
     ee8:	22 50       	subi	r18, 0x02	; 2
     eea:	28 ab       	std	Y+48, r18	; 0x30
		
		//==============================================================
		
		//Ball movement
		//==============================================================
		BallCoord[0] += BallMove[0];
     eec:	6d a1       	ldd	r22, Y+37	; 0x25
     eee:	7e a1       	ldd	r23, Y+38	; 0x26
     ef0:	8f a1       	ldd	r24, Y+39	; 0x27
     ef2:	98 a5       	ldd	r25, Y+40	; 0x28
     ef4:	a6 01       	movw	r20, r12
     ef6:	95 01       	movw	r18, r10
     ef8:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__addsf3>
     efc:	6d a3       	std	Y+37, r22	; 0x25
     efe:	7e a3       	std	Y+38, r23	; 0x26
     f00:	8f a3       	std	Y+39, r24	; 0x27
     f02:	98 a7       	std	Y+40, r25	; 0x28
		BallCoord[1] += BallMove[1];
     f04:	69 a5       	ldd	r22, Y+41	; 0x29
     f06:	7a a5       	ldd	r23, Y+42	; 0x2a
     f08:	8b a5       	ldd	r24, Y+43	; 0x2b
     f0a:	9c a5       	ldd	r25, Y+44	; 0x2c
     f0c:	a3 01       	movw	r20, r6
     f0e:	92 01       	movw	r18, r4
     f10:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__addsf3>
     f14:	69 a7       	std	Y+41, r22	; 0x29
     f16:	7a a7       	std	Y+42, r23	; 0x2a
     f18:	8b a7       	std	Y+43, r24	; 0x2b
     f1a:	9c a7       	std	Y+44, r25	; 0x2c
		BallData[0] = BallCoord[0];
     f1c:	6d a1       	ldd	r22, Y+37	; 0x25
     f1e:	7e a1       	ldd	r23, Y+38	; 0x26
     f20:	8f a1       	ldd	r24, Y+39	; 0x27
     f22:	98 a5       	ldd	r25, Y+40	; 0x28
     f24:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__fixunssfsi>
     f28:	4b 01       	movw	r8, r22
		BallData[1] = BallCoord[1];
     f2a:	69 a5       	ldd	r22, Y+41	; 0x29
     f2c:	7a a5       	ldd	r23, Y+42	; 0x2a
     f2e:	8b a5       	ldd	r24, Y+43	; 0x2b
     f30:	9c a5       	ldd	r25, Y+44	; 0x2c
     f32:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__fixunssfsi>
     f36:	7e a7       	std	Y+46, r23	; 0x2e
     f38:	6d a7       	std	Y+45, r22	; 0x2d
     f3a:	68 a9       	ldd	r22, Y+48	; 0x30
     f3c:	67 fd       	sbrc	r22, 7
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	68 ab       	std	Y+48, r22	; 0x30
     f42:	6d 36       	cpi	r22, 0x6D	; 109
     f44:	14 f0       	brlt	.+4      	; 0xf4a <main+0x27c>
     f46:	3c e6       	ldi	r19, 0x6C	; 108
     f48:	38 ab       	std	Y+48, r19	; 0x30
		}
		//==============================================================
		
		//Check if Ball is Coliding with Wall
		//==============================================================
		if (BallData[0] > size - BallData[2])
     f4a:	6f e7       	ldi	r22, 0x7F	; 127
     f4c:	86 16       	cp	r8, r22
     f4e:	91 04       	cpc	r9, r1
     f50:	88 f0       	brcs	.+34     	; 0xf74 <main+0x2a6>
		{
			BallData[0] = size - BallData[2] - 3;
			BallCoord[0] = size - BallData[2] - 3;
			BallMove[0] = -BallMove[0];
     f52:	d7 fa       	bst	r13, 7
     f54:	d0 94       	com	r13
     f56:	d7 f8       	bld	r13, 7
     f58:	d0 94       	com	r13
     f5a:	19 aa       	std	Y+49, r1	; 0x31
     f5c:	0b e7       	ldi	r16, 0x7B	; 123
     f5e:	80 2e       	mov	r8, r16
     f60:	91 2c       	mov	r9, r1
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a6 ef       	ldi	r26, 0xF6	; 246
     f68:	b2 e4       	ldi	r27, 0x42	; 66
     f6a:	8d a3       	std	Y+37, r24	; 0x25
     f6c:	9e a3       	std	Y+38, r25	; 0x26
     f6e:	af a3       	std	Y+39, r26	; 0x27
     f70:	b8 a7       	std	Y+40, r27	; 0x28
     f72:	14 c0       	rjmp	.+40     	; 0xf9c <main+0x2ce>
			collided_Platform = 0;
		}
		else if(BallData[0] < BallData[2])
     f74:	92 e0       	ldi	r25, 0x02	; 2
     f76:	89 16       	cp	r8, r25
     f78:	91 04       	cpc	r9, r1
     f7a:	80 f4       	brcc	.+32     	; 0xf9c <main+0x2ce>
		{
			BallData[0] = BallData[2];
			BallCoord[0] = BallData[2];
			BallMove[0] = -BallMove[0];
     f7c:	d7 fa       	bst	r13, 7
     f7e:	d0 94       	com	r13
     f80:	d7 f8       	bld	r13, 7
     f82:	d0 94       	com	r13
     f84:	19 aa       	std	Y+49, r1	; 0x31
     f86:	12 e0       	ldi	r17, 0x02	; 2
     f88:	81 2e       	mov	r8, r17
     f8a:	91 2c       	mov	r9, r1
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e4       	ldi	r25, 0x40	; 64
     f94:	6d a3       	std	Y+37, r22	; 0x25
     f96:	7e a3       	std	Y+38, r23	; 0x26
     f98:	8f a3       	std	Y+39, r24	; 0x27
     f9a:	98 a7       	std	Y+40, r25	; 0x28
		}
		//==============================================================
		
		//Check if Ball is Coliding with Roof
		//==============================================================
		if (BallData[1] > size - BallData[2])
     f9c:	8d a5       	ldd	r24, Y+45	; 0x2d
     f9e:	9e a5       	ldd	r25, Y+46	; 0x2e
     fa0:	8f 37       	cpi	r24, 0x7F	; 127
     fa2:	91 05       	cpc	r25, r1
     fa4:	28 f0       	brcs	.+10     	; 0xfb0 <main+0x2e2>
		{
			BallMove[1] = -BallMove[1];
     fa6:	77 fa       	bst	r7, 7
     fa8:	70 94       	com	r7
     faa:	77 f8       	bld	r7, 7
     fac:	70 94       	com	r7
     fae:	19 aa       	std	Y+49, r1	; 0x31
		}
		//==============================================================
		
		//Check if Ball is Coliding with Rectangle
		//==============================================================
		if ((BallData[1] < (RectY + rectHeight + BallData[2]) && (BallData[0] < (rectWidth + RectX)) && (BallData[0] > RectX)) && collided_Platform != 1)
     fb0:	ad a5       	ldd	r26, Y+45	; 0x2d
     fb2:	be a5       	ldd	r27, Y+46	; 0x2e
     fb4:	50 97       	sbiw	r26, 0x10	; 16
     fb6:	08 f0       	brcs	.+2      	; 0xfba <main+0x2ec>
     fb8:	99 c0       	rjmp	.+306    	; 0x10ec <main+0x41e>
     fba:	b8 a9       	ldd	r27, Y+48	; 0x30
     fbc:	2b 2f       	mov	r18, r27
     fbe:	33 27       	eor	r19, r19
     fc0:	27 fd       	sbrc	r18, 7
     fc2:	30 95       	com	r19
     fc4:	c9 01       	movw	r24, r18
     fc6:	44 96       	adiw	r24, 0x14	; 20
     fc8:	88 16       	cp	r8, r24
     fca:	99 06       	cpc	r9, r25
     fcc:	08 f0       	brcs	.+2      	; 0xfd0 <main+0x302>
     fce:	8e c0       	rjmp	.+284    	; 0x10ec <main+0x41e>
     fd0:	28 15       	cp	r18, r8
     fd2:	39 05       	cpc	r19, r9
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <main+0x30a>
     fd6:	8a c0       	rjmp	.+276    	; 0x10ec <main+0x41e>
     fd8:	e9 a9       	ldd	r30, Y+49	; 0x31
     fda:	e1 30       	cpi	r30, 0x01	; 1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <main+0x312>
     fde:	86 c0       	rjmp	.+268    	; 0x10ec <main+0x41e>
		{
			tmp = ((BallCoord[0] - RectX) / rectWidth);
     fe0:	6b 2f       	mov	r22, r27
     fe2:	77 27       	eor	r23, r23
     fe4:	67 fd       	sbrc	r22, 7
     fe6:	70 95       	com	r23
     fe8:	87 2f       	mov	r24, r23
     fea:	97 2f       	mov	r25, r23
     fec:	0e 94 91 10 	call	0x2122	; 0x2122 <__floatsisf>
     ff0:	9b 01       	movw	r18, r22
     ff2:	ac 01       	movw	r20, r24
     ff4:	6d a1       	ldd	r22, Y+37	; 0x25
     ff6:	7e a1       	ldd	r23, Y+38	; 0x26
     ff8:	8f a1       	ldd	r24, Y+39	; 0x27
     ffa:	98 a5       	ldd	r25, Y+40	; 0x28
     ffc:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__subsf3>
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 ea       	ldi	r20, 0xA0	; 160
    1006:	51 e4       	ldi	r21, 0x41	; 65
    1008:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divsf3>
    100c:	7b 01       	movw	r14, r22
    100e:	8c 01       	movw	r16, r24
			if (BallMove[0] < 0)
    1010:	c6 01       	movw	r24, r12
    1012:	b5 01       	movw	r22, r10
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
    1020:	88 23       	and	r24, r24
    1022:	4c f4       	brge	.+18     	; 0x1036 <main+0x368>
			{
				BallMove[0] = tmp * 2 * -1; 
    1024:	c8 01       	movw	r24, r16
    1026:	b7 01       	movw	r22, r14
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	50 ec       	ldi	r21, 0xC0	; 192
    1030:	0e 94 45 11 	call	0x228a	; 0x228a <__mulsf3>
    1034:	1b c0       	rjmp	.+54     	; 0x106c <main+0x39e>
			}
			
			else if (BallMove[0] > 0)
    1036:	c6 01       	movw	r24, r12
    1038:	b5 01       	movw	r22, r10
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	0e 94 41 11 	call	0x2282	; 0x2282 <__gesf2>
    1046:	18 16       	cp	r1, r24
    1048:	5c f0       	brlt	.+22     	; 0x1060 <main+0x392>
    104a:	0f 2e       	mov	r0, r31
    104c:	fd ec       	ldi	r31, 0xCD	; 205
    104e:	af 2e       	mov	r10, r31
    1050:	fc ec       	ldi	r31, 0xCC	; 204
    1052:	bf 2e       	mov	r11, r31
    1054:	fc ec       	ldi	r31, 0xCC	; 204
    1056:	cf 2e       	mov	r12, r31
    1058:	fd e3       	ldi	r31, 0x3D	; 61
    105a:	df 2e       	mov	r13, r31
    105c:	f0 2d       	mov	r31, r0
    105e:	08 c0       	rjmp	.+16     	; 0x1070 <main+0x3a2>
			{
				BallMove[0] = tmp * 2; 
    1060:	c8 01       	movw	r24, r16
    1062:	b7 01       	movw	r22, r14
    1064:	a8 01       	movw	r20, r16
    1066:	97 01       	movw	r18, r14
    1068:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__addsf3>
    106c:	5b 01       	movw	r10, r22
    106e:	6c 01       	movw	r12, r24
			}
			else
			{
				BallMove[0] = 0.1;
			}
			BallMove[1] = -BallMove[1];
    1070:	77 fa       	bst	r7, 7
    1072:	70 94       	com	r7
    1074:	77 f8       	bld	r7, 7
    1076:	70 94       	com	r7
			
			if(BallMove[0] > 1)
    1078:	c6 01       	movw	r24, r12
    107a:	b5 01       	movw	r22, r10
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e8       	ldi	r20, 0x80	; 128
    1082:	5f e3       	ldi	r21, 0x3F	; 63
    1084:	0e 94 41 11 	call	0x2282	; 0x2282 <__gesf2>
    1088:	18 16       	cp	r1, r24
    108a:	5c f4       	brge	.+22     	; 0x10a2 <main+0x3d4>
    108c:	0f 2e       	mov	r0, r31
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	af 2e       	mov	r10, r31
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	bf 2e       	mov	r11, r31
    1096:	f0 e8       	ldi	r31, 0x80	; 128
    1098:	cf 2e       	mov	r12, r31
    109a:	ff e3       	ldi	r31, 0x3F	; 63
    109c:	df 2e       	mov	r13, r31
    109e:	f0 2d       	mov	r31, r0
    10a0:	14 c0       	rjmp	.+40     	; 0x10ca <main+0x3fc>
			{
				BallMove[0] = 1;
			}
			
			else if(BallMove[0] < -1)
    10a2:	c6 01       	movw	r24, r12
    10a4:	b5 01       	movw	r22, r10
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e8       	ldi	r20, 0x80	; 128
    10ac:	5f eb       	ldi	r21, 0xBF	; 191
    10ae:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
    10b2:	88 23       	and	r24, r24
    10b4:	54 f4       	brge	.+20     	; 0x10ca <main+0x3fc>
    10b6:	0f 2e       	mov	r0, r31
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	af 2e       	mov	r10, r31
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	bf 2e       	mov	r11, r31
    10c0:	f0 e8       	ldi	r31, 0x80	; 128
    10c2:	cf 2e       	mov	r12, r31
    10c4:	ff eb       	ldi	r31, 0xBF	; 191
    10c6:	df 2e       	mov	r13, r31
    10c8:	f0 2d       	mov	r31, r0
			{
				BallMove[0] = -1;
			}
			collided_Platform = 1;
			if (isActive == 0)
    10ca:	fa a9       	ldd	r31, Y+50	; 0x32
    10cc:	ff 23       	and	r31, r31
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <main+0x408>
    10d0:	21 e0       	ldi	r18, 0x01	; 1
    10d2:	29 ab       	std	Y+49, r18	; 0x31
    10d4:	0a c0       	rjmp	.+20     	; 0x10ea <main+0x41c>
			{
				BuildGrid();
    10d6:	23 96       	adiw	r28, 0x03	; 3
    10d8:	2f ac       	ldd	r2, Y+63	; 0x3f
    10da:	23 97       	sbiw	r28, 0x03	; 3
    10dc:	24 96       	adiw	r28, 0x04	; 4
    10de:	3f ac       	ldd	r3, Y+63	; 0x3f
    10e0:	24 97       	sbiw	r28, 0x04	; 4
    10e2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <BuildGrid.2003>
    10e6:	31 e0       	ldi	r19, 0x01	; 1
    10e8:	39 ab       	std	Y+49, r19	; 0x31
    10ea:	1f a6       	std	Y+47, r1	; 0x2f
		}
		//==============================================================
		
		//Check if Ball is Coliding Floor and if true reduce Lives if lives 0 then reset game
		//==============================================================
		if (BallData[1] < 3)
    10ec:	6d a5       	ldd	r22, Y+45	; 0x2d
    10ee:	7e a5       	ldd	r23, Y+46	; 0x2e
    10f0:	63 30       	cpi	r22, 0x03	; 3
    10f2:	71 05       	cpc	r23, r1
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <main+0x42a>
    10f6:	70 c0       	rjmp	.+224    	; 0x11d8 <main+0x50a>
		{
			lives--;
    10f8:	7b a9       	ldd	r23, Y+51	; 0x33
    10fa:	71 50       	subi	r23, 0x01	; 1
    10fc:	7b ab       	std	Y+51, r23	; 0x33
			BallData[1] = (size / 2) - 10;
			BallCoord[0] = size / 2;
			BallCoord[1] = (size / 2) - 10;
			BallMove[0] = 0;
			BallMove[1] = -1;
			if(lives == 0)
    10fe:	77 23       	and	r23, r23
    1100:	c9 f0       	breq	.+50     	; 0x1134 <main+0x466>
    1102:	0f 2e       	mov	r0, r31
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	4f 2e       	mov	r4, r31
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	5f 2e       	mov	r5, r31
    110c:	f0 e8       	ldi	r31, 0x80	; 128
    110e:	6f 2e       	mov	r6, r31
    1110:	ff eb       	ldi	r31, 0xBF	; 191
    1112:	7f 2e       	mov	r7, r31
    1114:	f0 2d       	mov	r31, r0
    1116:	0f 2e       	mov	r0, r31
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	af 2e       	mov	r10, r31
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	bf 2e       	mov	r11, r31
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	cf 2e       	mov	r12, r31
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	df 2e       	mov	r13, r31
    1128:	f0 2d       	mov	r31, r0
    112a:	86 e3       	ldi	r24, 0x36	; 54
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9e a7       	std	Y+46, r25	; 0x2e
    1130:	8d a7       	std	Y+45, r24	; 0x2d
    1132:	3f c0       	rjmp	.+126    	; 0x11b2 <main+0x4e4>
			{
				ScoreBoard(Score, minute, second);
    1134:	40 91 5d 01 	lds	r20, 0x015D
    1138:	50 91 5e 01 	lds	r21, 0x015E
    113c:	6c a9       	ldd	r22, Y+52	; 0x34
    113e:	7d a9       	ldd	r23, Y+53	; 0x35
    1140:	8e a9       	ldd	r24, Y+54	; 0x36
    1142:	9f a9       	ldd	r25, Y+55	; 0x37
    1144:	20 91 5c 01 	lds	r18, 0x015C
    1148:	0e 94 b5 01 	call	0x36a	; 0x36a <ScoreBoard>
				lives = StartLives;
				Score = 0;
				ClearDisplay();
    114c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <ClearDisplay>
				BuildGrid();
    1150:	23 96       	adiw	r28, 0x03	; 3
    1152:	2f ac       	ldd	r2, Y+63	; 0x3f
    1154:	23 97       	sbiw	r28, 0x03	; 3
    1156:	24 96       	adiw	r28, 0x04	; 4
    1158:	3f ac       	ldd	r3, Y+63	; 0x3f
    115a:	24 97       	sbiw	r28, 0x04	; 4
    115c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <BuildGrid.2003>
				collided_Platform = 0;
				minute = 0;
    1160:	10 92 5e 01 	sts	0x015E, r1
    1164:	10 92 5d 01 	sts	0x015D, r1
				second = 0;
    1168:	10 92 5c 01 	sts	0x015C, r1
    116c:	93 e0       	ldi	r25, 0x03	; 3
    116e:	9b ab       	std	Y+51, r25	; 0x33
    1170:	19 aa       	std	Y+49, r1	; 0x31
    1172:	1c aa       	std	Y+52, r1	; 0x34
    1174:	1d aa       	std	Y+53, r1	; 0x35
    1176:	1e aa       	std	Y+54, r1	; 0x36
    1178:	1f aa       	std	Y+55, r1	; 0x37
    117a:	18 ae       	std	Y+56, r1	; 0x38
    117c:	19 ae       	std	Y+57, r1	; 0x39
    117e:	1a ae       	std	Y+58, r1	; 0x3a
    1180:	1b ae       	std	Y+59, r1	; 0x3b
    1182:	0f 2e       	mov	r0, r31
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	4f 2e       	mov	r4, r31
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	5f 2e       	mov	r5, r31
    118c:	f0 e8       	ldi	r31, 0x80	; 128
    118e:	6f 2e       	mov	r6, r31
    1190:	ff eb       	ldi	r31, 0xBF	; 191
    1192:	7f 2e       	mov	r7, r31
    1194:	f0 2d       	mov	r31, r0
    1196:	0f 2e       	mov	r0, r31
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	af 2e       	mov	r10, r31
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	bf 2e       	mov	r11, r31
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	cf 2e       	mov	r12, r31
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	df 2e       	mov	r13, r31
    11a8:	f0 2d       	mov	r31, r0
    11aa:	a6 e3       	ldi	r26, 0x36	; 54
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	be a7       	std	Y+46, r27	; 0x2e
    11b0:	ad a7       	std	Y+45, r26	; 0x2d
    11b2:	b0 e4       	ldi	r27, 0x40	; 64
    11b4:	8b 2e       	mov	r8, r27
    11b6:	91 2c       	mov	r9, r1
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	88 e5       	ldi	r24, 0x58	; 88
    11be:	92 e4       	ldi	r25, 0x42	; 66
    11c0:	69 a7       	std	Y+41, r22	; 0x29
    11c2:	7a a7       	std	Y+42, r23	; 0x2a
    11c4:	8b a7       	std	Y+43, r24	; 0x2b
    11c6:	9c a7       	std	Y+44, r25	; 0x2c
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	a0 e8       	ldi	r26, 0x80	; 128
    11ce:	b2 e4       	ldi	r27, 0x42	; 66
    11d0:	8d a3       	std	Y+37, r24	; 0x25
    11d2:	9e a3       	std	Y+38, r25	; 0x26
    11d4:	af a3       	std	Y+39, r26	; 0x27
    11d6:	b8 a7       	std	Y+40, r27	; 0x28
		
		//Check if Ball is Coliding with Block
		//==============================================================
		collided = 0;
		isActive = 0;
		for (y = 0; y < BlockGridSize[1]; y++)
    11d8:	1a 86       	std	Y+10, r1	; 0x0a
    11da:	19 86       	std	Y+9, r1	; 0x09
    11dc:	1a aa       	std	Y+50, r1	; 0x32
    11de:	10 e0       	ldi	r17, 0x00	; 0
					if (collided == 0)
					{
						fore = BLACK;
						//Check if Ball is Coliding with Block horizontal side
						//==============================================================
						if ((BallData[0] + BallData[2]) > (x * BlockSize[0]) && (BallData[0] - BallData[2]) < ((x * BlockSize[0]) + BlockSize[0]) && (((BallData[1] - (size / 2)) == (y * BlockSize[1])) || ((BallData[1] - (size / 2)) == ((y * BlockSize[1]) + BlockSize[1]))))
    11e0:	d4 01       	movw	r26, r8
    11e2:	12 96       	adiw	r26, 0x02	; 2
    11e4:	bd af       	std	Y+61, r27	; 0x3d
    11e6:	ac af       	std	Y+60, r26	; 0x3c
						}
						//==============================================================
						
						//Check if Ball is inside Block
						//==============================================================
						else if ((BallData[0]) > (x * BlockSize[0]) && (BallData[0]) < ((x * BlockSize[0]) + BlockSize[0]) && (((BallData[1] - (size / 2)) > (y * BlockSize[1])) && ((BallData[1] - (size / 2)) < ((y * BlockSize[1]) + BlockSize[1]))))
    11e8:	ed a5       	ldd	r30, Y+45	; 0x2d
    11ea:	fe a5       	ldd	r31, Y+46	; 0x2e
    11ec:	e0 54       	subi	r30, 0x40	; 64
    11ee:	f0 40       	sbci	r31, 0x00	; 0
    11f0:	ff af       	std	Y+63, r31	; 0x3f
    11f2:	ee af       	std	Y+62, r30	; 0x3e
						}
						//==============================================================
		
						//Check if Ball is Coliding with Block vertical side
						//==============================================================
						else if ((BallData[0] + BallData[2] == (x * BlockSize[0]) || (BallData[0] - BallData[2] == ((x * BlockSize[0]) + BlockSize[0]))) && (((BallData[1] - (size / 2)) > (y * BlockSize[1])) && ((BallData[1] - (size / 2)) < ((y * BlockSize[1]) + BlockSize[1]))))
    11f4:	94 01       	movw	r18, r8
    11f6:	22 50       	subi	r18, 0x02	; 2
    11f8:	30 40       	sbci	r19, 0x00	; 0
    11fa:	22 96       	adiw	r28, 0x02	; 2
    11fc:	3f af       	std	Y+63, r19	; 0x3f
    11fe:	2e af       	std	Y+62, r18	; 0x3e
    1200:	22 97       	sbiw	r28, 0x02	; 2
    1202:	a3 c1       	rjmp	.+838    	; 0x154a <main+0x87c>
		//==============================================================
		collided = 0;
		isActive = 0;
		for (y = 0; y < BlockGridSize[1]; y++)
		{
			for (x = 0; x < BlockGridSize[0]; x++)
    1204:	1c 86       	std	Y+12, r1	; 0x0c
    1206:	1b 86       	std	Y+11, r1	; 0x0b
    1208:	92 c1       	rjmp	.+804    	; 0x152e <main+0x860>
			{
				MoveTo(x * (BlockSize[0]) + BlockDist, (size / 2) + (y * BlockSize[1]) + BlockDist);
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	bc 01       	movw	r22, r24
    1210:	62 9f       	mul	r22, r18
    1212:	c0 01       	movw	r24, r0
    1214:	63 9f       	mul	r22, r19
    1216:	90 0d       	add	r25, r0
    1218:	72 9f       	mul	r23, r18
    121a:	90 0d       	add	r25, r0
    121c:	11 24       	eor	r1, r1
    121e:	2c 81       	ldd	r18, Y+4	; 0x04
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	24 9f       	mul	r18, r20
    1224:	b0 01       	movw	r22, r0
    1226:	25 9f       	mul	r18, r21
    1228:	70 0d       	add	r23, r0
    122a:	34 9f       	mul	r19, r20
    122c:	70 0d       	add	r23, r0
    122e:	11 24       	eor	r1, r1
    1230:	6f 5b       	subi	r22, 0xBF	; 191
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	01 96       	adiw	r24, 0x01	; 1
    1236:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MoveTo>
				if (BlocksStatus[x][y] == 1)
    123a:	4b 85       	ldd	r20, Y+11	; 0x0b
    123c:	5c 85       	ldd	r21, Y+12	; 0x0c
    123e:	29 85       	ldd	r18, Y+9	; 0x09
    1240:	3a 85       	ldd	r19, Y+10	; 0x0a
    1242:	2f 80       	ldd	r2, Y+7	; 0x07
    1244:	38 84       	ldd	r3, Y+8	; 0x08
    1246:	ad 81       	ldd	r26, Y+5	; 0x05
    1248:	be 81       	ldd	r27, Y+6	; 0x06
    124a:	42 9d       	mul	r20, r2
    124c:	c0 01       	movw	r24, r0
    124e:	43 9d       	mul	r20, r3
    1250:	90 0d       	add	r25, r0
    1252:	52 9d       	mul	r21, r2
    1254:	90 0d       	add	r25, r0
    1256:	11 24       	eor	r1, r1
    1258:	fd 01       	movw	r30, r26
    125a:	e2 0f       	add	r30, r18
    125c:	f3 1f       	adc	r31, r19
    125e:	e8 0f       	add	r30, r24
    1260:	f9 1f       	adc	r31, r25
    1262:	80 81       	ld	r24, Z
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	09 f0       	breq	.+2      	; 0x126a <main+0x59c>
    1268:	5d c1       	rjmp	.+698    	; 0x1524 <main+0x856>
				{
					if (collided == 0)
    126a:	11 23       	and	r17, r17
    126c:	09 f0       	breq	.+2      	; 0x1270 <main+0x5a2>
    126e:	58 c1       	rjmp	.+688    	; 0x1520 <main+0x852>
					{
						fore = BLACK;
    1270:	10 92 52 01 	sts	0x0152, r1
    1274:	10 92 51 01 	sts	0x0151, r1
						//Check if Ball is Coliding with Block horizontal side
						//==============================================================
						if ((BallData[0] + BallData[2]) > (x * BlockSize[0]) && (BallData[0] - BallData[2]) < ((x * BlockSize[0]) + BlockSize[0]) && (((BallData[1] - (size / 2)) == (y * BlockSize[1])) || ((BallData[1] - (size / 2)) == ((y * BlockSize[1]) + BlockSize[1]))))
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	e8 2f       	mov	r30, r24
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	e4 9f       	mul	r30, r20
    1280:	c0 01       	movw	r24, r0
    1282:	e5 9f       	mul	r30, r21
    1284:	90 0d       	add	r25, r0
    1286:	f4 9f       	mul	r31, r20
    1288:	90 0d       	add	r25, r0
    128a:	11 24       	eor	r1, r1
    128c:	28 96       	adiw	r28, 0x08	; 8
    128e:	9f af       	std	Y+63, r25	; 0x3f
    1290:	8e af       	std	Y+62, r24	; 0x3e
    1292:	28 97       	sbiw	r28, 0x08	; 8
    1294:	ec ac       	ldd	r14, Y+60	; 0x3c
    1296:	fd ac       	ldd	r15, Y+61	; 0x3d
    1298:	8e 15       	cp	r24, r14
    129a:	9f 05       	cpc	r25, r15
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <main+0x5d2>
    129e:	43 c0       	rjmp	.+134    	; 0x1326 <main+0x658>
    12a0:	4f 5f       	subi	r20, 0xFF	; 255
    12a2:	5f 4f       	sbci	r21, 0xFF	; 255
    12a4:	4e 9f       	mul	r20, r30
    12a6:	c0 01       	movw	r24, r0
    12a8:	4f 9f       	mul	r20, r31
    12aa:	90 0d       	add	r25, r0
    12ac:	5e 9f       	mul	r21, r30
    12ae:	90 0d       	add	r25, r0
    12b0:	11 24       	eor	r1, r1
    12b2:	41 50       	subi	r20, 0x01	; 1
    12b4:	50 40       	sbci	r21, 0x00	; 0
    12b6:	22 96       	adiw	r28, 0x02	; 2
    12b8:	6e ad       	ldd	r22, Y+62	; 0x3e
    12ba:	7f ad       	ldd	r23, Y+63	; 0x3f
    12bc:	22 97       	sbiw	r28, 0x02	; 2
    12be:	68 17       	cp	r22, r24
    12c0:	79 07       	cpc	r23, r25
    12c2:	88 f5       	brcc	.+98     	; 0x1326 <main+0x658>
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	68 2f       	mov	r22, r24
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	62 9f       	mul	r22, r18
    12cc:	c0 01       	movw	r24, r0
    12ce:	63 9f       	mul	r22, r19
    12d0:	90 0d       	add	r25, r0
    12d2:	72 9f       	mul	r23, r18
    12d4:	90 0d       	add	r25, r0
    12d6:	11 24       	eor	r1, r1
    12d8:	ee ac       	ldd	r14, Y+62	; 0x3e
    12da:	ff ac       	ldd	r15, Y+63	; 0x3f
    12dc:	e8 16       	cp	r14, r24
    12de:	f9 06       	cpc	r15, r25
    12e0:	71 f0       	breq	.+28     	; 0x12fe <main+0x630>
    12e2:	2f 5f       	subi	r18, 0xFF	; 255
    12e4:	3f 4f       	sbci	r19, 0xFF	; 255
    12e6:	26 9f       	mul	r18, r22
    12e8:	c0 01       	movw	r24, r0
    12ea:	27 9f       	mul	r18, r23
    12ec:	90 0d       	add	r25, r0
    12ee:	36 9f       	mul	r19, r22
    12f0:	90 0d       	add	r25, r0
    12f2:	11 24       	eor	r1, r1
    12f4:	21 50       	subi	r18, 0x01	; 1
    12f6:	30 40       	sbci	r19, 0x00	; 0
    12f8:	e8 16       	cp	r14, r24
    12fa:	f9 06       	cpc	r15, r25
    12fc:	a1 f4       	brne	.+40     	; 0x1326 <main+0x658>
						{
							comboMult++;
    12fe:	9f a5       	ldd	r25, Y+47	; 0x2f
    1300:	9f 5f       	subi	r25, 0xFF	; 255
    1302:	9f a7       	std	Y+47, r25	; 0x2f
							BlocksStatus[x][y] = 0;
    1304:	42 9d       	mul	r20, r2
    1306:	c0 01       	movw	r24, r0
    1308:	43 9d       	mul	r20, r3
    130a:	90 0d       	add	r25, r0
    130c:	52 9d       	mul	r21, r2
    130e:	90 0d       	add	r25, r0
    1310:	11 24       	eor	r1, r1
    1312:	a2 0f       	add	r26, r18
    1314:	b3 1f       	adc	r27, r19
    1316:	a8 0f       	add	r26, r24
    1318:	b9 1f       	adc	r27, r25
    131a:	1c 92       	st	X, r1
							BallMove[1] = -BallMove[1];
    131c:	77 fa       	bst	r7, 7
    131e:	70 94       	com	r7
    1320:	77 f8       	bld	r7, 7
    1322:	70 94       	com	r7
    1324:	85 c0       	rjmp	.+266    	; 0x1430 <main+0x762>
						}
						//==============================================================
		
						//Check if Ball is Coliding with Block vertical side
						//==============================================================
						else if ((BallData[0] + BallData[2] == (x * BlockSize[0]) || (BallData[0] - BallData[2] == ((x * BlockSize[0]) + BlockSize[0]))) && (((BallData[1] - (size / 2)) > (y * BlockSize[1])) && ((BallData[1] - (size / 2)) < ((y * BlockSize[1]) + BlockSize[1]))))
    1326:	ec ac       	ldd	r14, Y+60	; 0x3c
    1328:	fd ac       	ldd	r15, Y+61	; 0x3d
    132a:	28 96       	adiw	r28, 0x08	; 8
    132c:	6e ad       	ldd	r22, Y+62	; 0x3e
    132e:	7f ad       	ldd	r23, Y+63	; 0x3f
    1330:	28 97       	sbiw	r28, 0x08	; 8
    1332:	e6 16       	cp	r14, r22
    1334:	f7 06       	cpc	r15, r23
    1336:	91 f0       	breq	.+36     	; 0x135c <main+0x68e>
    1338:	4f 5f       	subi	r20, 0xFF	; 255
    133a:	5f 4f       	sbci	r21, 0xFF	; 255
    133c:	4e 9f       	mul	r20, r30
    133e:	c0 01       	movw	r24, r0
    1340:	4f 9f       	mul	r20, r31
    1342:	90 0d       	add	r25, r0
    1344:	5e 9f       	mul	r21, r30
    1346:	90 0d       	add	r25, r0
    1348:	11 24       	eor	r1, r1
    134a:	41 50       	subi	r20, 0x01	; 1
    134c:	50 40       	sbci	r21, 0x00	; 0
    134e:	22 96       	adiw	r28, 0x02	; 2
    1350:	ee ac       	ldd	r14, Y+62	; 0x3e
    1352:	ff ac       	ldd	r15, Y+63	; 0x3f
    1354:	22 97       	sbiw	r28, 0x02	; 2
    1356:	e8 16       	cp	r14, r24
    1358:	f9 06       	cpc	r15, r25
    135a:	09 f5       	brne	.+66     	; 0x139e <main+0x6d0>
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	68 2f       	mov	r22, r24
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	62 9f       	mul	r22, r18
    1364:	c0 01       	movw	r24, r0
    1366:	63 9f       	mul	r22, r19
    1368:	90 0d       	add	r25, r0
    136a:	72 9f       	mul	r23, r18
    136c:	90 0d       	add	r25, r0
    136e:	11 24       	eor	r1, r1
    1370:	ee ac       	ldd	r14, Y+62	; 0x3e
    1372:	ff ac       	ldd	r15, Y+63	; 0x3f
    1374:	8e 15       	cp	r24, r14
    1376:	9f 05       	cpc	r25, r15
    1378:	90 f4       	brcc	.+36     	; 0x139e <main+0x6d0>
    137a:	2f 5f       	subi	r18, 0xFF	; 255
    137c:	3f 4f       	sbci	r19, 0xFF	; 255
    137e:	26 9f       	mul	r18, r22
    1380:	c0 01       	movw	r24, r0
    1382:	27 9f       	mul	r18, r23
    1384:	90 0d       	add	r25, r0
    1386:	36 9f       	mul	r19, r22
    1388:	90 0d       	add	r25, r0
    138a:	11 24       	eor	r1, r1
    138c:	21 50       	subi	r18, 0x01	; 1
    138e:	30 40       	sbci	r19, 0x00	; 0
    1390:	e8 16       	cp	r14, r24
    1392:	f9 06       	cpc	r15, r25
    1394:	20 f4       	brcc	.+8      	; 0x139e <main+0x6d0>
						{
							comboMult++;
    1396:	9f a5       	ldd	r25, Y+47	; 0x2f
    1398:	9f 5f       	subi	r25, 0xFF	; 255
    139a:	9f a7       	std	Y+47, r25	; 0x2f
    139c:	39 c0       	rjmp	.+114    	; 0x1410 <main+0x742>
						}
						//==============================================================
						
						//Check if Ball is inside Block
						//==============================================================
						else if ((BallData[0]) > (x * BlockSize[0]) && (BallData[0]) < ((x * BlockSize[0]) + BlockSize[0]) && (((BallData[1] - (size / 2)) > (y * BlockSize[1])) && ((BallData[1] - (size / 2)) < ((y * BlockSize[1]) + BlockSize[1]))))
    139e:	28 96       	adiw	r28, 0x08	; 8
    13a0:	ee ac       	ldd	r14, Y+62	; 0x3e
    13a2:	ff ac       	ldd	r15, Y+63	; 0x3f
    13a4:	28 97       	sbiw	r28, 0x08	; 8
    13a6:	e8 14       	cp	r14, r8
    13a8:	f9 04       	cpc	r15, r9
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <main+0x6e0>
    13ac:	b9 c0       	rjmp	.+370    	; 0x1520 <main+0x852>
    13ae:	4f 5f       	subi	r20, 0xFF	; 255
    13b0:	5f 4f       	sbci	r21, 0xFF	; 255
    13b2:	4e 9f       	mul	r20, r30
    13b4:	c0 01       	movw	r24, r0
    13b6:	4f 9f       	mul	r20, r31
    13b8:	90 0d       	add	r25, r0
    13ba:	5e 9f       	mul	r21, r30
    13bc:	90 0d       	add	r25, r0
    13be:	11 24       	eor	r1, r1
    13c0:	41 50       	subi	r20, 0x01	; 1
    13c2:	50 40       	sbci	r21, 0x00	; 0
    13c4:	88 16       	cp	r8, r24
    13c6:	99 06       	cpc	r9, r25
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <main+0x6fe>
    13ca:	aa c0       	rjmp	.+340    	; 0x1520 <main+0x852>
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	68 2f       	mov	r22, r24
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	62 9f       	mul	r22, r18
    13d4:	c0 01       	movw	r24, r0
    13d6:	63 9f       	mul	r22, r19
    13d8:	90 0d       	add	r25, r0
    13da:	72 9f       	mul	r23, r18
    13dc:	90 0d       	add	r25, r0
    13de:	11 24       	eor	r1, r1
    13e0:	ee ac       	ldd	r14, Y+62	; 0x3e
    13e2:	ff ac       	ldd	r15, Y+63	; 0x3f
    13e4:	8e 15       	cp	r24, r14
    13e6:	9f 05       	cpc	r25, r15
    13e8:	08 f0       	brcs	.+2      	; 0x13ec <main+0x71e>
    13ea:	9a c0       	rjmp	.+308    	; 0x1520 <main+0x852>
    13ec:	2f 5f       	subi	r18, 0xFF	; 255
    13ee:	3f 4f       	sbci	r19, 0xFF	; 255
    13f0:	26 9f       	mul	r18, r22
    13f2:	c0 01       	movw	r24, r0
    13f4:	27 9f       	mul	r18, r23
    13f6:	90 0d       	add	r25, r0
    13f8:	36 9f       	mul	r19, r22
    13fa:	90 0d       	add	r25, r0
    13fc:	11 24       	eor	r1, r1
    13fe:	21 50       	subi	r18, 0x01	; 1
    1400:	30 40       	sbci	r19, 0x00	; 0
    1402:	e8 16       	cp	r14, r24
    1404:	f9 06       	cpc	r15, r25
    1406:	08 f0       	brcs	.+2      	; 0x140a <main+0x73c>
    1408:	8b c0       	rjmp	.+278    	; 0x1520 <main+0x852>
						{
							comboMult++;
    140a:	8f a5       	ldd	r24, Y+47	; 0x2f
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	8f a7       	std	Y+47, r24	; 0x2f
							BlocksStatus[x][y] = 0;
    1410:	42 9d       	mul	r20, r2
    1412:	c0 01       	movw	r24, r0
    1414:	43 9d       	mul	r20, r3
    1416:	90 0d       	add	r25, r0
    1418:	52 9d       	mul	r21, r2
    141a:	90 0d       	add	r25, r0
    141c:	11 24       	eor	r1, r1
    141e:	a2 0f       	add	r26, r18
    1420:	b3 1f       	adc	r27, r19
    1422:	a8 0f       	add	r26, r24
    1424:	b9 1f       	adc	r27, r25
    1426:	1c 92       	st	X, r1
							BallMove[0] = -BallMove[0];
    1428:	d7 fa       	bst	r13, 7
    142a:	d0 94       	com	r13
    142c:	d7 f8       	bld	r13, 7
    142e:	d0 94       	com	r13
							FillRect(BlockSize[0] - BlockDist, BlockSize[1] - BlockDist);
    1430:	61 50       	subi	r22, 0x01	; 1
    1432:	70 40       	sbci	r23, 0x00	; 0
    1434:	cf 01       	movw	r24, r30
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <FillRect>
							collided = 1;
							collided_Platform = 0;
							Score += 1 * comboMult;
    143c:	af a5       	ldd	r26, Y+47	; 0x2f
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0c a9       	ldd	r16, Y+52	; 0x34
    144e:	0a 0f       	add	r16, r26
    1450:	f1 e0       	ldi	r31, 0x01	; 1
    1452:	bc a9       	ldd	r27, Y+52	; 0x34
    1454:	0b 17       	cp	r16, r27
    1456:	08 f0       	brcs	.+2      	; 0x145a <main+0x78c>
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	ed a9       	ldd	r30, Y+53	; 0x35
    145c:	e3 0f       	add	r30, r19
    145e:	a1 e0       	ldi	r26, 0x01	; 1
    1460:	ed a8       	ldd	r14, Y+53	; 0x35
    1462:	ee 15       	cp	r30, r14
    1464:	08 f0       	brcs	.+2      	; 0x1468 <main+0x79a>
    1466:	a0 e0       	ldi	r26, 0x00	; 0
    1468:	1f 2f       	mov	r17, r31
    146a:	1e 0f       	add	r17, r30
    146c:	f1 e0       	ldi	r31, 0x01	; 1
    146e:	1e 17       	cp	r17, r30
    1470:	08 f0       	brcs	.+2      	; 0x1474 <main+0x7a6>
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	af 2b       	or	r26, r31
    1476:	ee a9       	ldd	r30, Y+54	; 0x36
    1478:	e4 0f       	add	r30, r20
    147a:	b1 e0       	ldi	r27, 0x01	; 1
    147c:	fe a8       	ldd	r15, Y+54	; 0x36
    147e:	ef 15       	cp	r30, r15
    1480:	08 f0       	brcs	.+2      	; 0x1484 <main+0x7b6>
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	2a 2e       	mov	r2, r26
    1486:	2e 0e       	add	r2, r30
    1488:	f1 e0       	ldi	r31, 0x01	; 1
    148a:	2e 16       	cp	r2, r30
    148c:	08 f0       	brcs	.+2      	; 0x1490 <main+0x7c2>
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	bf 2b       	or	r27, r31
    1492:	ef a9       	ldd	r30, Y+55	; 0x37
    1494:	e5 0f       	add	r30, r21
    1496:	a1 e0       	ldi	r26, 0x01	; 1
    1498:	ff a9       	ldd	r31, Y+55	; 0x37
    149a:	ef 17       	cp	r30, r31
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <main+0x7d2>
    149e:	a0 e0       	ldi	r26, 0x00	; 0
    14a0:	3b 2e       	mov	r3, r27
    14a2:	3e 0e       	add	r3, r30
    14a4:	f1 e0       	ldi	r31, 0x01	; 1
    14a6:	3e 16       	cp	r3, r30
    14a8:	08 f0       	brcs	.+2      	; 0x14ac <main+0x7de>
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	af 2b       	or	r26, r31
    14ae:	e8 ad       	ldd	r30, Y+56	; 0x38
    14b0:	e6 0f       	add	r30, r22
    14b2:	b1 e0       	ldi	r27, 0x01	; 1
    14b4:	e8 ac       	ldd	r14, Y+56	; 0x38
    14b6:	ee 15       	cp	r30, r14
    14b8:	08 f0       	brcs	.+2      	; 0x14bc <main+0x7ee>
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	ea 2e       	mov	r14, r26
    14be:	ee 0e       	add	r14, r30
    14c0:	f1 e0       	ldi	r31, 0x01	; 1
    14c2:	ee 16       	cp	r14, r30
    14c4:	08 f0       	brcs	.+2      	; 0x14c8 <main+0x7fa>
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	bf 2b       	or	r27, r31
    14ca:	e9 ad       	ldd	r30, Y+57	; 0x39
    14cc:	e7 0f       	add	r30, r23
    14ce:	a1 e0       	ldi	r26, 0x01	; 1
    14d0:	f9 ac       	ldd	r15, Y+57	; 0x39
    14d2:	ef 15       	cp	r30, r15
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <main+0x80a>
    14d6:	a0 e0       	ldi	r26, 0x00	; 0
    14d8:	fb 2e       	mov	r15, r27
    14da:	fe 0e       	add	r15, r30
    14dc:	f1 e0       	ldi	r31, 0x01	; 1
    14de:	fe 16       	cp	r15, r30
    14e0:	08 f0       	brcs	.+2      	; 0x14e4 <main+0x816>
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	af 2b       	or	r26, r31
    14e6:	ea ad       	ldd	r30, Y+58	; 0x3a
    14e8:	e8 0f       	add	r30, r24
    14ea:	b1 e0       	ldi	r27, 0x01	; 1
    14ec:	fa ad       	ldd	r31, Y+58	; 0x3a
    14ee:	ef 17       	cp	r30, r31
    14f0:	08 f0       	brcs	.+2      	; 0x14f4 <main+0x826>
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ae 0f       	add	r26, r30
    14f6:	f1 e0       	ldi	r31, 0x01	; 1
    14f8:	ae 17       	cp	r26, r30
    14fa:	08 f0       	brcs	.+2      	; 0x14fe <main+0x830>
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	bf 2b       	or	r27, r31
    1500:	eb ad       	ldd	r30, Y+59	; 0x3b
    1502:	e9 0f       	add	r30, r25
    1504:	0c ab       	std	Y+52, r16	; 0x34
    1506:	1d ab       	std	Y+53, r17	; 0x35
    1508:	2e aa       	std	Y+54, r2	; 0x36
    150a:	3f aa       	std	Y+55, r3	; 0x37
    150c:	e8 ae       	std	Y+56, r14	; 0x38
    150e:	f9 ae       	std	Y+57, r15	; 0x39
    1510:	aa af       	std	Y+58, r26	; 0x3a
    1512:	eb 0f       	add	r30, r27
    1514:	eb af       	std	Y+59, r30	; 0x3b
    1516:	f1 e0       	ldi	r31, 0x01	; 1
    1518:	fa ab       	std	Y+50, r31	; 0x32
    151a:	11 e0       	ldi	r17, 0x01	; 1
    151c:	19 aa       	std	Y+49, r1	; 0x31
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <main+0x856>
    1520:	21 e0       	ldi	r18, 0x01	; 1
    1522:	2a ab       	std	Y+50, r18	; 0x32
		//==============================================================
		collided = 0;
		isActive = 0;
		for (y = 0; y < BlockGridSize[1]; y++)
		{
			for (x = 0; x < BlockGridSize[0]; x++)
    1524:	8b 85       	ldd	r24, Y+11	; 0x0b
    1526:	9c 85       	ldd	r25, Y+12	; 0x0c
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	9c 87       	std	Y+12, r25	; 0x0c
    152c:	8b 87       	std	Y+11, r24	; 0x0b
    152e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1530:	3c 85       	ldd	r19, Y+12	; 0x0c
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	49 85       	ldd	r20, Y+9	; 0x09
    1538:	5a 85       	ldd	r21, Y+10	; 0x0a
    153a:	28 17       	cp	r18, r24
    153c:	39 07       	cpc	r19, r25
    153e:	0c f4       	brge	.+2      	; 0x1542 <main+0x874>
    1540:	64 ce       	rjmp	.-824    	; 0x120a <main+0x53c>
		
		//Check if Ball is Coliding with Block
		//==============================================================
		collided = 0;
		isActive = 0;
		for (y = 0; y < BlockGridSize[1]; y++)
    1542:	4f 5f       	subi	r20, 0xFF	; 255
    1544:	5f 4f       	sbci	r21, 0xFF	; 255
    1546:	5a 87       	std	Y+10, r21	; 0x0a
    1548:	49 87       	std	Y+9, r20	; 0x09
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	29 85       	ldd	r18, Y+9	; 0x09
    1550:	3a 85       	ldd	r19, Y+10	; 0x0a
    1552:	28 17       	cp	r18, r24
    1554:	39 07       	cpc	r19, r25
    1556:	0c f4       	brge	.+2      	; 0x155a <main+0x88c>
    1558:	55 ce       	rjmp	.-854    	; 0x1204 <main+0x536>
		if (Frame % UpdateFrequency == 0)
		{
			Frame = 0;
			for (i = 0; i < BallData[3]; i++)
			{
				fore = BLACK; // Black
    155a:	10 92 52 01 	sts	0x0152, r1
    155e:	10 92 51 01 	sts	0x0151, r1
				glcd_draw_circle(BallLastRenderedPos[0], BallLastRenderedPos[1], BallData[2] - i);
    1562:	89 a1       	ldd	r24, Y+33	; 0x21
    1564:	6b a1       	ldd	r22, Y+35	; 0x23
    1566:	42 e0       	ldi	r20, 0x02	; 2
    1568:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <glcd_draw_circle>
				fore = WHITE; // White
    156c:	6f ef       	ldi	r22, 0xFF	; 255
    156e:	7f ef       	ldi	r23, 0xFF	; 255
    1570:	70 93 52 01 	sts	0x0152, r23
    1574:	60 93 51 01 	sts	0x0151, r22
				glcd_draw_circle(BallData[0], BallData[1], BallData[2] - i);
    1578:	88 2d       	mov	r24, r8
    157a:	6d a5       	ldd	r22, Y+45	; 0x2d
    157c:	42 e0       	ldi	r20, 0x02	; 2
    157e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <glcd_draw_circle>
		if (Frame % UpdateFrequency == 0)
		{
			Frame = 0;
			for (i = 0; i < BallData[3]; i++)
			{
				fore = BLACK; // Black
    1582:	10 92 52 01 	sts	0x0152, r1
    1586:	10 92 51 01 	sts	0x0151, r1
				glcd_draw_circle(BallLastRenderedPos[0], BallLastRenderedPos[1], BallData[2] - i);
    158a:	89 a1       	ldd	r24, Y+33	; 0x21
    158c:	6b a1       	ldd	r22, Y+35	; 0x23
    158e:	41 e0       	ldi	r20, 0x01	; 1
    1590:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <glcd_draw_circle>
				fore = WHITE; // White
    1594:	8f ef       	ldi	r24, 0xFF	; 255
    1596:	9f ef       	ldi	r25, 0xFF	; 255
    1598:	90 93 52 01 	sts	0x0152, r25
    159c:	80 93 51 01 	sts	0x0151, r24
				glcd_draw_circle(BallData[0], BallData[1], BallData[2] - i);
    15a0:	88 2d       	mov	r24, r8
    15a2:	6d a5       	ldd	r22, Y+45	; 0x2d
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <glcd_draw_circle>
			}
			BallLastRenderedPos[0] = BallData[0];
			BallLastRenderedPos[1] = BallData[1];
			
			fore = WHITE; // White
    15aa:	af ef       	ldi	r26, 0xFF	; 255
    15ac:	bf ef       	ldi	r27, 0xFF	; 255
    15ae:	b0 93 52 01 	sts	0x0152, r27
    15b2:	a0 93 51 01 	sts	0x0151, r26
			
			MoveTo(RectX,RectY);
    15b6:	b8 a9       	ldd	r27, Y+48	; 0x30
    15b8:	8b 2f       	mov	r24, r27
    15ba:	99 27       	eor	r25, r25
    15bc:	87 fd       	sbrc	r24, 7
    15be:	90 95       	com	r25
    15c0:	6a e0       	ldi	r22, 0x0A	; 10
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MoveTo>
			FillRect(rectWidth, rectHeight);
    15c8:	84 e1       	ldi	r24, 0x14	; 20
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	64 e0       	ldi	r22, 0x04	; 4
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <FillRect>
			
			MoveTo(0, 0);
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MoveTo>
			fore = RED;
    15e0:	ef e1       	ldi	r30, 0x1F	; 31
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	f0 93 52 01 	sts	0x0152, r31
    15e8:	e0 93 51 01 	sts	0x0151, r30
			sprintf(buffer, "Score: %d", Score);
    15ec:	2d b7       	in	r18, 0x3d	; 61
    15ee:	3e b7       	in	r19, 0x3e	; 62
    15f0:	2c 50       	subi	r18, 0x0C	; 12
    15f2:	30 40       	sbci	r19, 0x00	; 0
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	3e bf       	out	0x3e, r19	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	2d bf       	out	0x3d, r18	; 61
    15fe:	ed b7       	in	r30, 0x3d	; 61
    1600:	fe b7       	in	r31, 0x3e	; 62
    1602:	31 96       	adiw	r30, 0x01	; 1
    1604:	ad e0       	ldi	r26, 0x0D	; 13
    1606:	ea 2e       	mov	r14, r26
    1608:	f1 2c       	mov	r15, r1
    160a:	ec 0e       	add	r14, r28
    160c:	fd 1e       	adc	r15, r29
    160e:	ad b7       	in	r26, 0x3d	; 61
    1610:	be b7       	in	r27, 0x3e	; 62
    1612:	12 96       	adiw	r26, 0x02	; 2
    1614:	fc 92       	st	X, r15
    1616:	ee 92       	st	-X, r14
    1618:	11 97       	sbiw	r26, 0x01	; 1
    161a:	2e e0       	ldi	r18, 0x0E	; 14
    161c:	31 e0       	ldi	r19, 0x01	; 1
    161e:	33 83       	std	Z+3, r19	; 0x03
    1620:	22 83       	std	Z+2, r18	; 0x02
    1622:	3c a9       	ldd	r19, Y+52	; 0x34
    1624:	34 83       	std	Z+4, r19	; 0x04
    1626:	6d a9       	ldd	r22, Y+53	; 0x35
    1628:	65 83       	std	Z+5, r22	; 0x05
    162a:	7e a9       	ldd	r23, Y+54	; 0x36
    162c:	76 83       	std	Z+6, r23	; 0x06
    162e:	8f a9       	ldd	r24, Y+55	; 0x37
    1630:	87 83       	std	Z+7, r24	; 0x07
    1632:	98 ad       	ldd	r25, Y+56	; 0x38
    1634:	90 87       	std	Z+8, r25	; 0x08
    1636:	a9 ad       	ldd	r26, Y+57	; 0x39
    1638:	a1 87       	std	Z+9, r26	; 0x09
    163a:	ba ad       	ldd	r27, Y+58	; 0x3a
    163c:	b2 87       	std	Z+10, r27	; 0x0a
    163e:	eb ac       	ldd	r14, Y+59	; 0x3b
    1640:	e3 86       	std	Z+11, r14	; 0x0b
    1642:	0e 94 09 12 	call	0x2412	; 0x2412 <sprintf>
			PlotString(buffer);
    1646:	2d b7       	in	r18, 0x3d	; 61
    1648:	3e b7       	in	r19, 0x3e	; 62
    164a:	24 5f       	subi	r18, 0xF4	; 244
    164c:	3f 4f       	sbci	r19, 0xFF	; 255
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	3e bf       	out	0x3e, r19	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	2d bf       	out	0x3d, r18	; 61
    1658:	ce 01       	movw	r24, r28
    165a:	0d 96       	adiw	r24, 0x0d	; 13
    165c:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <PlotString>
			
			MoveTo(0, size - 10);
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	66 e7       	ldi	r22, 0x76	; 118
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MoveTo>
			if (minute < 10)
    166c:	80 91 5d 01 	lds	r24, 0x015D
    1670:	90 91 5e 01 	lds	r25, 0x015E
    1674:	8a 30       	cpi	r24, 0x0A	; 10
    1676:	91 05       	cpc	r25, r1
    1678:	a0 f4       	brcc	.+40     	; 0x16a2 <main+0x9d4>
			{
				sprintf(buffer, "Time: 0%d:", minute);
    167a:	00 d0       	rcall	.+0      	; 0x167c <main+0x9ae>
    167c:	00 d0       	rcall	.+0      	; 0x167e <main+0x9b0>
    167e:	00 d0       	rcall	.+0      	; 0x1680 <main+0x9b2>
    1680:	ed b7       	in	r30, 0x3d	; 61
    1682:	fe b7       	in	r31, 0x3e	; 62
    1684:	31 96       	adiw	r30, 0x01	; 1
    1686:	7d e0       	ldi	r23, 0x0D	; 13
    1688:	e7 2e       	mov	r14, r23
    168a:	f1 2c       	mov	r15, r1
    168c:	ec 0e       	add	r14, r28
    168e:	fd 1e       	adc	r15, r29
    1690:	ad b7       	in	r26, 0x3d	; 61
    1692:	be b7       	in	r27, 0x3e	; 62
    1694:	12 96       	adiw	r26, 0x02	; 2
    1696:	fc 92       	st	X, r15
    1698:	ee 92       	st	-X, r14
    169a:	11 97       	sbiw	r26, 0x01	; 1
    169c:	28 e1       	ldi	r18, 0x18	; 24
    169e:	31 e0       	ldi	r19, 0x01	; 1
    16a0:	13 c0       	rjmp	.+38     	; 0x16c8 <main+0x9fa>
				PlotString(buffer);
			}
			else
			{
				sprintf(buffer, "Time: %d:", minute);
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <main+0x9d6>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <main+0x9d8>
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <main+0x9da>
    16a8:	ed b7       	in	r30, 0x3d	; 61
    16aa:	fe b7       	in	r31, 0x3e	; 62
    16ac:	31 96       	adiw	r30, 0x01	; 1
    16ae:	6d e0       	ldi	r22, 0x0D	; 13
    16b0:	e6 2e       	mov	r14, r22
    16b2:	f1 2c       	mov	r15, r1
    16b4:	ec 0e       	add	r14, r28
    16b6:	fd 1e       	adc	r15, r29
    16b8:	ad b7       	in	r26, 0x3d	; 61
    16ba:	be b7       	in	r27, 0x3e	; 62
    16bc:	12 96       	adiw	r26, 0x02	; 2
    16be:	fc 92       	st	X, r15
    16c0:	ee 92       	st	-X, r14
    16c2:	11 97       	sbiw	r26, 0x01	; 1
    16c4:	23 e2       	ldi	r18, 0x23	; 35
    16c6:	31 e0       	ldi	r19, 0x01	; 1
    16c8:	33 83       	std	Z+3, r19	; 0x03
    16ca:	22 83       	std	Z+2, r18	; 0x02
    16cc:	95 83       	std	Z+5, r25	; 0x05
    16ce:	84 83       	std	Z+4, r24	; 0x04
    16d0:	0e 94 09 12 	call	0x2412	; 0x2412 <sprintf>
				PlotString(buffer);
    16d4:	6d b7       	in	r22, 0x3d	; 61
    16d6:	7e b7       	in	r23, 0x3e	; 62
    16d8:	6a 5f       	subi	r22, 0xFA	; 250
    16da:	7f 4f       	sbci	r23, 0xFF	; 255
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	7e bf       	out	0x3e, r23	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	6d bf       	out	0x3d, r22	; 61
    16e6:	c7 01       	movw	r24, r14
    16e8:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <PlotString>
			}
			
			if (second < 10)
    16ec:	80 91 5c 01 	lds	r24, 0x015C
    16f0:	8a 30       	cpi	r24, 0x0A	; 10
    16f2:	a0 f4       	brcc	.+40     	; 0x171c <main+0xa4e>
			{
				sprintf(buffer, "0%d:", second);
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <main+0xa28>
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <main+0xa2a>
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <main+0xa2c>
    16fa:	ed b7       	in	r30, 0x3d	; 61
    16fc:	fe b7       	in	r31, 0x3e	; 62
    16fe:	31 96       	adiw	r30, 0x01	; 1
    1700:	5d e0       	ldi	r21, 0x0D	; 13
    1702:	e5 2e       	mov	r14, r21
    1704:	f1 2c       	mov	r15, r1
    1706:	ec 0e       	add	r14, r28
    1708:	fd 1e       	adc	r15, r29
    170a:	ad b7       	in	r26, 0x3d	; 61
    170c:	be b7       	in	r27, 0x3e	; 62
    170e:	12 96       	adiw	r26, 0x02	; 2
    1710:	fc 92       	st	X, r15
    1712:	ee 92       	st	-X, r14
    1714:	11 97       	sbiw	r26, 0x01	; 1
    1716:	2d e2       	ldi	r18, 0x2D	; 45
    1718:	31 e0       	ldi	r19, 0x01	; 1
    171a:	13 c0       	rjmp	.+38     	; 0x1742 <main+0xa74>
				PlotString(buffer);
			}
			else
			{
				sprintf(buffer, "%d:", second);
    171c:	00 d0       	rcall	.+0      	; 0x171e <main+0xa50>
    171e:	00 d0       	rcall	.+0      	; 0x1720 <main+0xa52>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <main+0xa54>
    1722:	ed b7       	in	r30, 0x3d	; 61
    1724:	fe b7       	in	r31, 0x3e	; 62
    1726:	31 96       	adiw	r30, 0x01	; 1
    1728:	4d e0       	ldi	r20, 0x0D	; 13
    172a:	e4 2e       	mov	r14, r20
    172c:	f1 2c       	mov	r15, r1
    172e:	ec 0e       	add	r14, r28
    1730:	fd 1e       	adc	r15, r29
    1732:	ad b7       	in	r26, 0x3d	; 61
    1734:	be b7       	in	r27, 0x3e	; 62
    1736:	12 96       	adiw	r26, 0x02	; 2
    1738:	fc 92       	st	X, r15
    173a:	ee 92       	st	-X, r14
    173c:	11 97       	sbiw	r26, 0x01	; 1
    173e:	22 e3       	ldi	r18, 0x32	; 50
    1740:	31 e0       	ldi	r19, 0x01	; 1
    1742:	33 83       	std	Z+3, r19	; 0x03
    1744:	22 83       	std	Z+2, r18	; 0x02
    1746:	84 83       	std	Z+4, r24	; 0x04
    1748:	15 82       	std	Z+5, r1	; 0x05
    174a:	0e 94 09 12 	call	0x2412	; 0x2412 <sprintf>
				PlotString(buffer);
    174e:	6d b7       	in	r22, 0x3d	; 61
    1750:	7e b7       	in	r23, 0x3e	; 62
    1752:	6a 5f       	subi	r22, 0xFA	; 250
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	7e bf       	out	0x3e, r23	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	6d bf       	out	0x3d, r22	; 61
    1760:	c7 01       	movw	r24, r14
    1762:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <PlotString>
    1766:	ff 24       	eor	r15, r15
    1768:	08 e0       	ldi	r16, 0x08	; 8
    176a:	10 e0       	ldi	r17, 0x00	; 0
			}
			
			for (i = 0; i < StartLives; i++)
			{
				if (i < lives)
    176c:	7b a9       	ldd	r23, Y+51	; 0x33
    176e:	f7 16       	cp	r15, r23
    1770:	38 f4       	brcc	.+14     	; 0x1780 <main+0xab2>
				{
					fore = RED;
    1772:	8f e1       	ldi	r24, 0x1F	; 31
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	90 93 52 01 	sts	0x0152, r25
    177a:	80 93 51 01 	sts	0x0151, r24
    177e:	04 c0       	rjmp	.+8      	; 0x1788 <main+0xaba>
				}
				else
				{
					fore = BLACK;
    1780:	10 92 52 01 	sts	0x0152, r1
    1784:	10 92 51 01 	sts	0x0151, r1
				}
				MoveTo(size - 8, ((i * 8) + 8));
    1788:	88 e7       	ldi	r24, 0x78	; 120
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	b8 01       	movw	r22, r16
    178e:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <MoveTo>
				FillRect(7,7);
    1792:	87 e0       	ldi	r24, 0x07	; 7
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	67 e0       	ldi	r22, 0x07	; 7
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <FillRect>
			{
				sprintf(buffer, "%d:", second);
				PlotString(buffer);
			}
			
			for (i = 0; i < StartLives; i++)
    179e:	f3 94       	inc	r15
    17a0:	08 5f       	subi	r16, 0xF8	; 248
    17a2:	1f 4f       	sbci	r17, 0xFF	; 255
    17a4:	9a a2       	std	Y+34, r9	; 0x22
    17a6:	89 a2       	std	Y+33, r8	; 0x21
    17a8:	ad a5       	ldd	r26, Y+45	; 0x2d
    17aa:	be a5       	ldd	r27, Y+46	; 0x2e
    17ac:	bc a3       	std	Y+36, r27	; 0x24
    17ae:	ab a3       	std	Y+35, r26	; 0x23
    17b0:	b3 e0       	ldi	r27, 0x03	; 3
    17b2:	fb 16       	cp	r15, r27
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <main+0xaea>
    17b6:	6b cb       	rjmp	.-2346   	; 0xe8e <main+0x1c0>
    17b8:	d9 cf       	rjmp	.-78     	; 0x176c <main+0xa9e>

000017ba <Colour>:
  //8-bit data bus for 16-bit/pixel (RGB 5-6-5-bit input), 65K-Colors, 3AH= “05h”
  PINB = 1<<CS;                            // cs high
}

unsigned int Colour (int b, int g, int r) 
{
    17ba:	6c 7f       	andi	r22, 0xFC	; 252
    17bc:	70 70       	andi	r23, 0x00	; 0
    17be:	33 e0       	ldi	r19, 0x03	; 3
    17c0:	66 0f       	add	r22, r22
    17c2:	77 1f       	adc	r23, r23
    17c4:	3a 95       	dec	r19
    17c6:	e1 f7       	brne	.-8      	; 0x17c0 <Colour+0x6>
    17c8:	23 e0       	ldi	r18, 0x03	; 3
    17ca:	95 95       	asr	r25
    17cc:	87 95       	ror	r24
    17ce:	2a 95       	dec	r18
    17d0:	e1 f7       	brne	.-8      	; 0x17ca <Colour+0x10>
    17d2:	68 2b       	or	r22, r24
    17d4:	79 2b       	or	r23, r25
    17d6:	48 7f       	andi	r20, 0xF8	; 248
    17d8:	50 70       	andi	r21, 0x00	; 0
    17da:	54 2f       	mov	r21, r20
    17dc:	44 27       	eor	r20, r20
    17de:	64 2b       	or	r22, r20
    17e0:	75 2b       	or	r23, r21
  return (r & 0xf8)<<8 | (g & 0xfc)<<3 | b>>3;
  //return (r & 0xf8)<<8 | (g & 0xfc)<<3 | b>>3;//original 
}
    17e2:	cb 01       	movw	r24, r22
    17e4:	08 95       	ret

000017e6 <MoveTo>:

// Move current plot position to x,y
void MoveTo (int x, int y) 
{
  x_0 = x; y_0 = y;
    17e6:	90 93 7b 01 	sts	0x017B, r25
    17ea:	80 93 7a 01 	sts	0x017A, r24
    17ee:	70 93 7d 01 	sts	0x017D, r23
    17f2:	60 93 7c 01 	sts	0x017C, r22
}
    17f6:	08 95       	ret

000017f8 <Data>:
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
}
    17fe:	08 95       	ret

00001800 <Command4>:
    PINB = 1<<DC;                          // dc high again
}

// Send a command followed by four data bytes
void Command4 (uint8_t c, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4) 
{
    1800:	df 92       	push	r13
    1802:	ef 92       	push	r14
    1804:	ff 92       	push	r15
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	f6 2e       	mov	r15, r22
    180c:	e4 2e       	mov	r14, r20
    180e:	d2 2e       	mov	r13, r18
    PINB = (1<<DC);                          // dc low
    1810:	12 e0       	ldi	r17, 0x02	; 2
    1812:	13 b9       	out	0x03, r17	; 3
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
// Send a command followed by four data bytes
void Command4 (uint8_t c, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4) 
{
    PINB = (1<<DC);                          // dc low
    Data(c);
    PINB = 1<<DC;                          // dc high again
    181a:	13 b9       	out	0x03, r17	; 3
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
    181c:	8f 2d       	mov	r24, r15
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
{
    PINB = (1<<DC);                          // dc low
    Data(c);
    PINB = 1<<DC;                          // dc high again
    Data(d1); Data(d2); Data(d3); Data(d4);
}
    1824:	8e 2d       	mov	r24, r14
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
    182c:	8d 2d       	mov	r24, r13
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
    1834:	80 2f       	mov	r24, r16
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	df 90       	pop	r13
    1846:	08 95       	ret

00001848 <Command>:
	SPI_MasterTransmit(d);
}

// Send a command to the display
void Command (uint8_t c) 
{
    1848:	1f 93       	push	r17
    PINB = 1<<DC;                          // dc low
    184a:	12 e0       	ldi	r17, 0x02	; 2
    184c:	13 b9       	out	0x03, r17	; 3
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
// Send a command to the display
void Command (uint8_t c) 
{
    PINB = 1<<DC;                          // dc low
    Data(c);
    PINB = 1<<DC;                          // dc high again
    1854:	13 b9       	out	0x03, r17	; 3
}
    1856:	1f 91       	pop	r17
    1858:	08 95       	ret

0000185a <DisplayOn>:
  PINB = 1<<CS;                            // cs high
}

void DisplayOn (void) 
{
  PINB = 1<<CS;                            // cs low
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	83 b9       	out	0x03, r24	; 3
  Command(0x29);                           // Display on
    185e:	89 e2       	ldi	r24, 0x29	; 41
    1860:	0e 94 24 0c 	call	0x1848	; 0x1848 <Command>
    1864:	88 ee       	ldi	r24, 0xE8	; 232
    1866:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1868:	28 ec       	ldi	r18, 0xC8	; 200
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	f9 01       	movw	r30, r18
    186e:	31 97       	sbiw	r30, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <DisplayOn+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1872:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1874:	d9 f7       	brne	.-10     	; 0x186c <DisplayOn+0x12>
  _delay_ms(100);
  PINB = 1<<CS;                            // cs high
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	83 b9       	out	0x03, r24	; 3
}
    187a:	08 95       	ret

0000187c <PlotChar>:
  PINB = 1<<CS;                            // cs high
}

// Plot an ASCII character with bottom left corner at x,y
void PlotChar (char c) 
{
    187c:	4f 92       	push	r4
    187e:	5f 92       	push	r5
    1880:	6f 92       	push	r6
    1882:	7f 92       	push	r7
    1884:	9f 92       	push	r9
    1886:	af 92       	push	r10
    1888:	bf 92       	push	r11
    188a:	cf 92       	push	r12
    188c:	df 92       	push	r13
    188e:	ef 92       	push	r14
    1890:	ff 92       	push	r15
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	18 2f       	mov	r17, r24
  int colour;
  PINB = 1<<CS;                            // cs low
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	83 b9       	out	0x03, r24	; 3
  Command4(CASET, 0, yoff+y_0, 0, yoff+y_0+8*scale-1);
    18a0:	40 91 7c 01 	lds	r20, 0x017C
    18a4:	80 91 53 01 	lds	r24, 0x0153
    18a8:	90 91 54 01 	lds	r25, 0x0154
    18ac:	23 e0       	ldi	r18, 0x03	; 3
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	2a 95       	dec	r18
    18b4:	e1 f7       	brne	.-8      	; 0x18ae <PlotChar+0x32>
    18b6:	04 2f       	mov	r16, r20
    18b8:	08 0f       	add	r16, r24
    18ba:	8a e2       	ldi	r24, 0x2A	; 42
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	4f 5f       	subi	r20, 0xFF	; 255
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	0e 94 00 0c 	call	0x1800	; 0x1800 <Command4>
  Command4(RASET, 0, xoff+x_0, 0, xoff+x_0+6*scale-1);
    18c6:	40 91 7a 01 	lds	r20, 0x017A
    18ca:	4f 5f       	subi	r20, 0xFF	; 255
    18cc:	20 91 53 01 	lds	r18, 0x0153
    18d0:	30 91 54 01 	lds	r19, 0x0154
    18d4:	c9 01       	movw	r24, r18
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	82 0f       	add	r24, r18
    18dc:	93 1f       	adc	r25, r19
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	04 2f       	mov	r16, r20
    18e4:	08 0f       	add	r16, r24
    18e6:	8b e2       	ldi	r24, 0x2B	; 43
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	4f 5f       	subi	r20, 0xFF	; 255
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	0e 94 00 0c 	call	0x1800	; 0x1800 <Command4>
  Command(RAMWR);
    18f2:	8c e2       	ldi	r24, 0x2C	; 44
    18f4:	0e 94 24 0c 	call	0x1848	; 0x1848 <Command>
  for (int xx=0; xx<6; xx++) 
  {
    int bits = pgm_read_byte(&CharMap[c-32][xx]);
    18f8:	86 e0       	ldi	r24, 0x06	; 6
    18fa:	18 9f       	mul	r17, r24
    18fc:	c0 01       	movw	r24, r0
    18fe:	11 24       	eor	r1, r1
    1900:	a8 ea       	ldi	r26, 0xA8	; 168
    1902:	ca 2e       	mov	r12, r26
    1904:	af ef       	ldi	r26, 0xFF	; 255
    1906:	da 2e       	mov	r13, r26
    1908:	c8 0e       	add	r12, r24
    190a:	d9 1e       	adc	r13, r25
  int colour;
  PINB = 1<<CS;                            // cs low
  Command4(CASET, 0, yoff+y_0, 0, yoff+y_0+8*scale-1);
  Command4(RASET, 0, xoff+x_0, 0, xoff+x_0+6*scale-1);
  Command(RAMWR);
  for (int xx=0; xx<6; xx++) 
    190c:	fe ea       	ldi	r31, 0xAE	; 174
    190e:	4f 2e       	mov	r4, r31
    1910:	ff ef       	ldi	r31, 0xFF	; 255
    1912:	5f 2e       	mov	r5, r31
    1914:	48 0e       	add	r4, r24
    1916:	59 1e       	adc	r5, r25
  {
    int bits = pgm_read_byte(&CharMap[c-32][xx]);
    1918:	f6 01       	movw	r30, r12
    191a:	84 91       	lpm	r24, Z+
    191c:	68 2e       	mov	r6, r24
    191e:	77 24       	eor	r7, r7
    1920:	aa 24       	eor	r10, r10
    1922:	bb 24       	eor	r11, r11
    1924:	38 c0       	rjmp	.+112    	; 0x1996 <PlotChar+0x11a>
    for (int xr=0; xr<scale; xr++) 
    1926:	e7 e0       	ldi	r30, 0x07	; 7
    1928:	ee 2e       	mov	r14, r30
    192a:	f1 2c       	mov	r15, r1
    {
      for (int yy=0; yy<8; yy++) 
      {
        if (bits>>(7-yy) & 1) colour = fore; else colour = back;
    192c:	c3 01       	movw	r24, r6
    192e:	0e 2c       	mov	r0, r14
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <PlotChar+0xba>
    1932:	95 95       	asr	r25
    1934:	87 95       	ror	r24
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <PlotChar+0xb6>
    193a:	80 ff       	sbrs	r24, 0
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <PlotChar+0xcc>
    193e:	00 91 51 01 	lds	r16, 0x0151
    1942:	10 91 52 01 	lds	r17, 0x0152
    1946:	04 c0       	rjmp	.+8      	; 0x1950 <PlotChar+0xd4>
    1948:	00 91 5f 01 	lds	r16, 0x015F
    194c:	10 91 60 01 	lds	r17, 0x0160
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
    1950:	81 2f       	mov	r24, r17
    1952:	99 27       	eor	r25, r25
    1954:	87 fd       	sbrc	r24, 7
    1956:	9a 95       	dec	r25
    1958:	98 2e       	mov	r9, r24
    195a:	c0 e0       	ldi	r28, 0x00	; 0
    195c:	d0 e0       	ldi	r29, 0x00	; 0
    195e:	09 c0       	rjmp	.+18     	; 0x1972 <PlotChar+0xf6>
    for (int xr=0; xr<scale; xr++) 
    {
      for (int yy=0; yy<8; yy++) 
      {
        if (bits>>(7-yy) & 1) colour = fore; else colour = back;
        for (int yr=0; yr<scale; yr++) 
    1960:	89 2d       	mov	r24, r9
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
    1968:	80 2f       	mov	r24, r16
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
    for (int xr=0; xr<scale; xr++) 
    {
      for (int yy=0; yy<8; yy++) 
      {
        if (bits>>(7-yy) & 1) colour = fore; else colour = back;
        for (int yr=0; yr<scale; yr++) 
    1970:	21 96       	adiw	r28, 0x01	; 1
    1972:	80 91 53 01 	lds	r24, 0x0153
    1976:	90 91 54 01 	lds	r25, 0x0154
    197a:	c8 17       	cp	r28, r24
    197c:	d9 07       	cpc	r29, r25
    197e:	84 f3       	brlt	.-32     	; 0x1960 <PlotChar+0xe4>
    1980:	08 94       	sec
    1982:	e1 08       	sbc	r14, r1
    1984:	f1 08       	sbc	r15, r1
  for (int xx=0; xx<6; xx++) 
  {
    int bits = pgm_read_byte(&CharMap[c-32][xx]);
    for (int xr=0; xr<scale; xr++) 
    {
      for (int yy=0; yy<8; yy++) 
    1986:	ff ef       	ldi	r31, 0xFF	; 255
    1988:	ef 16       	cp	r14, r31
    198a:	ff ef       	ldi	r31, 0xFF	; 255
    198c:	ff 06       	cpc	r15, r31
    198e:	71 f6       	brne	.-100    	; 0x192c <PlotChar+0xb0>
  Command4(RASET, 0, xoff+x_0, 0, xoff+x_0+6*scale-1);
  Command(RAMWR);
  for (int xx=0; xx<6; xx++) 
  {
    int bits = pgm_read_byte(&CharMap[c-32][xx]);
    for (int xr=0; xr<scale; xr++) 
    1990:	08 94       	sec
    1992:	a1 1c       	adc	r10, r1
    1994:	b1 1c       	adc	r11, r1
    1996:	40 91 53 01 	lds	r20, 0x0153
    199a:	50 91 54 01 	lds	r21, 0x0154
    199e:	a4 16       	cp	r10, r20
    19a0:	b5 06       	cpc	r11, r21
    19a2:	0c f2       	brlt	.-126    	; 0x1926 <PlotChar+0xaa>
    19a4:	08 94       	sec
    19a6:	c1 1c       	adc	r12, r1
    19a8:	d1 1c       	adc	r13, r1
  int colour;
  PINB = 1<<CS;                            // cs low
  Command4(CASET, 0, yoff+y_0, 0, yoff+y_0+8*scale-1);
  Command4(RASET, 0, xoff+x_0, 0, xoff+x_0+6*scale-1);
  Command(RAMWR);
  for (int xx=0; xx<6; xx++) 
    19aa:	c4 14       	cp	r12, r4
    19ac:	d5 04       	cpc	r13, r5
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <PlotChar+0x136>
    19b0:	b3 cf       	rjmp	.-154    	; 0x1918 <PlotChar+0x9c>
          Data(colour>>8); Data(colour & 0xFF);
        }
      }
    }
  }
  PINB = 1<<CS;                            // cs high
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	83 b9       	out	0x03, r24	; 3
  x_0 = x_0 + 6*scale;
    19b6:	9a 01       	movw	r18, r20
    19b8:	22 0f       	add	r18, r18
    19ba:	33 1f       	adc	r19, r19
    19bc:	24 0f       	add	r18, r20
    19be:	35 1f       	adc	r19, r21
    19c0:	22 0f       	add	r18, r18
    19c2:	33 1f       	adc	r19, r19
    19c4:	80 91 7a 01 	lds	r24, 0x017A
    19c8:	90 91 7b 01 	lds	r25, 0x017B
    19cc:	82 0f       	add	r24, r18
    19ce:	93 1f       	adc	r25, r19
    19d0:	90 93 7b 01 	sts	0x017B, r25
    19d4:	80 93 7a 01 	sts	0x017A, r24
}
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	df 90       	pop	r13
    19e6:	cf 90       	pop	r12
    19e8:	bf 90       	pop	r11
    19ea:	af 90       	pop	r10
    19ec:	9f 90       	pop	r9
    19ee:	7f 90       	pop	r7
    19f0:	6f 90       	pop	r6
    19f2:	5f 90       	pop	r5
    19f4:	4f 90       	pop	r4
    19f6:	08 95       	ret

000019f8 <PlotString>:
  DisplayOn();
  MoveTo(0,0);
}

void PlotString(const char str[]) 
{
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	ec 01       	movw	r28, r24
    19fe:	03 c0       	rjmp	.+6      	; 0x1a06 <PlotString+0xe>
	while (*str) PlotChar(*str++);
    1a00:	21 96       	adiw	r28, 0x01	; 1
    1a02:	0e 94 3e 0c 	call	0x187c	; 0x187c <PlotChar>
    1a06:	88 81       	ld	r24, Y
    1a08:	88 23       	and	r24, r24
    1a0a:	d1 f7       	brne	.-12     	; 0x1a00 <PlotString+0x8>
}
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <PlotText>:
  x_0 = x_0 + 6*scale;
}

// Plot text starting at the current plot position
void PlotText(PGM_P p) 
{
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	ec 01       	movw	r28, r24
    1a18:	fe 01       	movw	r30, r28
  while (1) {
    char c = pgm_read_byte(p++);
    1a1a:	21 96       	adiw	r28, 0x01	; 1
    1a1c:	84 91       	lpm	r24, Z+
    if (c == 0) return;
    1a1e:	88 23       	and	r24, r24
    1a20:	19 f0       	breq	.+6      	; 0x1a28 <PlotText+0x16>
    PlotChar(c);
    1a22:	0e 94 3e 0c 	call	0x187c	; 0x187c <PlotChar>
    1a26:	f8 cf       	rjmp	.-16     	; 0x1a18 <PlotText+0x6>
  }
}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	08 95       	ret

00001a2e <FillRect>:
    if (e2 < dx) { err = err + dx; y_0 = y_0 + sy; }
  }
}

void FillRect (int w, int h) 
{
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	7c 01       	movw	r14, r24
    1a40:	6b 01       	movw	r12, r22
  PINB = 1<<CS;                            // cs low
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	83 b9       	out	0x03, r24	; 3
  Command4(CASET, 0, y_0+yoff, 0, y_0+yoff+h-1);
    1a46:	40 91 7c 01 	lds	r20, 0x017C
    1a4a:	04 2f       	mov	r16, r20
    1a4c:	06 0f       	add	r16, r22
    1a4e:	8a e2       	ldi	r24, 0x2A	; 42
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	4f 5f       	subi	r20, 0xFF	; 255
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	0e 94 00 0c 	call	0x1800	; 0x1800 <Command4>
  Command4(RASET, 0, x_0+xoff, 0, x_0+xoff+w-1);
    1a5a:	40 91 7a 01 	lds	r20, 0x017A
    1a5e:	4f 5f       	subi	r20, 0xFF	; 255
    1a60:	04 2f       	mov	r16, r20
    1a62:	0e 0d       	add	r16, r14
    1a64:	8b e2       	ldi	r24, 0x2B	; 43
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	4f 5f       	subi	r20, 0xFF	; 255
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	0e 94 00 0c 	call	0x1800	; 0x1800 <Command4>
  Command(RAMWR);
    1a70:	8c e2       	ldi	r24, 0x2C	; 44
    1a72:	0e 94 24 0c 	call	0x1848	; 0x1848 <Command>
  for (int p=0; p<w*h*2; p++) {
    1a76:	ee 0c       	add	r14, r14
    1a78:	ff 1c       	adc	r15, r15
    1a7a:	ec 9c       	mul	r14, r12
    1a7c:	80 01       	movw	r16, r0
    1a7e:	ed 9c       	mul	r14, r13
    1a80:	10 0d       	add	r17, r0
    1a82:	fc 9c       	mul	r15, r12
    1a84:	10 0d       	add	r17, r0
    1a86:	11 24       	eor	r1, r1
    1a88:	c0 e0       	ldi	r28, 0x00	; 0
    1a8a:	d0 e0       	ldi	r29, 0x00	; 0
    1a8c:	0b c0       	rjmp	.+22     	; 0x1aa4 <FillRect+0x76>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
    1a8e:	80 91 52 01 	lds	r24, 0x0152
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
{
  PINB = 1<<CS;                            // cs low
  Command4(CASET, 0, y_0+yoff, 0, y_0+yoff+h-1);
  Command4(RASET, 0, x_0+xoff, 0, x_0+xoff+w-1);
  Command(RAMWR);
  for (int p=0; p<w*h*2; p++) {
    1a98:	80 91 51 01 	lds	r24, 0x0151
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
    1aa2:	21 96       	adiw	r28, 0x01	; 1
    1aa4:	c0 17       	cp	r28, r16
    1aa6:	d1 07       	cpc	r29, r17
    1aa8:	94 f3       	brlt	.-28     	; 0x1a8e <FillRect+0x60>
    Data(fore>>8); Data(fore & 0xff);
  }
  PINB = 1<<CS;                            // cs high
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	83 b9       	out	0x03, r24	; 3
}
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	08 95       	ret

00001ac0 <PlotPoint>:
  x_0 = x; y_0 = y;
}

// Plot point at x,y
void PlotPoint (int x, int y) 
{
    1ac0:	ff 92       	push	r15
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	18 2f       	mov	r17, r24
    1ac8:	06 2f       	mov	r16, r22
  PINB = 1<<CS;                            // cs low
    1aca:	ff 24       	eor	r15, r15
    1acc:	f3 94       	inc	r15
    1ace:	f3 b8       	out	0x03, r15	; 3
  Command4(CASET, 0, yoff+y, 0, yoff+y);
    1ad0:	0f 5f       	subi	r16, 0xFF	; 255
    1ad2:	8a e2       	ldi	r24, 0x2A	; 42
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	40 2f       	mov	r20, r16
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	0e 94 00 0c 	call	0x1800	; 0x1800 <Command4>
  Command4(RASET, 0, xoff+x, 0, xoff+x);
    1ade:	1e 5f       	subi	r17, 0xFE	; 254
    1ae0:	8b e2       	ldi	r24, 0x2B	; 43
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	41 2f       	mov	r20, r17
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	01 2f       	mov	r16, r17
    1aea:	0e 94 00 0c 	call	0x1800	; 0x1800 <Command4>
  Command(RAMWR); Data(fore>>8); Data(fore & 0xff);
    1aee:	8c e2       	ldi	r24, 0x2C	; 44
    1af0:	0e 94 24 0c 	call	0x1848	; 0x1848 <Command>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
    1af4:	80 91 52 01 	lds	r24, 0x0152
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
{
  PINB = 1<<CS;                            // cs low
  Command4(CASET, 0, yoff+y, 0, yoff+y);
  Command4(RASET, 0, xoff+x, 0, xoff+x);
  Command(RAMWR); Data(fore>>8); Data(fore & 0xff);
  PINB = 1<<CS;                            // cs high
    1afe:	80 91 51 01 	lds	r24, 0x0151
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
    1b08:	f3 b8       	out	0x03, r15	; 3
}
    1b0a:	1f 91       	pop	r17
    1b0c:	0f 91       	pop	r16
    1b0e:	ff 90       	pop	r15
    1b10:	08 95       	ret

00001b12 <glcd_draw_circle>:
}



void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r)
{                  
    1b12:	2f 92       	push	r2
    1b14:	3f 92       	push	r3
    1b16:	4f 92       	push	r4
    1b18:	5f 92       	push	r5
    1b1a:	6f 92       	push	r6
    1b1c:	7f 92       	push	r7
    1b1e:	8f 92       	push	r8
    1b20:	9f 92       	push	r9
    1b22:	af 92       	push	r10
    1b24:	bf 92       	push	r11
    1b26:	cf 92       	push	r12
    1b28:	df 92       	push	r13
    1b2a:	ef 92       	push	r14
    1b2c:	ff 92       	push	r15
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	2a 97       	sbiw	r28, 0x0a	; 10
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
          int8_t f = 1 - r;
    1b46:	55 24       	eor	r5, r5
    1b48:	53 94       	inc	r5
    1b4a:	54 1a       	sub	r5, r20
          int8_t ddF_x = 1;
          int8_t ddF_y = -2 * r;
    1b4c:	04 2f       	mov	r16, r20
    1b4e:	10 e0       	ldi	r17, 0x00	; 0
    1b50:	98 01       	movw	r18, r16
    1b52:	22 0f       	add	r18, r18
    1b54:	33 1f       	adc	r19, r19
    1b56:	22 2e       	mov	r2, r18
    1b58:	21 94       	neg	r2
          int8_t x = 0;
          int8_t y = r;
    1b5a:	34 2e       	mov	r3, r20
         
         //  glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
           
         PlotPoint(x0, y0+r);
    1b5c:	68 2e       	mov	r6, r24
    1b5e:	77 24       	eor	r7, r7
    1b60:	86 2e       	mov	r8, r22
    1b62:	99 24       	eor	r9, r9
    1b64:	b8 01       	movw	r22, r16
    1b66:	68 0d       	add	r22, r8
    1b68:	79 1d       	adc	r23, r9
    1b6a:	c3 01       	movw	r24, r6
    1b6c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <PlotPoint>
          PlotPoint(x0, y0-r);
    1b70:	b4 01       	movw	r22, r8
    1b72:	60 1b       	sub	r22, r16
    1b74:	71 0b       	sbc	r23, r17
    1b76:	c3 01       	movw	r24, r6
    1b78:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <PlotPoint>
           PlotPoint(x0+r, y0);
    1b7c:	c8 01       	movw	r24, r16
    1b7e:	86 0d       	add	r24, r6
    1b80:	97 1d       	adc	r25, r7
    1b82:	b4 01       	movw	r22, r8
    1b84:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <PlotPoint>
          PlotPoint(x0-r, y0);
    1b88:	c3 01       	movw	r24, r6
    1b8a:	80 1b       	sub	r24, r16
    1b8c:	91 0b       	sbc	r25, r17
    1b8e:	b4 01       	movw	r22, r8
    1b90:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <PlotPoint>
    1b94:	1a 86       	std	Y+10, r1	; 0x0a
    1b96:	19 86       	std	Y+9, r1	; 0x09
    1b98:	43 e0       	ldi	r20, 0x03	; 3
    1b9a:	44 2e       	mov	r4, r20
}



void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r)
{                  
    1b9c:	c3 01       	movw	r24, r6
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	9a 83       	std	Y+2, r25	; 0x02
    1ba2:	89 83       	std	Y+1, r24	; 0x01
                   }
                   x++;
                   ddF_x += 2;
                   f += ddF_x;
                   
                   PlotPoint(x0 + x, y0 + y);
    1ba4:	f3 01       	movw	r30, r6
    1ba6:	31 97       	sbiw	r30, 0x01	; 1
    1ba8:	fc 83       	std	Y+4, r31	; 0x04
    1baa:	eb 83       	std	Y+3, r30	; 0x03
}



void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r)
{                  
    1bac:	c4 01       	movw	r24, r8
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	9e 83       	std	Y+6, r25	; 0x06
    1bb2:	8d 83       	std	Y+5, r24	; 0x05
                   PlotPoint(x0 - x, y0 + y);
                   PlotPoint(x0 + x, y0 - y);
                   PlotPoint(x0 - x, y0 - y);
                   
                   PlotPoint(x0 + y, y0 + x);
                   PlotPoint(x0 - y, y0 + x);
    1bb4:	f4 01       	movw	r30, r8
    1bb6:	31 97       	sbiw	r30, 0x01	; 1
    1bb8:	f8 87       	std	Y+8, r31	; 0x08
    1bba:	ef 83       	std	Y+7, r30	; 0x07
    1bbc:	57 c0       	rjmp	.+174    	; 0x1c6c <glcd_draw_circle+0x15a>
          PlotPoint(x0, y0-r);
           PlotPoint(x0+r, y0);
          PlotPoint(x0-r, y0);
          
           while (x<y) {
                   if (f >= 0) {
    1bbe:	57 fc       	sbrc	r5, 7
    1bc0:	04 c0       	rjmp	.+8      	; 0x1bca <glcd_draw_circle+0xb8>
                           y--;
    1bc2:	3a 94       	dec	r3
                           ddF_y += 2;
    1bc4:	f2 e0       	ldi	r31, 0x02	; 2
    1bc6:	2f 0e       	add	r2, r31
                           f += ddF_y;
    1bc8:	52 0c       	add	r5, r2
                   }
                   x++;
                   ddF_x += 2;
                   f += ddF_x;
    1bca:	54 0c       	add	r5, r4
}



void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r)
{                  
    1bcc:	a9 80       	ldd	r10, Y+1	; 0x01
    1bce:	ba 80       	ldd	r11, Y+2	; 0x02
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd4:	a8 0e       	add	r10, r24
    1bd6:	b9 1e       	adc	r11, r25
                   }
                   x++;
                   ddF_x += 2;
                   f += ddF_x;
                   
                   PlotPoint(x0 + x, y0 + y);
    1bd8:	e3 2c       	mov	r14, r3
    1bda:	ff 24       	eor	r15, r15
    1bdc:	e7 fc       	sbrc	r14, 7
    1bde:	f0 94       	com	r15
    1be0:	87 01       	movw	r16, r14
    1be2:	08 0d       	add	r16, r8
    1be4:	19 1d       	adc	r17, r9
    1be6:	c5 01       	movw	r24, r10
    1be8:	b8 01       	movw	r22, r16
    1bea:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <PlotPoint>
    1bee:	cb 80       	ldd	r12, Y+3	; 0x03
    1bf0:	dc 80       	ldd	r13, Y+4	; 0x04
    1bf2:	e9 85       	ldd	r30, Y+9	; 0x09
    1bf4:	fa 85       	ldd	r31, Y+10	; 0x0a
    1bf6:	ce 1a       	sub	r12, r30
    1bf8:	df 0a       	sbc	r13, r31
                   PlotPoint(x0 - x, y0 + y);
    1bfa:	c6 01       	movw	r24, r12
    1bfc:	b8 01       	movw	r22, r16
    1bfe:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <PlotPoint>
                   PlotPoint(x0 + x, y0 - y);
    1c02:	84 01       	movw	r16, r8
    1c04:	0e 19       	sub	r16, r14
    1c06:	1f 09       	sbc	r17, r15
    1c08:	c5 01       	movw	r24, r10
    1c0a:	b8 01       	movw	r22, r16
    1c0c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <PlotPoint>
                   PlotPoint(x0 - x, y0 - y);
    1c10:	c6 01       	movw	r24, r12
    1c12:	b8 01       	movw	r22, r16
    1c14:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <PlotPoint>
                   
                   PlotPoint(x0 + y, y0 + x);
    1c18:	67 01       	movw	r12, r14
    1c1a:	c6 0c       	add	r12, r6
    1c1c:	d7 1c       	adc	r13, r7
}



void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r)
{                  
    1c1e:	0d 81       	ldd	r16, Y+5	; 0x05
    1c20:	1e 81       	ldd	r17, Y+6	; 0x06
    1c22:	89 85       	ldd	r24, Y+9	; 0x09
    1c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c26:	08 0f       	add	r16, r24
    1c28:	19 1f       	adc	r17, r25
                   PlotPoint(x0 + x, y0 + y);
                   PlotPoint(x0 - x, y0 + y);
                   PlotPoint(x0 + x, y0 - y);
                   PlotPoint(x0 - x, y0 - y);
                   
                   PlotPoint(x0 + y, y0 + x);
    1c2a:	c6 01       	movw	r24, r12
    1c2c:	b8 01       	movw	r22, r16
    1c2e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <PlotPoint>
                   PlotPoint(x0 - y, y0 + x);
    1c32:	f3 01       	movw	r30, r6
    1c34:	ee 19       	sub	r30, r14
    1c36:	ff 09       	sbc	r31, r15
    1c38:	7f 01       	movw	r14, r30
    1c3a:	cf 01       	movw	r24, r30
    1c3c:	b8 01       	movw	r22, r16
    1c3e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <PlotPoint>
    1c42:	0f 81       	ldd	r16, Y+7	; 0x07
    1c44:	18 85       	ldd	r17, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	08 1b       	sub	r16, r24
    1c4c:	19 0b       	sbc	r17, r25
                   PlotPoint(x0 + y, y0 - x);
    1c4e:	c6 01       	movw	r24, r12
    1c50:	b8 01       	movw	r22, r16
    1c52:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <PlotPoint>
                   PlotPoint(x0 - y, y0 - x);
    1c56:	c7 01       	movw	r24, r14
    1c58:	b8 01       	movw	r22, r16
    1c5a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <PlotPoint>
    1c5e:	e9 85       	ldd	r30, Y+9	; 0x09
    1c60:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c62:	31 96       	adiw	r30, 0x01	; 1
    1c64:	fa 87       	std	Y+10, r31	; 0x0a
    1c66:	e9 87       	std	Y+9, r30	; 0x09
    1c68:	f2 e0       	ldi	r31, 0x02	; 2
    1c6a:	4f 0e       	add	r4, r31
         PlotPoint(x0, y0+r);
          PlotPoint(x0, y0-r);
           PlotPoint(x0+r, y0);
          PlotPoint(x0-r, y0);
          
           while (x<y) {
    1c6c:	89 85       	ldd	r24, Y+9	; 0x09
    1c6e:	83 15       	cp	r24, r3
    1c70:	0c f4       	brge	.+2      	; 0x1c74 <glcd_draw_circle+0x162>
    1c72:	a5 cf       	rjmp	.-182    	; 0x1bbe <glcd_draw_circle+0xac>
                   PlotPoint(x0 - y, y0 + x);
                   PlotPoint(x0 + y, y0 - x);
                   PlotPoint(x0 - y, y0 - x);
                   
           }
   }//end of draw circle
    1c74:	2a 96       	adiw	r28, 0x0a	; 10
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	ff 90       	pop	r15
    1c8a:	ef 90       	pop	r14
    1c8c:	df 90       	pop	r13
    1c8e:	cf 90       	pop	r12
    1c90:	bf 90       	pop	r11
    1c92:	af 90       	pop	r10
    1c94:	9f 90       	pop	r9
    1c96:	8f 90       	pop	r8
    1c98:	7f 90       	pop	r7
    1c9a:	6f 90       	pop	r6
    1c9c:	5f 90       	pop	r5
    1c9e:	4f 90       	pop	r4
    1ca0:	3f 90       	pop	r3
    1ca2:	2f 90       	pop	r2
    1ca4:	08 95       	ret

00001ca6 <DrawTo>:
  PINB = 1<<CS;                            // cs high
}

// Draw a line to x,y
void DrawTo (int x, int y) 
{
    1ca6:	4f 92       	push	r4
    1ca8:	5f 92       	push	r5
    1caa:	6f 92       	push	r6
    1cac:	7f 92       	push	r7
    1cae:	8f 92       	push	r8
    1cb0:	9f 92       	push	r9
    1cb2:	af 92       	push	r10
    1cb4:	bf 92       	push	r11
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	5c 01       	movw	r10, r24
    1cc8:	6b 01       	movw	r12, r22
  int sx, sy, e2, err;
  int dx = abs(x - x_0);
    1cca:	20 91 7a 01 	lds	r18, 0x017A
    1cce:	30 91 7b 01 	lds	r19, 0x017B
    1cd2:	7c 01       	movw	r14, r24
    1cd4:	e2 1a       	sub	r14, r18
    1cd6:	f3 0a       	sbc	r15, r19
    1cd8:	f7 fe       	sbrs	r15, 7
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <DrawTo+0x3e>
    1cdc:	f0 94       	com	r15
    1cde:	e1 94       	neg	r14
    1ce0:	f1 08       	sbc	r15, r1
    1ce2:	f3 94       	inc	r15
  int dy = abs(y - y_0);
    1ce4:	80 91 7c 01 	lds	r24, 0x017C
    1ce8:	90 91 7d 01 	lds	r25, 0x017D
    1cec:	86 01       	movw	r16, r12
    1cee:	08 1b       	sub	r16, r24
    1cf0:	19 0b       	sbc	r17, r25
    1cf2:	17 ff       	sbrs	r17, 7
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <DrawTo+0x56>
    1cf6:	10 95       	com	r17
    1cf8:	01 95       	neg	r16
    1cfa:	1f 4f       	sbci	r17, 0xFF	; 255
  if (x_0 < x) sx = 1; else sx = -1;
    1cfc:	2a 15       	cp	r18, r10
    1cfe:	3b 05       	cpc	r19, r11
    1d00:	24 f0       	brlt	.+8      	; 0x1d0a <DrawTo+0x64>
    1d02:	66 24       	eor	r6, r6
    1d04:	6a 94       	dec	r6
    1d06:	76 2c       	mov	r7, r6
    1d08:	03 c0       	rjmp	.+6      	; 0x1d10 <DrawTo+0x6a>
    1d0a:	e1 e0       	ldi	r30, 0x01	; 1
    1d0c:	6e 2e       	mov	r6, r30
    1d0e:	71 2c       	mov	r7, r1
  if (y_0 < y) sy = 1; else sy = -1;
    1d10:	8c 15       	cp	r24, r12
    1d12:	9d 05       	cpc	r25, r13
    1d14:	24 f0       	brlt	.+8      	; 0x1d1e <DrawTo+0x78>
    1d16:	88 24       	eor	r8, r8
    1d18:	8a 94       	dec	r8
    1d1a:	98 2c       	mov	r9, r8
    1d1c:	03 c0       	rjmp	.+6      	; 0x1d24 <DrawTo+0x7e>
    1d1e:	71 e0       	ldi	r23, 0x01	; 1
    1d20:	87 2e       	mov	r8, r23
    1d22:	91 2c       	mov	r9, r1
  err = dx - dy;
    1d24:	e7 01       	movw	r28, r14
    1d26:	c0 1b       	sub	r28, r16
    1d28:	d1 0b       	sbc	r29, r17
  for (;;) {
    PlotPoint(x_0, y_0);
    if (x_0==x && y_0==y) return;
    e2 = err<<1;
    if (e2 > -dy) { err = err - dy; x_0 = x_0 + sx; }
    1d2a:	44 24       	eor	r4, r4
    1d2c:	55 24       	eor	r5, r5
    1d2e:	40 1a       	sub	r4, r16
    1d30:	51 0a       	sbc	r5, r17
  int dy = abs(y - y_0);
  if (x_0 < x) sx = 1; else sx = -1;
  if (y_0 < y) sy = 1; else sy = -1;
  err = dx - dy;
  for (;;) {
    PlotPoint(x_0, y_0);
    1d32:	60 91 7c 01 	lds	r22, 0x017C
    1d36:	70 91 7d 01 	lds	r23, 0x017D
    1d3a:	80 91 7a 01 	lds	r24, 0x017A
    1d3e:	90 91 7b 01 	lds	r25, 0x017B
    1d42:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <PlotPoint>
    if (x_0==x && y_0==y) return;
    1d46:	20 91 7a 01 	lds	r18, 0x017A
    1d4a:	30 91 7b 01 	lds	r19, 0x017B
    1d4e:	2a 15       	cp	r18, r10
    1d50:	3b 05       	cpc	r19, r11
    1d52:	39 f4       	brne	.+14     	; 0x1d62 <DrawTo+0xbc>
    1d54:	80 91 7c 01 	lds	r24, 0x017C
    1d58:	90 91 7d 01 	lds	r25, 0x017D
    1d5c:	8c 15       	cp	r24, r12
    1d5e:	9d 05       	cpc	r25, r13
    1d60:	f1 f0       	breq	.+60     	; 0x1d9e <DrawTo+0xf8>
    e2 = err<<1;
    1d62:	ce 01       	movw	r24, r28
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    if (e2 > -dy) { err = err - dy; x_0 = x_0 + sx; }
    1d68:	48 16       	cp	r4, r24
    1d6a:	59 06       	cpc	r5, r25
    1d6c:	44 f4       	brge	.+16     	; 0x1d7e <DrawTo+0xd8>
    1d6e:	c0 1b       	sub	r28, r16
    1d70:	d1 0b       	sbc	r29, r17
    1d72:	26 0d       	add	r18, r6
    1d74:	37 1d       	adc	r19, r7
    1d76:	30 93 7b 01 	sts	0x017B, r19
    1d7a:	20 93 7a 01 	sts	0x017A, r18
    if (e2 < dx) { err = err + dx; y_0 = y_0 + sy; }
    1d7e:	8e 15       	cp	r24, r14
    1d80:	9f 05       	cpc	r25, r15
    1d82:	bc f6       	brge	.-82     	; 0x1d32 <DrawTo+0x8c>
    1d84:	ce 0d       	add	r28, r14
    1d86:	df 1d       	adc	r29, r15
    1d88:	80 91 7c 01 	lds	r24, 0x017C
    1d8c:	90 91 7d 01 	lds	r25, 0x017D
    1d90:	88 0d       	add	r24, r8
    1d92:	99 1d       	adc	r25, r9
    1d94:	90 93 7d 01 	sts	0x017D, r25
    1d98:	80 93 7c 01 	sts	0x017C, r24
    1d9c:	ca cf       	rjmp	.-108    	; 0x1d32 <DrawTo+0x8c>
  }
}
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	1f 91       	pop	r17
    1da4:	0f 91       	pop	r16
    1da6:	ff 90       	pop	r15
    1da8:	ef 90       	pop	r14
    1daa:	df 90       	pop	r13
    1dac:	cf 90       	pop	r12
    1dae:	bf 90       	pop	r11
    1db0:	af 90       	pop	r10
    1db2:	9f 90       	pop	r9
    1db4:	8f 90       	pop	r8
    1db6:	7f 90       	pop	r7
    1db8:	6f 90       	pop	r6
    1dba:	5f 90       	pop	r5
    1dbc:	4f 90       	pop	r4
    1dbe:	08 95       	ret

00001dc0 <TestChart>:
}

// Move current plot position to x,y
void MoveTo (int x, int y) 
{
  x_0 = x; y_0 = y;
    1dc0:	10 92 7b 01 	sts	0x017B, r1
    1dc4:	10 92 7a 01 	sts	0x017A, r1
    1dc8:	10 92 7d 01 	sts	0x017D, r1
    1dcc:	10 92 7c 01 	sts	0x017C, r1
}

void TestChart (void) 
{
  MoveTo(0,0);
  DrawTo(xsize-1, 0); DrawTo(xsize-1, ysize-1);
    1dd0:	8f e7       	ldi	r24, 0x7F	; 127
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	70 e0       	ldi	r23, 0x00	; 0
    1dd8:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <DrawTo>
    1ddc:	8f e7       	ldi	r24, 0x7F	; 127
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	6f e7       	ldi	r22, 0x7F	; 127
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <DrawTo>
  DrawTo(0, ysize-1); DrawTo(0, 0);
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	6f e7       	ldi	r22, 0x7F	; 127
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <DrawTo>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	70 e0       	ldi	r23, 0x00	; 0
    1dfc:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <DrawTo>
  scale=8;
    1e00:	88 e0       	ldi	r24, 0x08	; 8
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	90 93 54 01 	sts	0x0154, r25
    1e08:	80 93 53 01 	sts	0x0153, r24
}

// Move current plot position to x,y
void MoveTo (int x, int y) 
{
  x_0 = x; y_0 = y;
    1e0c:	8c e2       	ldi	r24, 0x2C	; 44
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	90 93 7b 01 	sts	0x017B, r25
    1e14:	80 93 7a 01 	sts	0x017A, r24
    1e18:	80 e2       	ldi	r24, 0x20	; 32
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	90 93 7d 01 	sts	0x017D, r25
    1e20:	80 93 7c 01 	sts	0x017C, r24
{
  MoveTo(0,0);
  DrawTo(xsize-1, 0); DrawTo(xsize-1, ysize-1);
  DrawTo(0, ysize-1); DrawTo(0, 0);
  scale=8;
  MoveTo((xsize-40)/2, (ysize-64)/2); PlotChar('A');
    1e24:	81 e4       	ldi	r24, 0x41	; 65
    1e26:	0e 94 3e 0c 	call	0x187c	; 0x187c <PlotChar>
}
    1e2a:	08 95       	ret

00001e2c <ClearDisplay>:
  _delay_ms(100);
  PINB = 1<<CS;                            // cs high
}

void ClearDisplay (void) 
{
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
  PINB = 1<<CS;                            // cs low
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	83 b9       	out	0x03, r24	; 3
  Command4(CASET, yoff>>8, yoff, 0, yoff + ysize - 1);
    1e38:	8a e2       	ldi	r24, 0x2A	; 42
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	00 e8       	ldi	r16, 0x80	; 128
    1e42:	0e 94 00 0c 	call	0x1800	; 0x1800 <Command4>
  Command4(RASET, xoff>>8, xoff, 0, xoff + xsize - 1);
    1e46:	8b e2       	ldi	r24, 0x2B	; 43
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	42 e0       	ldi	r20, 0x02	; 2
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	01 e8       	ldi	r16, 0x81	; 129
    1e50:	0e 94 00 0c 	call	0x1800	; 0x1800 <Command4>
  Command(0x3A); Data(0x03);               // 12-bit colour
    1e54:	8a e3       	ldi	r24, 0x3A	; 58
    1e56:	0e 94 24 0c 	call	0x1848	; 0x1848 <Command>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
    1e5a:	83 e0       	ldi	r24, 0x03	; 3
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
{
  PINB = 1<<CS;                            // cs low
  Command4(CASET, yoff>>8, yoff, 0, yoff + ysize - 1);
  Command4(RASET, xoff>>8, xoff, 0, xoff + xsize - 1);
  Command(0x3A); Data(0x03);               // 12-bit colour
  Command(RAMWR);
    1e62:	8c e2       	ldi	r24, 0x2C	; 44
    1e64:	0e 94 24 0c 	call	0x1848	; 0x1848 <Command>
    1e68:	00 e0       	ldi	r16, 0x00	; 0
    1e6a:	10 e0       	ldi	r17, 0x00	; 0
    1e6c:	0e c0       	rjmp	.+28     	; 0x1e8a <ClearDisplay+0x5e>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
  Command4(CASET, yoff>>8, yoff, 0, yoff + ysize - 1);
  Command4(RASET, xoff>>8, xoff, 0, xoff + xsize - 1);
  Command(0x3A); Data(0x03);               // 12-bit colour
  Command(RAMWR);
  for (int i=0; i<xsize/2; i++) {
    for (int j=0; j<ysize * 3; j++) 
    1e76:	21 96       	adiw	r28, 0x01	; 1
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	c0 38       	cpi	r28, 0x80	; 128
    1e7c:	d8 07       	cpc	r29, r24
    1e7e:	b9 f7       	brne	.-18     	; 0x1e6e <ClearDisplay+0x42>
  PINB = 1<<CS;                            // cs low
  Command4(CASET, yoff>>8, yoff, 0, yoff + ysize - 1);
  Command4(RASET, xoff>>8, xoff, 0, xoff + xsize - 1);
  Command(0x3A); Data(0x03);               // 12-bit colour
  Command(RAMWR);
  for (int i=0; i<xsize/2; i++) {
    1e80:	0f 5f       	subi	r16, 0xFF	; 255
    1e82:	1f 4f       	sbci	r17, 0xFF	; 255
    1e84:	00 34       	cpi	r16, 0x40	; 64
    1e86:	11 05       	cpc	r17, r1
    1e88:	19 f0       	breq	.+6      	; 0x1e90 <ClearDisplay+0x64>
    1e8a:	c0 e0       	ldi	r28, 0x00	; 0
    1e8c:	d0 e0       	ldi	r29, 0x00	; 0
    1e8e:	ef cf       	rjmp	.-34     	; 0x1e6e <ClearDisplay+0x42>
    for (int j=0; j<ysize * 3; j++) 
    {
      Data(0);
    }
  }
  Command(0x3A); Data(0x05);               // Back to 16-bit colour
    1e90:	8a e3       	ldi	r24, 0x3A	; 58
    1e92:	0e 94 24 0c 	call	0x1848	; 0x1848 <Command>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
    1e96:	85 e0       	ldi	r24, 0x05	; 5
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
      Data(0);
    }
  }
  Command(0x3A); Data(0x05);               // Back to 16-bit colour
  //8-bit data bus for 16-bit/pixel (RGB 5-6-5-bit input), 65K-Colors, 3AH= “05h”
  PINB = 1<<CS;                            // cs high
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	83 b9       	out	0x03, r24	; 3
}
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	08 95       	ret

00001eac <InitDisplay>:
  
void InitDisplay (void) 
{
  //DDRB = 1<<dc | 1<<cs | 1<<mosi | 1<<sck; // All outputs
  //PORTB = 1<<sck | 1<<cs | 1<<dc;          // clk, dc, and cs high
  PINB = 1<<CS;                            // cs low
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	83 b9       	out	0x03, r24	; 3
  Command(0x01);                           // Software reset
    1eb0:	0e 94 24 0c 	call	0x1848	; 0x1848 <Command>
    1eb4:	8c ed       	ldi	r24, 0xDC	; 220
    1eb6:	95 e0       	ldi	r25, 0x05	; 5
    1eb8:	28 ec       	ldi	r18, 0xC8	; 200
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	f9 01       	movw	r30, r18
    1ebe:	31 97       	sbiw	r30, 0x01	; 1
    1ec0:	f1 f7       	brne	.-4      	; 0x1ebe <InitDisplay+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec4:	d9 f7       	brne	.-10     	; 0x1ebc <InitDisplay+0x10>
  _delay_ms(150);                              // _delay_ms 150 ms
  Command(0x11);                           // Out of sleep mode
    1ec6:	81 e1       	ldi	r24, 0x11	; 17
    1ec8:	0e 94 24 0c 	call	0x1848	; 0x1848 <Command>
    1ecc:	88 e8       	ldi	r24, 0x88	; 136
    1ece:	93 e1       	ldi	r25, 0x13	; 19
    1ed0:	28 ec       	ldi	r18, 0xC8	; 200
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	f9 01       	movw	r30, r18
    1ed6:	31 97       	sbiw	r30, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <InitDisplay+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eda:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1edc:	d9 f7       	brne	.-10     	; 0x1ed4 <InitDisplay+0x28>
  _delay_ms(500);                              // _delay_ms 500 ms
	Command(0x3A); Data(0x05);               // Set color mode - 16-bit color (rgb 5-6-5)
    1ede:	8a e3       	ldi	r24, 0x3A	; 58
    1ee0:	0e 94 24 0c 	call	0x1848	; 0x1848 <Command>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
    1ee4:	85 e0       	ldi	r24, 0x05	; 5
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
  Command(0x01);                           // Software reset
  _delay_ms(150);                              // _delay_ms 150 ms
  Command(0x11);                           // Out of sleep mode
  _delay_ms(500);                              // _delay_ms 500 ms
	Command(0x3A); Data(0x05);               // Set color mode - 16-bit color (rgb 5-6-5)
   Command(0x20+invert);                    // Invert
    1eec:	80 e2       	ldi	r24, 0x20	; 32
    1eee:	0e 94 24 0c 	call	0x1848	; 0x1848 <Command>
  Command(0x36); Data(rotate<<5);          // Set orientation
    1ef2:	86 e3       	ldi	r24, 0x36	; 54
    1ef4:	0e 94 24 0c 	call	0x1848	; 0x1848 <Command>
 int scale = 1;     // Text scale

// Send a byte to the display
void Data (uint8_t d) 
{
	SPI_MasterTransmit(d);
    1ef8:	80 e6       	ldi	r24, 0x60	; 96
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_MasterTransmit>
  Command(0x11);                           // Out of sleep mode
  _delay_ms(500);                              // _delay_ms 500 ms
	Command(0x3A); Data(0x05);               // Set color mode - 16-bit color (rgb 5-6-5)
   Command(0x20+invert);                    // Invert
  Command(0x36); Data(rotate<<5);          // Set orientation
  PINB = 1<<CS;                            // cs high
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	83 b9       	out	0x03, r24	; 3
}
    1f04:	08 95       	ret

00001f06 <setup>:

// Setup **********************************************

void setup(void) 
{
  InitDisplay();
    1f06:	0e 94 56 0f 	call	0x1eac	; 0x1eac <InitDisplay>
  ClearDisplay();
    1f0a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <ClearDisplay>
  DisplayOn();
    1f0e:	0e 94 2d 0c 	call	0x185a	; 0x185a <DisplayOn>
}

// Move current plot position to x,y
void MoveTo (int x, int y) 
{
  x_0 = x; y_0 = y;
    1f12:	10 92 7b 01 	sts	0x017B, r1
    1f16:	10 92 7a 01 	sts	0x017A, r1
    1f1a:	10 92 7d 01 	sts	0x017D, r1
    1f1e:	10 92 7c 01 	sts	0x017C, r1
{
  InitDisplay();
  ClearDisplay();
  DisplayOn();
  MoveTo(0,0);
}
    1f22:	08 95       	ret

00001f24 <__subsf3>:
    1f24:	50 58       	subi	r21, 0x80	; 128

00001f26 <__addsf3>:
    1f26:	bb 27       	eor	r27, r27
    1f28:	aa 27       	eor	r26, r26
    1f2a:	0e d0       	rcall	.+28     	; 0x1f48 <__addsf3x>
    1f2c:	70 c1       	rjmp	.+736    	; 0x220e <__fp_round>
    1f2e:	61 d1       	rcall	.+706    	; 0x21f2 <__fp_pscA>
    1f30:	30 f0       	brcs	.+12     	; 0x1f3e <__addsf3+0x18>
    1f32:	66 d1       	rcall	.+716    	; 0x2200 <__fp_pscB>
    1f34:	20 f0       	brcs	.+8      	; 0x1f3e <__addsf3+0x18>
    1f36:	31 f4       	brne	.+12     	; 0x1f44 <__addsf3+0x1e>
    1f38:	9f 3f       	cpi	r25, 0xFF	; 255
    1f3a:	11 f4       	brne	.+4      	; 0x1f40 <__addsf3+0x1a>
    1f3c:	1e f4       	brtc	.+6      	; 0x1f44 <__addsf3+0x1e>
    1f3e:	56 c1       	rjmp	.+684    	; 0x21ec <__fp_nan>
    1f40:	0e f4       	brtc	.+2      	; 0x1f44 <__addsf3+0x1e>
    1f42:	e0 95       	com	r30
    1f44:	e7 fb       	bst	r30, 7
    1f46:	4c c1       	rjmp	.+664    	; 0x21e0 <__fp_inf>

00001f48 <__addsf3x>:
    1f48:	e9 2f       	mov	r30, r25
    1f4a:	72 d1       	rcall	.+740    	; 0x2230 <__fp_split3>
    1f4c:	80 f3       	brcs	.-32     	; 0x1f2e <__addsf3+0x8>
    1f4e:	ba 17       	cp	r27, r26
    1f50:	62 07       	cpc	r22, r18
    1f52:	73 07       	cpc	r23, r19
    1f54:	84 07       	cpc	r24, r20
    1f56:	95 07       	cpc	r25, r21
    1f58:	18 f0       	brcs	.+6      	; 0x1f60 <__addsf3x+0x18>
    1f5a:	71 f4       	brne	.+28     	; 0x1f78 <__addsf3x+0x30>
    1f5c:	9e f5       	brtc	.+102    	; 0x1fc4 <__addsf3x+0x7c>
    1f5e:	8a c1       	rjmp	.+788    	; 0x2274 <__fp_zero>
    1f60:	0e f4       	brtc	.+2      	; 0x1f64 <__addsf3x+0x1c>
    1f62:	e0 95       	com	r30
    1f64:	0b 2e       	mov	r0, r27
    1f66:	ba 2f       	mov	r27, r26
    1f68:	a0 2d       	mov	r26, r0
    1f6a:	0b 01       	movw	r0, r22
    1f6c:	b9 01       	movw	r22, r18
    1f6e:	90 01       	movw	r18, r0
    1f70:	0c 01       	movw	r0, r24
    1f72:	ca 01       	movw	r24, r20
    1f74:	a0 01       	movw	r20, r0
    1f76:	11 24       	eor	r1, r1
    1f78:	ff 27       	eor	r31, r31
    1f7a:	59 1b       	sub	r21, r25
    1f7c:	99 f0       	breq	.+38     	; 0x1fa4 <__addsf3x+0x5c>
    1f7e:	59 3f       	cpi	r21, 0xF9	; 249
    1f80:	50 f4       	brcc	.+20     	; 0x1f96 <__addsf3x+0x4e>
    1f82:	50 3e       	cpi	r21, 0xE0	; 224
    1f84:	68 f1       	brcs	.+90     	; 0x1fe0 <__addsf3x+0x98>
    1f86:	1a 16       	cp	r1, r26
    1f88:	f0 40       	sbci	r31, 0x00	; 0
    1f8a:	a2 2f       	mov	r26, r18
    1f8c:	23 2f       	mov	r18, r19
    1f8e:	34 2f       	mov	r19, r20
    1f90:	44 27       	eor	r20, r20
    1f92:	58 5f       	subi	r21, 0xF8	; 248
    1f94:	f3 cf       	rjmp	.-26     	; 0x1f7c <__addsf3x+0x34>
    1f96:	46 95       	lsr	r20
    1f98:	37 95       	ror	r19
    1f9a:	27 95       	ror	r18
    1f9c:	a7 95       	ror	r26
    1f9e:	f0 40       	sbci	r31, 0x00	; 0
    1fa0:	53 95       	inc	r21
    1fa2:	c9 f7       	brne	.-14     	; 0x1f96 <__addsf3x+0x4e>
    1fa4:	7e f4       	brtc	.+30     	; 0x1fc4 <__addsf3x+0x7c>
    1fa6:	1f 16       	cp	r1, r31
    1fa8:	ba 0b       	sbc	r27, r26
    1faa:	62 0b       	sbc	r22, r18
    1fac:	73 0b       	sbc	r23, r19
    1fae:	84 0b       	sbc	r24, r20
    1fb0:	ba f0       	brmi	.+46     	; 0x1fe0 <__addsf3x+0x98>
    1fb2:	91 50       	subi	r25, 0x01	; 1
    1fb4:	a1 f0       	breq	.+40     	; 0x1fde <__addsf3x+0x96>
    1fb6:	ff 0f       	add	r31, r31
    1fb8:	bb 1f       	adc	r27, r27
    1fba:	66 1f       	adc	r22, r22
    1fbc:	77 1f       	adc	r23, r23
    1fbe:	88 1f       	adc	r24, r24
    1fc0:	c2 f7       	brpl	.-16     	; 0x1fb2 <__addsf3x+0x6a>
    1fc2:	0e c0       	rjmp	.+28     	; 0x1fe0 <__addsf3x+0x98>
    1fc4:	ba 0f       	add	r27, r26
    1fc6:	62 1f       	adc	r22, r18
    1fc8:	73 1f       	adc	r23, r19
    1fca:	84 1f       	adc	r24, r20
    1fcc:	48 f4       	brcc	.+18     	; 0x1fe0 <__addsf3x+0x98>
    1fce:	87 95       	ror	r24
    1fd0:	77 95       	ror	r23
    1fd2:	67 95       	ror	r22
    1fd4:	b7 95       	ror	r27
    1fd6:	f7 95       	ror	r31
    1fd8:	9e 3f       	cpi	r25, 0xFE	; 254
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <__addsf3x+0x96>
    1fdc:	b3 cf       	rjmp	.-154    	; 0x1f44 <__addsf3+0x1e>
    1fde:	93 95       	inc	r25
    1fe0:	88 0f       	add	r24, r24
    1fe2:	08 f0       	brcs	.+2      	; 0x1fe6 <__addsf3x+0x9e>
    1fe4:	99 27       	eor	r25, r25
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	97 95       	ror	r25
    1fea:	87 95       	ror	r24
    1fec:	08 95       	ret

00001fee <__cmpsf2>:
    1fee:	d4 d0       	rcall	.+424    	; 0x2198 <__fp_cmp>
    1ff0:	08 f4       	brcc	.+2      	; 0x1ff4 <__cmpsf2+0x6>
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	08 95       	ret

00001ff6 <__divsf3>:
    1ff6:	0c d0       	rcall	.+24     	; 0x2010 <__divsf3x>
    1ff8:	0a c1       	rjmp	.+532    	; 0x220e <__fp_round>
    1ffa:	02 d1       	rcall	.+516    	; 0x2200 <__fp_pscB>
    1ffc:	40 f0       	brcs	.+16     	; 0x200e <__divsf3+0x18>
    1ffe:	f9 d0       	rcall	.+498    	; 0x21f2 <__fp_pscA>
    2000:	30 f0       	brcs	.+12     	; 0x200e <__divsf3+0x18>
    2002:	21 f4       	brne	.+8      	; 0x200c <__divsf3+0x16>
    2004:	5f 3f       	cpi	r21, 0xFF	; 255
    2006:	19 f0       	breq	.+6      	; 0x200e <__divsf3+0x18>
    2008:	eb c0       	rjmp	.+470    	; 0x21e0 <__fp_inf>
    200a:	51 11       	cpse	r21, r1
    200c:	34 c1       	rjmp	.+616    	; 0x2276 <__fp_szero>
    200e:	ee c0       	rjmp	.+476    	; 0x21ec <__fp_nan>

00002010 <__divsf3x>:
    2010:	0f d1       	rcall	.+542    	; 0x2230 <__fp_split3>
    2012:	98 f3       	brcs	.-26     	; 0x1ffa <__divsf3+0x4>

00002014 <__divsf3_pse>:
    2014:	99 23       	and	r25, r25
    2016:	c9 f3       	breq	.-14     	; 0x200a <__divsf3+0x14>
    2018:	55 23       	and	r21, r21
    201a:	b1 f3       	breq	.-20     	; 0x2008 <__divsf3+0x12>
    201c:	95 1b       	sub	r25, r21
    201e:	55 0b       	sbc	r21, r21
    2020:	bb 27       	eor	r27, r27
    2022:	aa 27       	eor	r26, r26
    2024:	62 17       	cp	r22, r18
    2026:	73 07       	cpc	r23, r19
    2028:	84 07       	cpc	r24, r20
    202a:	38 f0       	brcs	.+14     	; 0x203a <__divsf3_pse+0x26>
    202c:	9f 5f       	subi	r25, 0xFF	; 255
    202e:	5f 4f       	sbci	r21, 0xFF	; 255
    2030:	22 0f       	add	r18, r18
    2032:	33 1f       	adc	r19, r19
    2034:	44 1f       	adc	r20, r20
    2036:	aa 1f       	adc	r26, r26
    2038:	a9 f3       	breq	.-22     	; 0x2024 <__divsf3_pse+0x10>
    203a:	33 d0       	rcall	.+102    	; 0x20a2 <__divsf3_pse+0x8e>
    203c:	0e 2e       	mov	r0, r30
    203e:	3a f0       	brmi	.+14     	; 0x204e <__divsf3_pse+0x3a>
    2040:	e0 e8       	ldi	r30, 0x80	; 128
    2042:	30 d0       	rcall	.+96     	; 0x20a4 <__divsf3_pse+0x90>
    2044:	91 50       	subi	r25, 0x01	; 1
    2046:	50 40       	sbci	r21, 0x00	; 0
    2048:	e6 95       	lsr	r30
    204a:	00 1c       	adc	r0, r0
    204c:	ca f7       	brpl	.-14     	; 0x2040 <__divsf3_pse+0x2c>
    204e:	29 d0       	rcall	.+82     	; 0x20a2 <__divsf3_pse+0x8e>
    2050:	fe 2f       	mov	r31, r30
    2052:	27 d0       	rcall	.+78     	; 0x20a2 <__divsf3_pse+0x8e>
    2054:	66 0f       	add	r22, r22
    2056:	77 1f       	adc	r23, r23
    2058:	88 1f       	adc	r24, r24
    205a:	bb 1f       	adc	r27, r27
    205c:	26 17       	cp	r18, r22
    205e:	37 07       	cpc	r19, r23
    2060:	48 07       	cpc	r20, r24
    2062:	ab 07       	cpc	r26, r27
    2064:	b0 e8       	ldi	r27, 0x80	; 128
    2066:	09 f0       	breq	.+2      	; 0x206a <__divsf3_pse+0x56>
    2068:	bb 0b       	sbc	r27, r27
    206a:	80 2d       	mov	r24, r0
    206c:	bf 01       	movw	r22, r30
    206e:	ff 27       	eor	r31, r31
    2070:	93 58       	subi	r25, 0x83	; 131
    2072:	5f 4f       	sbci	r21, 0xFF	; 255
    2074:	2a f0       	brmi	.+10     	; 0x2080 <__divsf3_pse+0x6c>
    2076:	9e 3f       	cpi	r25, 0xFE	; 254
    2078:	51 05       	cpc	r21, r1
    207a:	68 f0       	brcs	.+26     	; 0x2096 <__divsf3_pse+0x82>
    207c:	b1 c0       	rjmp	.+354    	; 0x21e0 <__fp_inf>
    207e:	fb c0       	rjmp	.+502    	; 0x2276 <__fp_szero>
    2080:	5f 3f       	cpi	r21, 0xFF	; 255
    2082:	ec f3       	brlt	.-6      	; 0x207e <__divsf3_pse+0x6a>
    2084:	98 3e       	cpi	r25, 0xE8	; 232
    2086:	dc f3       	brlt	.-10     	; 0x207e <__divsf3_pse+0x6a>
    2088:	86 95       	lsr	r24
    208a:	77 95       	ror	r23
    208c:	67 95       	ror	r22
    208e:	b7 95       	ror	r27
    2090:	f7 95       	ror	r31
    2092:	9f 5f       	subi	r25, 0xFF	; 255
    2094:	c9 f7       	brne	.-14     	; 0x2088 <__divsf3_pse+0x74>
    2096:	88 0f       	add	r24, r24
    2098:	91 1d       	adc	r25, r1
    209a:	96 95       	lsr	r25
    209c:	87 95       	ror	r24
    209e:	97 f9       	bld	r25, 7
    20a0:	08 95       	ret
    20a2:	e1 e0       	ldi	r30, 0x01	; 1
    20a4:	66 0f       	add	r22, r22
    20a6:	77 1f       	adc	r23, r23
    20a8:	88 1f       	adc	r24, r24
    20aa:	bb 1f       	adc	r27, r27
    20ac:	62 17       	cp	r22, r18
    20ae:	73 07       	cpc	r23, r19
    20b0:	84 07       	cpc	r24, r20
    20b2:	ba 07       	cpc	r27, r26
    20b4:	20 f0       	brcs	.+8      	; 0x20be <__divsf3_pse+0xaa>
    20b6:	62 1b       	sub	r22, r18
    20b8:	73 0b       	sbc	r23, r19
    20ba:	84 0b       	sbc	r24, r20
    20bc:	ba 0b       	sbc	r27, r26
    20be:	ee 1f       	adc	r30, r30
    20c0:	88 f7       	brcc	.-30     	; 0x20a4 <__divsf3_pse+0x90>
    20c2:	e0 95       	com	r30
    20c4:	08 95       	ret

000020c6 <__fixunssfsi>:
    20c6:	bc d0       	rcall	.+376    	; 0x2240 <__fp_splitA>
    20c8:	88 f0       	brcs	.+34     	; 0x20ec <__fixunssfsi+0x26>
    20ca:	9f 57       	subi	r25, 0x7F	; 127
    20cc:	90 f0       	brcs	.+36     	; 0x20f2 <__fixunssfsi+0x2c>
    20ce:	b9 2f       	mov	r27, r25
    20d0:	99 27       	eor	r25, r25
    20d2:	b7 51       	subi	r27, 0x17	; 23
    20d4:	a0 f0       	brcs	.+40     	; 0x20fe <__fixunssfsi+0x38>
    20d6:	d1 f0       	breq	.+52     	; 0x210c <__fixunssfsi+0x46>
    20d8:	66 0f       	add	r22, r22
    20da:	77 1f       	adc	r23, r23
    20dc:	88 1f       	adc	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	1a f0       	brmi	.+6      	; 0x20e8 <__fixunssfsi+0x22>
    20e2:	ba 95       	dec	r27
    20e4:	c9 f7       	brne	.-14     	; 0x20d8 <__fixunssfsi+0x12>
    20e6:	12 c0       	rjmp	.+36     	; 0x210c <__fixunssfsi+0x46>
    20e8:	b1 30       	cpi	r27, 0x01	; 1
    20ea:	81 f0       	breq	.+32     	; 0x210c <__fixunssfsi+0x46>
    20ec:	c3 d0       	rcall	.+390    	; 0x2274 <__fp_zero>
    20ee:	b1 e0       	ldi	r27, 0x01	; 1
    20f0:	08 95       	ret
    20f2:	c0 c0       	rjmp	.+384    	; 0x2274 <__fp_zero>
    20f4:	67 2f       	mov	r22, r23
    20f6:	78 2f       	mov	r23, r24
    20f8:	88 27       	eor	r24, r24
    20fa:	b8 5f       	subi	r27, 0xF8	; 248
    20fc:	39 f0       	breq	.+14     	; 0x210c <__fixunssfsi+0x46>
    20fe:	b9 3f       	cpi	r27, 0xF9	; 249
    2100:	cc f3       	brlt	.-14     	; 0x20f4 <__fixunssfsi+0x2e>
    2102:	86 95       	lsr	r24
    2104:	77 95       	ror	r23
    2106:	67 95       	ror	r22
    2108:	b3 95       	inc	r27
    210a:	d9 f7       	brne	.-10     	; 0x2102 <__fixunssfsi+0x3c>
    210c:	3e f4       	brtc	.+14     	; 0x211c <__fixunssfsi+0x56>
    210e:	90 95       	com	r25
    2110:	80 95       	com	r24
    2112:	70 95       	com	r23
    2114:	61 95       	neg	r22
    2116:	7f 4f       	sbci	r23, 0xFF	; 255
    2118:	8f 4f       	sbci	r24, 0xFF	; 255
    211a:	9f 4f       	sbci	r25, 0xFF	; 255
    211c:	08 95       	ret

0000211e <__floatunsisf>:
    211e:	e8 94       	clt
    2120:	09 c0       	rjmp	.+18     	; 0x2134 <__floatsisf+0x12>

00002122 <__floatsisf>:
    2122:	97 fb       	bst	r25, 7
    2124:	3e f4       	brtc	.+14     	; 0x2134 <__floatsisf+0x12>
    2126:	90 95       	com	r25
    2128:	80 95       	com	r24
    212a:	70 95       	com	r23
    212c:	61 95       	neg	r22
    212e:	7f 4f       	sbci	r23, 0xFF	; 255
    2130:	8f 4f       	sbci	r24, 0xFF	; 255
    2132:	9f 4f       	sbci	r25, 0xFF	; 255
    2134:	99 23       	and	r25, r25
    2136:	a9 f0       	breq	.+42     	; 0x2162 <__floatsisf+0x40>
    2138:	f9 2f       	mov	r31, r25
    213a:	96 e9       	ldi	r25, 0x96	; 150
    213c:	bb 27       	eor	r27, r27
    213e:	93 95       	inc	r25
    2140:	f6 95       	lsr	r31
    2142:	87 95       	ror	r24
    2144:	77 95       	ror	r23
    2146:	67 95       	ror	r22
    2148:	b7 95       	ror	r27
    214a:	f1 11       	cpse	r31, r1
    214c:	f8 cf       	rjmp	.-16     	; 0x213e <__floatsisf+0x1c>
    214e:	fa f4       	brpl	.+62     	; 0x218e <__floatsisf+0x6c>
    2150:	bb 0f       	add	r27, r27
    2152:	11 f4       	brne	.+4      	; 0x2158 <__floatsisf+0x36>
    2154:	60 ff       	sbrs	r22, 0
    2156:	1b c0       	rjmp	.+54     	; 0x218e <__floatsisf+0x6c>
    2158:	6f 5f       	subi	r22, 0xFF	; 255
    215a:	7f 4f       	sbci	r23, 0xFF	; 255
    215c:	8f 4f       	sbci	r24, 0xFF	; 255
    215e:	9f 4f       	sbci	r25, 0xFF	; 255
    2160:	16 c0       	rjmp	.+44     	; 0x218e <__floatsisf+0x6c>
    2162:	88 23       	and	r24, r24
    2164:	11 f0       	breq	.+4      	; 0x216a <__floatsisf+0x48>
    2166:	96 e9       	ldi	r25, 0x96	; 150
    2168:	11 c0       	rjmp	.+34     	; 0x218c <__floatsisf+0x6a>
    216a:	77 23       	and	r23, r23
    216c:	21 f0       	breq	.+8      	; 0x2176 <__floatsisf+0x54>
    216e:	9e e8       	ldi	r25, 0x8E	; 142
    2170:	87 2f       	mov	r24, r23
    2172:	76 2f       	mov	r23, r22
    2174:	05 c0       	rjmp	.+10     	; 0x2180 <__floatsisf+0x5e>
    2176:	66 23       	and	r22, r22
    2178:	71 f0       	breq	.+28     	; 0x2196 <__floatsisf+0x74>
    217a:	96 e8       	ldi	r25, 0x86	; 134
    217c:	86 2f       	mov	r24, r22
    217e:	70 e0       	ldi	r23, 0x00	; 0
    2180:	60 e0       	ldi	r22, 0x00	; 0
    2182:	2a f0       	brmi	.+10     	; 0x218e <__floatsisf+0x6c>
    2184:	9a 95       	dec	r25
    2186:	66 0f       	add	r22, r22
    2188:	77 1f       	adc	r23, r23
    218a:	88 1f       	adc	r24, r24
    218c:	da f7       	brpl	.-10     	; 0x2184 <__floatsisf+0x62>
    218e:	88 0f       	add	r24, r24
    2190:	96 95       	lsr	r25
    2192:	87 95       	ror	r24
    2194:	97 f9       	bld	r25, 7
    2196:	08 95       	ret

00002198 <__fp_cmp>:
    2198:	99 0f       	add	r25, r25
    219a:	00 08       	sbc	r0, r0
    219c:	55 0f       	add	r21, r21
    219e:	aa 0b       	sbc	r26, r26
    21a0:	e0 e8       	ldi	r30, 0x80	; 128
    21a2:	fe ef       	ldi	r31, 0xFE	; 254
    21a4:	16 16       	cp	r1, r22
    21a6:	17 06       	cpc	r1, r23
    21a8:	e8 07       	cpc	r30, r24
    21aa:	f9 07       	cpc	r31, r25
    21ac:	c0 f0       	brcs	.+48     	; 0x21de <__fp_cmp+0x46>
    21ae:	12 16       	cp	r1, r18
    21b0:	13 06       	cpc	r1, r19
    21b2:	e4 07       	cpc	r30, r20
    21b4:	f5 07       	cpc	r31, r21
    21b6:	98 f0       	brcs	.+38     	; 0x21de <__fp_cmp+0x46>
    21b8:	62 1b       	sub	r22, r18
    21ba:	73 0b       	sbc	r23, r19
    21bc:	84 0b       	sbc	r24, r20
    21be:	95 0b       	sbc	r25, r21
    21c0:	39 f4       	brne	.+14     	; 0x21d0 <__fp_cmp+0x38>
    21c2:	0a 26       	eor	r0, r26
    21c4:	61 f0       	breq	.+24     	; 0x21de <__fp_cmp+0x46>
    21c6:	23 2b       	or	r18, r19
    21c8:	24 2b       	or	r18, r20
    21ca:	25 2b       	or	r18, r21
    21cc:	21 f4       	brne	.+8      	; 0x21d6 <__fp_cmp+0x3e>
    21ce:	08 95       	ret
    21d0:	0a 26       	eor	r0, r26
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <__fp_cmp+0x3e>
    21d4:	a1 40       	sbci	r26, 0x01	; 1
    21d6:	a6 95       	lsr	r26
    21d8:	8f ef       	ldi	r24, 0xFF	; 255
    21da:	81 1d       	adc	r24, r1
    21dc:	81 1d       	adc	r24, r1
    21de:	08 95       	ret

000021e0 <__fp_inf>:
    21e0:	97 f9       	bld	r25, 7
    21e2:	9f 67       	ori	r25, 0x7F	; 127
    21e4:	80 e8       	ldi	r24, 0x80	; 128
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	08 95       	ret

000021ec <__fp_nan>:
    21ec:	9f ef       	ldi	r25, 0xFF	; 255
    21ee:	80 ec       	ldi	r24, 0xC0	; 192
    21f0:	08 95       	ret

000021f2 <__fp_pscA>:
    21f2:	00 24       	eor	r0, r0
    21f4:	0a 94       	dec	r0
    21f6:	16 16       	cp	r1, r22
    21f8:	17 06       	cpc	r1, r23
    21fa:	18 06       	cpc	r1, r24
    21fc:	09 06       	cpc	r0, r25
    21fe:	08 95       	ret

00002200 <__fp_pscB>:
    2200:	00 24       	eor	r0, r0
    2202:	0a 94       	dec	r0
    2204:	12 16       	cp	r1, r18
    2206:	13 06       	cpc	r1, r19
    2208:	14 06       	cpc	r1, r20
    220a:	05 06       	cpc	r0, r21
    220c:	08 95       	ret

0000220e <__fp_round>:
    220e:	09 2e       	mov	r0, r25
    2210:	03 94       	inc	r0
    2212:	00 0c       	add	r0, r0
    2214:	11 f4       	brne	.+4      	; 0x221a <__fp_round+0xc>
    2216:	88 23       	and	r24, r24
    2218:	52 f0       	brmi	.+20     	; 0x222e <__fp_round+0x20>
    221a:	bb 0f       	add	r27, r27
    221c:	40 f4       	brcc	.+16     	; 0x222e <__fp_round+0x20>
    221e:	bf 2b       	or	r27, r31
    2220:	11 f4       	brne	.+4      	; 0x2226 <__fp_round+0x18>
    2222:	60 ff       	sbrs	r22, 0
    2224:	04 c0       	rjmp	.+8      	; 0x222e <__fp_round+0x20>
    2226:	6f 5f       	subi	r22, 0xFF	; 255
    2228:	7f 4f       	sbci	r23, 0xFF	; 255
    222a:	8f 4f       	sbci	r24, 0xFF	; 255
    222c:	9f 4f       	sbci	r25, 0xFF	; 255
    222e:	08 95       	ret

00002230 <__fp_split3>:
    2230:	57 fd       	sbrc	r21, 7
    2232:	90 58       	subi	r25, 0x80	; 128
    2234:	44 0f       	add	r20, r20
    2236:	55 1f       	adc	r21, r21
    2238:	59 f0       	breq	.+22     	; 0x2250 <__fp_splitA+0x10>
    223a:	5f 3f       	cpi	r21, 0xFF	; 255
    223c:	71 f0       	breq	.+28     	; 0x225a <__fp_splitA+0x1a>
    223e:	47 95       	ror	r20

00002240 <__fp_splitA>:
    2240:	88 0f       	add	r24, r24
    2242:	97 fb       	bst	r25, 7
    2244:	99 1f       	adc	r25, r25
    2246:	61 f0       	breq	.+24     	; 0x2260 <__fp_splitA+0x20>
    2248:	9f 3f       	cpi	r25, 0xFF	; 255
    224a:	79 f0       	breq	.+30     	; 0x226a <__fp_splitA+0x2a>
    224c:	87 95       	ror	r24
    224e:	08 95       	ret
    2250:	12 16       	cp	r1, r18
    2252:	13 06       	cpc	r1, r19
    2254:	14 06       	cpc	r1, r20
    2256:	55 1f       	adc	r21, r21
    2258:	f2 cf       	rjmp	.-28     	; 0x223e <__fp_split3+0xe>
    225a:	46 95       	lsr	r20
    225c:	f1 df       	rcall	.-30     	; 0x2240 <__fp_splitA>
    225e:	08 c0       	rjmp	.+16     	; 0x2270 <__fp_splitA+0x30>
    2260:	16 16       	cp	r1, r22
    2262:	17 06       	cpc	r1, r23
    2264:	18 06       	cpc	r1, r24
    2266:	99 1f       	adc	r25, r25
    2268:	f1 cf       	rjmp	.-30     	; 0x224c <__fp_splitA+0xc>
    226a:	86 95       	lsr	r24
    226c:	71 05       	cpc	r23, r1
    226e:	61 05       	cpc	r22, r1
    2270:	08 94       	sec
    2272:	08 95       	ret

00002274 <__fp_zero>:
    2274:	e8 94       	clt

00002276 <__fp_szero>:
    2276:	bb 27       	eor	r27, r27
    2278:	66 27       	eor	r22, r22
    227a:	77 27       	eor	r23, r23
    227c:	cb 01       	movw	r24, r22
    227e:	97 f9       	bld	r25, 7
    2280:	08 95       	ret

00002282 <__gesf2>:
    2282:	8a df       	rcall	.-236    	; 0x2198 <__fp_cmp>
    2284:	08 f4       	brcc	.+2      	; 0x2288 <__gesf2+0x6>
    2286:	8f ef       	ldi	r24, 0xFF	; 255
    2288:	08 95       	ret

0000228a <__mulsf3>:
    228a:	0b d0       	rcall	.+22     	; 0x22a2 <__mulsf3x>
    228c:	c0 cf       	rjmp	.-128    	; 0x220e <__fp_round>
    228e:	b1 df       	rcall	.-158    	; 0x21f2 <__fp_pscA>
    2290:	28 f0       	brcs	.+10     	; 0x229c <__mulsf3+0x12>
    2292:	b6 df       	rcall	.-148    	; 0x2200 <__fp_pscB>
    2294:	18 f0       	brcs	.+6      	; 0x229c <__mulsf3+0x12>
    2296:	95 23       	and	r25, r21
    2298:	09 f0       	breq	.+2      	; 0x229c <__mulsf3+0x12>
    229a:	a2 cf       	rjmp	.-188    	; 0x21e0 <__fp_inf>
    229c:	a7 cf       	rjmp	.-178    	; 0x21ec <__fp_nan>
    229e:	11 24       	eor	r1, r1
    22a0:	ea cf       	rjmp	.-44     	; 0x2276 <__fp_szero>

000022a2 <__mulsf3x>:
    22a2:	c6 df       	rcall	.-116    	; 0x2230 <__fp_split3>
    22a4:	a0 f3       	brcs	.-24     	; 0x228e <__mulsf3+0x4>

000022a6 <__mulsf3_pse>:
    22a6:	95 9f       	mul	r25, r21
    22a8:	d1 f3       	breq	.-12     	; 0x229e <__mulsf3+0x14>
    22aa:	95 0f       	add	r25, r21
    22ac:	50 e0       	ldi	r21, 0x00	; 0
    22ae:	55 1f       	adc	r21, r21
    22b0:	62 9f       	mul	r22, r18
    22b2:	f0 01       	movw	r30, r0
    22b4:	72 9f       	mul	r23, r18
    22b6:	bb 27       	eor	r27, r27
    22b8:	f0 0d       	add	r31, r0
    22ba:	b1 1d       	adc	r27, r1
    22bc:	63 9f       	mul	r22, r19
    22be:	aa 27       	eor	r26, r26
    22c0:	f0 0d       	add	r31, r0
    22c2:	b1 1d       	adc	r27, r1
    22c4:	aa 1f       	adc	r26, r26
    22c6:	64 9f       	mul	r22, r20
    22c8:	66 27       	eor	r22, r22
    22ca:	b0 0d       	add	r27, r0
    22cc:	a1 1d       	adc	r26, r1
    22ce:	66 1f       	adc	r22, r22
    22d0:	82 9f       	mul	r24, r18
    22d2:	22 27       	eor	r18, r18
    22d4:	b0 0d       	add	r27, r0
    22d6:	a1 1d       	adc	r26, r1
    22d8:	62 1f       	adc	r22, r18
    22da:	73 9f       	mul	r23, r19
    22dc:	b0 0d       	add	r27, r0
    22de:	a1 1d       	adc	r26, r1
    22e0:	62 1f       	adc	r22, r18
    22e2:	83 9f       	mul	r24, r19
    22e4:	a0 0d       	add	r26, r0
    22e6:	61 1d       	adc	r22, r1
    22e8:	22 1f       	adc	r18, r18
    22ea:	74 9f       	mul	r23, r20
    22ec:	33 27       	eor	r19, r19
    22ee:	a0 0d       	add	r26, r0
    22f0:	61 1d       	adc	r22, r1
    22f2:	23 1f       	adc	r18, r19
    22f4:	84 9f       	mul	r24, r20
    22f6:	60 0d       	add	r22, r0
    22f8:	21 1d       	adc	r18, r1
    22fa:	82 2f       	mov	r24, r18
    22fc:	76 2f       	mov	r23, r22
    22fe:	6a 2f       	mov	r22, r26
    2300:	11 24       	eor	r1, r1
    2302:	9f 57       	subi	r25, 0x7F	; 127
    2304:	50 40       	sbci	r21, 0x00	; 0
    2306:	8a f0       	brmi	.+34     	; 0x232a <__mulsf3_pse+0x84>
    2308:	e1 f0       	breq	.+56     	; 0x2342 <__mulsf3_pse+0x9c>
    230a:	88 23       	and	r24, r24
    230c:	4a f0       	brmi	.+18     	; 0x2320 <__mulsf3_pse+0x7a>
    230e:	ee 0f       	add	r30, r30
    2310:	ff 1f       	adc	r31, r31
    2312:	bb 1f       	adc	r27, r27
    2314:	66 1f       	adc	r22, r22
    2316:	77 1f       	adc	r23, r23
    2318:	88 1f       	adc	r24, r24
    231a:	91 50       	subi	r25, 0x01	; 1
    231c:	50 40       	sbci	r21, 0x00	; 0
    231e:	a9 f7       	brne	.-22     	; 0x230a <__mulsf3_pse+0x64>
    2320:	9e 3f       	cpi	r25, 0xFE	; 254
    2322:	51 05       	cpc	r21, r1
    2324:	70 f0       	brcs	.+28     	; 0x2342 <__mulsf3_pse+0x9c>
    2326:	5c cf       	rjmp	.-328    	; 0x21e0 <__fp_inf>
    2328:	a6 cf       	rjmp	.-180    	; 0x2276 <__fp_szero>
    232a:	5f 3f       	cpi	r21, 0xFF	; 255
    232c:	ec f3       	brlt	.-6      	; 0x2328 <__mulsf3_pse+0x82>
    232e:	98 3e       	cpi	r25, 0xE8	; 232
    2330:	dc f3       	brlt	.-10     	; 0x2328 <__mulsf3_pse+0x82>
    2332:	86 95       	lsr	r24
    2334:	77 95       	ror	r23
    2336:	67 95       	ror	r22
    2338:	b7 95       	ror	r27
    233a:	f7 95       	ror	r31
    233c:	e7 95       	ror	r30
    233e:	9f 5f       	subi	r25, 0xFF	; 255
    2340:	c1 f7       	brne	.-16     	; 0x2332 <__mulsf3_pse+0x8c>
    2342:	fe 2b       	or	r31, r30
    2344:	88 0f       	add	r24, r24
    2346:	91 1d       	adc	r25, r1
    2348:	96 95       	lsr	r25
    234a:	87 95       	ror	r24
    234c:	97 f9       	bld	r25, 7
    234e:	08 95       	ret

00002350 <do_rand>:
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	ee ea       	ldi	r30, 0xAE	; 174
    2356:	f1 e1       	ldi	r31, 0x11	; 17
    2358:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__prologue_saves__+0x10>
    235c:	ec 01       	movw	r28, r24
    235e:	a8 80       	ld	r10, Y
    2360:	b9 80       	ldd	r11, Y+1	; 0x01
    2362:	ca 80       	ldd	r12, Y+2	; 0x02
    2364:	db 80       	ldd	r13, Y+3	; 0x03
    2366:	a1 14       	cp	r10, r1
    2368:	b1 04       	cpc	r11, r1
    236a:	c1 04       	cpc	r12, r1
    236c:	d1 04       	cpc	r13, r1
    236e:	41 f4       	brne	.+16     	; 0x2380 <do_rand+0x30>
    2370:	84 e2       	ldi	r24, 0x24	; 36
    2372:	a8 2e       	mov	r10, r24
    2374:	89 ed       	ldi	r24, 0xD9	; 217
    2376:	b8 2e       	mov	r11, r24
    2378:	8b e5       	ldi	r24, 0x5B	; 91
    237a:	c8 2e       	mov	r12, r24
    237c:	87 e0       	ldi	r24, 0x07	; 7
    237e:	d8 2e       	mov	r13, r24
    2380:	c6 01       	movw	r24, r12
    2382:	b5 01       	movw	r22, r10
    2384:	2d e1       	ldi	r18, 0x1D	; 29
    2386:	33 ef       	ldi	r19, 0xF3	; 243
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	50 e0       	ldi	r21, 0x00	; 0
    238c:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__divmodsi4>
    2390:	27 ea       	ldi	r18, 0xA7	; 167
    2392:	31 e4       	ldi	r19, 0x41	; 65
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	50 e0       	ldi	r21, 0x00	; 0
    2398:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsi3>
    239c:	7b 01       	movw	r14, r22
    239e:	8c 01       	movw	r16, r24
    23a0:	c6 01       	movw	r24, r12
    23a2:	b5 01       	movw	r22, r10
    23a4:	2d e1       	ldi	r18, 0x1D	; 29
    23a6:	33 ef       	ldi	r19, 0xF3	; 243
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__divmodsi4>
    23b0:	ca 01       	movw	r24, r20
    23b2:	b9 01       	movw	r22, r18
    23b4:	2c ee       	ldi	r18, 0xEC	; 236
    23b6:	34 ef       	ldi	r19, 0xF4	; 244
    23b8:	4f ef       	ldi	r20, 0xFF	; 255
    23ba:	5f ef       	ldi	r21, 0xFF	; 255
    23bc:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsi3>
    23c0:	6e 0d       	add	r22, r14
    23c2:	7f 1d       	adc	r23, r15
    23c4:	80 1f       	adc	r24, r16
    23c6:	91 1f       	adc	r25, r17
    23c8:	97 ff       	sbrs	r25, 7
    23ca:	04 c0       	rjmp	.+8      	; 0x23d4 <do_rand+0x84>
    23cc:	61 50       	subi	r22, 0x01	; 1
    23ce:	70 40       	sbci	r23, 0x00	; 0
    23d0:	80 40       	sbci	r24, 0x00	; 0
    23d2:	90 48       	sbci	r25, 0x80	; 128
    23d4:	68 83       	st	Y, r22
    23d6:	79 83       	std	Y+1, r23	; 0x01
    23d8:	8a 83       	std	Y+2, r24	; 0x02
    23da:	9b 83       	std	Y+3, r25	; 0x03
    23dc:	9b 01       	movw	r18, r22
    23de:	3f 77       	andi	r19, 0x7F	; 127
    23e0:	c9 01       	movw	r24, r18
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	ea e0       	ldi	r30, 0x0A	; 10
    23e8:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <__epilogue_restores__+0x10>

000023ec <rand_r>:
    23ec:	0e 94 a8 11 	call	0x2350	; 0x2350 <do_rand>
    23f0:	08 95       	ret

000023f2 <rand>:
    23f2:	85 e5       	ldi	r24, 0x55	; 85
    23f4:	91 e0       	ldi	r25, 0x01	; 1
    23f6:	0e 94 a8 11 	call	0x2350	; 0x2350 <do_rand>
    23fa:	08 95       	ret

000023fc <srand>:
    23fc:	a0 e0       	ldi	r26, 0x00	; 0
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	80 93 55 01 	sts	0x0155, r24
    2404:	90 93 56 01 	sts	0x0156, r25
    2408:	a0 93 57 01 	sts	0x0157, r26
    240c:	b0 93 58 01 	sts	0x0158, r27
    2410:	08 95       	ret

00002412 <sprintf>:
    2412:	ae e0       	ldi	r26, 0x0E	; 14
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	ef e0       	ldi	r30, 0x0F	; 15
    2418:	f2 e1       	ldi	r31, 0x12	; 18
    241a:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__prologue_saves__+0x1c>
    241e:	0d 89       	ldd	r16, Y+21	; 0x15
    2420:	1e 89       	ldd	r17, Y+22	; 0x16
    2422:	86 e0       	ldi	r24, 0x06	; 6
    2424:	8c 83       	std	Y+4, r24	; 0x04
    2426:	1a 83       	std	Y+2, r17	; 0x02
    2428:	09 83       	std	Y+1, r16	; 0x01
    242a:	8f ef       	ldi	r24, 0xFF	; 255
    242c:	9f e7       	ldi	r25, 0x7F	; 127
    242e:	9e 83       	std	Y+6, r25	; 0x06
    2430:	8d 83       	std	Y+5, r24	; 0x05
    2432:	9e 01       	movw	r18, r28
    2434:	27 5e       	subi	r18, 0xE7	; 231
    2436:	3f 4f       	sbci	r19, 0xFF	; 255
    2438:	ce 01       	movw	r24, r28
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	6f 89       	ldd	r22, Y+23	; 0x17
    243e:	78 8d       	ldd	r23, Y+24	; 0x18
    2440:	a9 01       	movw	r20, r18
    2442:	0e 94 2d 12 	call	0x245a	; 0x245a <vfprintf>
    2446:	2f 81       	ldd	r18, Y+7	; 0x07
    2448:	38 85       	ldd	r19, Y+8	; 0x08
    244a:	02 0f       	add	r16, r18
    244c:	13 1f       	adc	r17, r19
    244e:	f8 01       	movw	r30, r16
    2450:	10 82       	st	Z, r1
    2452:	2e 96       	adiw	r28, 0x0e	; 14
    2454:	e4 e0       	ldi	r30, 0x04	; 4
    2456:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__epilogue_restores__+0x1c>

0000245a <vfprintf>:
    245a:	ab e0       	ldi	r26, 0x0B	; 11
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e3 e3       	ldi	r30, 0x33	; 51
    2460:	f2 e1       	ldi	r31, 0x12	; 18
    2462:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__prologue_saves__>
    2466:	3c 01       	movw	r6, r24
    2468:	2b 01       	movw	r4, r22
    246a:	5a 01       	movw	r10, r20
    246c:	fc 01       	movw	r30, r24
    246e:	17 82       	std	Z+7, r1	; 0x07
    2470:	16 82       	std	Z+6, r1	; 0x06
    2472:	83 81       	ldd	r24, Z+3	; 0x03
    2474:	81 fd       	sbrc	r24, 1
    2476:	03 c0       	rjmp	.+6      	; 0x247e <vfprintf+0x24>
    2478:	6f ef       	ldi	r22, 0xFF	; 255
    247a:	7f ef       	ldi	r23, 0xFF	; 255
    247c:	c6 c1       	rjmp	.+908    	; 0x280a <vfprintf+0x3b0>
    247e:	9a e0       	ldi	r25, 0x0A	; 10
    2480:	89 2e       	mov	r8, r25
    2482:	1e 01       	movw	r2, r28
    2484:	08 94       	sec
    2486:	21 1c       	adc	r2, r1
    2488:	31 1c       	adc	r3, r1
    248a:	f3 01       	movw	r30, r6
    248c:	23 81       	ldd	r18, Z+3	; 0x03
    248e:	f2 01       	movw	r30, r4
    2490:	23 fd       	sbrc	r18, 3
    2492:	85 91       	lpm	r24, Z+
    2494:	23 ff       	sbrs	r18, 3
    2496:	81 91       	ld	r24, Z+
    2498:	2f 01       	movw	r4, r30
    249a:	88 23       	and	r24, r24
    249c:	09 f4       	brne	.+2      	; 0x24a0 <vfprintf+0x46>
    249e:	b2 c1       	rjmp	.+868    	; 0x2804 <vfprintf+0x3aa>
    24a0:	85 32       	cpi	r24, 0x25	; 37
    24a2:	39 f4       	brne	.+14     	; 0x24b2 <vfprintf+0x58>
    24a4:	23 fd       	sbrc	r18, 3
    24a6:	85 91       	lpm	r24, Z+
    24a8:	23 ff       	sbrs	r18, 3
    24aa:	81 91       	ld	r24, Z+
    24ac:	2f 01       	movw	r4, r30
    24ae:	85 32       	cpi	r24, 0x25	; 37
    24b0:	29 f4       	brne	.+10     	; 0x24bc <vfprintf+0x62>
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	b3 01       	movw	r22, r6
    24b6:	0e 94 69 14 	call	0x28d2	; 0x28d2 <fputc>
    24ba:	e7 cf       	rjmp	.-50     	; 0x248a <vfprintf+0x30>
    24bc:	98 2f       	mov	r25, r24
    24be:	ff 24       	eor	r15, r15
    24c0:	ee 24       	eor	r14, r14
    24c2:	99 24       	eor	r9, r9
    24c4:	ff e1       	ldi	r31, 0x1F	; 31
    24c6:	ff 15       	cp	r31, r15
    24c8:	d0 f0       	brcs	.+52     	; 0x24fe <vfprintf+0xa4>
    24ca:	9b 32       	cpi	r25, 0x2B	; 43
    24cc:	69 f0       	breq	.+26     	; 0x24e8 <vfprintf+0x8e>
    24ce:	9c 32       	cpi	r25, 0x2C	; 44
    24d0:	28 f4       	brcc	.+10     	; 0x24dc <vfprintf+0x82>
    24d2:	90 32       	cpi	r25, 0x20	; 32
    24d4:	59 f0       	breq	.+22     	; 0x24ec <vfprintf+0x92>
    24d6:	93 32       	cpi	r25, 0x23	; 35
    24d8:	91 f4       	brne	.+36     	; 0x24fe <vfprintf+0xa4>
    24da:	0e c0       	rjmp	.+28     	; 0x24f8 <vfprintf+0x9e>
    24dc:	9d 32       	cpi	r25, 0x2D	; 45
    24de:	49 f0       	breq	.+18     	; 0x24f2 <vfprintf+0x98>
    24e0:	90 33       	cpi	r25, 0x30	; 48
    24e2:	69 f4       	brne	.+26     	; 0x24fe <vfprintf+0xa4>
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	24 c0       	rjmp	.+72     	; 0x2530 <vfprintf+0xd6>
    24e8:	52 e0       	ldi	r21, 0x02	; 2
    24ea:	f5 2a       	or	r15, r21
    24ec:	84 e0       	ldi	r24, 0x04	; 4
    24ee:	f8 2a       	or	r15, r24
    24f0:	28 c0       	rjmp	.+80     	; 0x2542 <vfprintf+0xe8>
    24f2:	98 e0       	ldi	r25, 0x08	; 8
    24f4:	f9 2a       	or	r15, r25
    24f6:	25 c0       	rjmp	.+74     	; 0x2542 <vfprintf+0xe8>
    24f8:	e0 e1       	ldi	r30, 0x10	; 16
    24fa:	fe 2a       	or	r15, r30
    24fc:	22 c0       	rjmp	.+68     	; 0x2542 <vfprintf+0xe8>
    24fe:	f7 fc       	sbrc	r15, 7
    2500:	29 c0       	rjmp	.+82     	; 0x2554 <vfprintf+0xfa>
    2502:	89 2f       	mov	r24, r25
    2504:	80 53       	subi	r24, 0x30	; 48
    2506:	8a 30       	cpi	r24, 0x0A	; 10
    2508:	70 f4       	brcc	.+28     	; 0x2526 <vfprintf+0xcc>
    250a:	f6 fe       	sbrs	r15, 6
    250c:	05 c0       	rjmp	.+10     	; 0x2518 <vfprintf+0xbe>
    250e:	98 9c       	mul	r9, r8
    2510:	90 2c       	mov	r9, r0
    2512:	11 24       	eor	r1, r1
    2514:	98 0e       	add	r9, r24
    2516:	15 c0       	rjmp	.+42     	; 0x2542 <vfprintf+0xe8>
    2518:	e8 9c       	mul	r14, r8
    251a:	e0 2c       	mov	r14, r0
    251c:	11 24       	eor	r1, r1
    251e:	e8 0e       	add	r14, r24
    2520:	f0 e2       	ldi	r31, 0x20	; 32
    2522:	ff 2a       	or	r15, r31
    2524:	0e c0       	rjmp	.+28     	; 0x2542 <vfprintf+0xe8>
    2526:	9e 32       	cpi	r25, 0x2E	; 46
    2528:	29 f4       	brne	.+10     	; 0x2534 <vfprintf+0xda>
    252a:	f6 fc       	sbrc	r15, 6
    252c:	6b c1       	rjmp	.+726    	; 0x2804 <vfprintf+0x3aa>
    252e:	40 e4       	ldi	r20, 0x40	; 64
    2530:	f4 2a       	or	r15, r20
    2532:	07 c0       	rjmp	.+14     	; 0x2542 <vfprintf+0xe8>
    2534:	9c 36       	cpi	r25, 0x6C	; 108
    2536:	19 f4       	brne	.+6      	; 0x253e <vfprintf+0xe4>
    2538:	50 e8       	ldi	r21, 0x80	; 128
    253a:	f5 2a       	or	r15, r21
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <vfprintf+0xe8>
    253e:	98 36       	cpi	r25, 0x68	; 104
    2540:	49 f4       	brne	.+18     	; 0x2554 <vfprintf+0xfa>
    2542:	f2 01       	movw	r30, r4
    2544:	23 fd       	sbrc	r18, 3
    2546:	95 91       	lpm	r25, Z+
    2548:	23 ff       	sbrs	r18, 3
    254a:	91 91       	ld	r25, Z+
    254c:	2f 01       	movw	r4, r30
    254e:	99 23       	and	r25, r25
    2550:	09 f0       	breq	.+2      	; 0x2554 <vfprintf+0xfa>
    2552:	b8 cf       	rjmp	.-144    	; 0x24c4 <vfprintf+0x6a>
    2554:	89 2f       	mov	r24, r25
    2556:	85 54       	subi	r24, 0x45	; 69
    2558:	83 30       	cpi	r24, 0x03	; 3
    255a:	18 f0       	brcs	.+6      	; 0x2562 <vfprintf+0x108>
    255c:	80 52       	subi	r24, 0x20	; 32
    255e:	83 30       	cpi	r24, 0x03	; 3
    2560:	38 f4       	brcc	.+14     	; 0x2570 <vfprintf+0x116>
    2562:	44 e0       	ldi	r20, 0x04	; 4
    2564:	50 e0       	ldi	r21, 0x00	; 0
    2566:	a4 0e       	add	r10, r20
    2568:	b5 1e       	adc	r11, r21
    256a:	5f e3       	ldi	r21, 0x3F	; 63
    256c:	59 83       	std	Y+1, r21	; 0x01
    256e:	0f c0       	rjmp	.+30     	; 0x258e <vfprintf+0x134>
    2570:	93 36       	cpi	r25, 0x63	; 99
    2572:	31 f0       	breq	.+12     	; 0x2580 <vfprintf+0x126>
    2574:	93 37       	cpi	r25, 0x73	; 115
    2576:	79 f0       	breq	.+30     	; 0x2596 <vfprintf+0x13c>
    2578:	93 35       	cpi	r25, 0x53	; 83
    257a:	09 f0       	breq	.+2      	; 0x257e <vfprintf+0x124>
    257c:	56 c0       	rjmp	.+172    	; 0x262a <vfprintf+0x1d0>
    257e:	20 c0       	rjmp	.+64     	; 0x25c0 <vfprintf+0x166>
    2580:	f5 01       	movw	r30, r10
    2582:	80 81       	ld	r24, Z
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	42 e0       	ldi	r20, 0x02	; 2
    2588:	50 e0       	ldi	r21, 0x00	; 0
    258a:	a4 0e       	add	r10, r20
    258c:	b5 1e       	adc	r11, r21
    258e:	61 01       	movw	r12, r2
    2590:	01 e0       	ldi	r16, 0x01	; 1
    2592:	10 e0       	ldi	r17, 0x00	; 0
    2594:	12 c0       	rjmp	.+36     	; 0x25ba <vfprintf+0x160>
    2596:	f5 01       	movw	r30, r10
    2598:	c0 80       	ld	r12, Z
    259a:	d1 80       	ldd	r13, Z+1	; 0x01
    259c:	f6 fc       	sbrc	r15, 6
    259e:	03 c0       	rjmp	.+6      	; 0x25a6 <vfprintf+0x14c>
    25a0:	6f ef       	ldi	r22, 0xFF	; 255
    25a2:	7f ef       	ldi	r23, 0xFF	; 255
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <vfprintf+0x150>
    25a6:	69 2d       	mov	r22, r9
    25a8:	70 e0       	ldi	r23, 0x00	; 0
    25aa:	42 e0       	ldi	r20, 0x02	; 2
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	a4 0e       	add	r10, r20
    25b0:	b5 1e       	adc	r11, r21
    25b2:	c6 01       	movw	r24, r12
    25b4:	0e 94 5e 14 	call	0x28bc	; 0x28bc <strnlen>
    25b8:	8c 01       	movw	r16, r24
    25ba:	5f e7       	ldi	r21, 0x7F	; 127
    25bc:	f5 22       	and	r15, r21
    25be:	14 c0       	rjmp	.+40     	; 0x25e8 <vfprintf+0x18e>
    25c0:	f5 01       	movw	r30, r10
    25c2:	c0 80       	ld	r12, Z
    25c4:	d1 80       	ldd	r13, Z+1	; 0x01
    25c6:	f6 fc       	sbrc	r15, 6
    25c8:	03 c0       	rjmp	.+6      	; 0x25d0 <vfprintf+0x176>
    25ca:	6f ef       	ldi	r22, 0xFF	; 255
    25cc:	7f ef       	ldi	r23, 0xFF	; 255
    25ce:	02 c0       	rjmp	.+4      	; 0x25d4 <vfprintf+0x17a>
    25d0:	69 2d       	mov	r22, r9
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	42 e0       	ldi	r20, 0x02	; 2
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	a4 0e       	add	r10, r20
    25da:	b5 1e       	adc	r11, r21
    25dc:	c6 01       	movw	r24, r12
    25de:	0e 94 53 14 	call	0x28a6	; 0x28a6 <strnlen_P>
    25e2:	8c 01       	movw	r16, r24
    25e4:	50 e8       	ldi	r21, 0x80	; 128
    25e6:	f5 2a       	or	r15, r21
    25e8:	f3 fe       	sbrs	r15, 3
    25ea:	07 c0       	rjmp	.+14     	; 0x25fa <vfprintf+0x1a0>
    25ec:	1a c0       	rjmp	.+52     	; 0x2622 <vfprintf+0x1c8>
    25ee:	80 e2       	ldi	r24, 0x20	; 32
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	b3 01       	movw	r22, r6
    25f4:	0e 94 69 14 	call	0x28d2	; 0x28d2 <fputc>
    25f8:	ea 94       	dec	r14
    25fa:	8e 2d       	mov	r24, r14
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	08 17       	cp	r16, r24
    2600:	19 07       	cpc	r17, r25
    2602:	a8 f3       	brcs	.-22     	; 0x25ee <vfprintf+0x194>
    2604:	0e c0       	rjmp	.+28     	; 0x2622 <vfprintf+0x1c8>
    2606:	f6 01       	movw	r30, r12
    2608:	f7 fc       	sbrc	r15, 7
    260a:	85 91       	lpm	r24, Z+
    260c:	f7 fe       	sbrs	r15, 7
    260e:	81 91       	ld	r24, Z+
    2610:	6f 01       	movw	r12, r30
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	b3 01       	movw	r22, r6
    2616:	0e 94 69 14 	call	0x28d2	; 0x28d2 <fputc>
    261a:	e1 10       	cpse	r14, r1
    261c:	ea 94       	dec	r14
    261e:	01 50       	subi	r16, 0x01	; 1
    2620:	10 40       	sbci	r17, 0x00	; 0
    2622:	01 15       	cp	r16, r1
    2624:	11 05       	cpc	r17, r1
    2626:	79 f7       	brne	.-34     	; 0x2606 <vfprintf+0x1ac>
    2628:	ea c0       	rjmp	.+468    	; 0x27fe <vfprintf+0x3a4>
    262a:	94 36       	cpi	r25, 0x64	; 100
    262c:	11 f0       	breq	.+4      	; 0x2632 <vfprintf+0x1d8>
    262e:	99 36       	cpi	r25, 0x69	; 105
    2630:	69 f5       	brne	.+90     	; 0x268c <vfprintf+0x232>
    2632:	f7 fe       	sbrs	r15, 7
    2634:	08 c0       	rjmp	.+16     	; 0x2646 <vfprintf+0x1ec>
    2636:	f5 01       	movw	r30, r10
    2638:	20 81       	ld	r18, Z
    263a:	31 81       	ldd	r19, Z+1	; 0x01
    263c:	42 81       	ldd	r20, Z+2	; 0x02
    263e:	53 81       	ldd	r21, Z+3	; 0x03
    2640:	84 e0       	ldi	r24, 0x04	; 4
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	0a c0       	rjmp	.+20     	; 0x265a <vfprintf+0x200>
    2646:	f5 01       	movw	r30, r10
    2648:	80 81       	ld	r24, Z
    264a:	91 81       	ldd	r25, Z+1	; 0x01
    264c:	9c 01       	movw	r18, r24
    264e:	44 27       	eor	r20, r20
    2650:	37 fd       	sbrc	r19, 7
    2652:	40 95       	com	r20
    2654:	54 2f       	mov	r21, r20
    2656:	82 e0       	ldi	r24, 0x02	; 2
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	a8 0e       	add	r10, r24
    265c:	b9 1e       	adc	r11, r25
    265e:	9f e6       	ldi	r25, 0x6F	; 111
    2660:	f9 22       	and	r15, r25
    2662:	57 ff       	sbrs	r21, 7
    2664:	09 c0       	rjmp	.+18     	; 0x2678 <vfprintf+0x21e>
    2666:	50 95       	com	r21
    2668:	40 95       	com	r20
    266a:	30 95       	com	r19
    266c:	21 95       	neg	r18
    266e:	3f 4f       	sbci	r19, 0xFF	; 255
    2670:	4f 4f       	sbci	r20, 0xFF	; 255
    2672:	5f 4f       	sbci	r21, 0xFF	; 255
    2674:	e0 e8       	ldi	r30, 0x80	; 128
    2676:	fe 2a       	or	r15, r30
    2678:	ca 01       	movw	r24, r20
    267a:	b9 01       	movw	r22, r18
    267c:	a1 01       	movw	r20, r2
    267e:	2a e0       	ldi	r18, 0x0A	; 10
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	0e 94 95 14 	call	0x292a	; 0x292a <__ultoa_invert>
    2686:	d8 2e       	mov	r13, r24
    2688:	d2 18       	sub	r13, r2
    268a:	40 c0       	rjmp	.+128    	; 0x270c <vfprintf+0x2b2>
    268c:	95 37       	cpi	r25, 0x75	; 117
    268e:	29 f4       	brne	.+10     	; 0x269a <vfprintf+0x240>
    2690:	1f 2d       	mov	r17, r15
    2692:	1f 7e       	andi	r17, 0xEF	; 239
    2694:	2a e0       	ldi	r18, 0x0A	; 10
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	1d c0       	rjmp	.+58     	; 0x26d4 <vfprintf+0x27a>
    269a:	1f 2d       	mov	r17, r15
    269c:	19 7f       	andi	r17, 0xF9	; 249
    269e:	9f 36       	cpi	r25, 0x6F	; 111
    26a0:	61 f0       	breq	.+24     	; 0x26ba <vfprintf+0x260>
    26a2:	90 37       	cpi	r25, 0x70	; 112
    26a4:	20 f4       	brcc	.+8      	; 0x26ae <vfprintf+0x254>
    26a6:	98 35       	cpi	r25, 0x58	; 88
    26a8:	09 f0       	breq	.+2      	; 0x26ac <vfprintf+0x252>
    26aa:	ac c0       	rjmp	.+344    	; 0x2804 <vfprintf+0x3aa>
    26ac:	0f c0       	rjmp	.+30     	; 0x26cc <vfprintf+0x272>
    26ae:	90 37       	cpi	r25, 0x70	; 112
    26b0:	39 f0       	breq	.+14     	; 0x26c0 <vfprintf+0x266>
    26b2:	98 37       	cpi	r25, 0x78	; 120
    26b4:	09 f0       	breq	.+2      	; 0x26b8 <vfprintf+0x25e>
    26b6:	a6 c0       	rjmp	.+332    	; 0x2804 <vfprintf+0x3aa>
    26b8:	04 c0       	rjmp	.+8      	; 0x26c2 <vfprintf+0x268>
    26ba:	28 e0       	ldi	r18, 0x08	; 8
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	0a c0       	rjmp	.+20     	; 0x26d4 <vfprintf+0x27a>
    26c0:	10 61       	ori	r17, 0x10	; 16
    26c2:	14 fd       	sbrc	r17, 4
    26c4:	14 60       	ori	r17, 0x04	; 4
    26c6:	20 e1       	ldi	r18, 0x10	; 16
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	04 c0       	rjmp	.+8      	; 0x26d4 <vfprintf+0x27a>
    26cc:	14 fd       	sbrc	r17, 4
    26ce:	16 60       	ori	r17, 0x06	; 6
    26d0:	20 e1       	ldi	r18, 0x10	; 16
    26d2:	32 e0       	ldi	r19, 0x02	; 2
    26d4:	17 ff       	sbrs	r17, 7
    26d6:	08 c0       	rjmp	.+16     	; 0x26e8 <vfprintf+0x28e>
    26d8:	f5 01       	movw	r30, r10
    26da:	60 81       	ld	r22, Z
    26dc:	71 81       	ldd	r23, Z+1	; 0x01
    26de:	82 81       	ldd	r24, Z+2	; 0x02
    26e0:	93 81       	ldd	r25, Z+3	; 0x03
    26e2:	44 e0       	ldi	r20, 0x04	; 4
    26e4:	50 e0       	ldi	r21, 0x00	; 0
    26e6:	08 c0       	rjmp	.+16     	; 0x26f8 <vfprintf+0x29e>
    26e8:	f5 01       	movw	r30, r10
    26ea:	80 81       	ld	r24, Z
    26ec:	91 81       	ldd	r25, Z+1	; 0x01
    26ee:	bc 01       	movw	r22, r24
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	42 e0       	ldi	r20, 0x02	; 2
    26f6:	50 e0       	ldi	r21, 0x00	; 0
    26f8:	a4 0e       	add	r10, r20
    26fa:	b5 1e       	adc	r11, r21
    26fc:	a1 01       	movw	r20, r2
    26fe:	0e 94 95 14 	call	0x292a	; 0x292a <__ultoa_invert>
    2702:	d8 2e       	mov	r13, r24
    2704:	d2 18       	sub	r13, r2
    2706:	8f e7       	ldi	r24, 0x7F	; 127
    2708:	f8 2e       	mov	r15, r24
    270a:	f1 22       	and	r15, r17
    270c:	f6 fe       	sbrs	r15, 6
    270e:	0b c0       	rjmp	.+22     	; 0x2726 <vfprintf+0x2cc>
    2710:	5e ef       	ldi	r21, 0xFE	; 254
    2712:	f5 22       	and	r15, r21
    2714:	d9 14       	cp	r13, r9
    2716:	38 f4       	brcc	.+14     	; 0x2726 <vfprintf+0x2cc>
    2718:	f4 fe       	sbrs	r15, 4
    271a:	07 c0       	rjmp	.+14     	; 0x272a <vfprintf+0x2d0>
    271c:	f2 fc       	sbrc	r15, 2
    271e:	05 c0       	rjmp	.+10     	; 0x272a <vfprintf+0x2d0>
    2720:	8f ee       	ldi	r24, 0xEF	; 239
    2722:	f8 22       	and	r15, r24
    2724:	02 c0       	rjmp	.+4      	; 0x272a <vfprintf+0x2d0>
    2726:	1d 2d       	mov	r17, r13
    2728:	01 c0       	rjmp	.+2      	; 0x272c <vfprintf+0x2d2>
    272a:	19 2d       	mov	r17, r9
    272c:	f4 fe       	sbrs	r15, 4
    272e:	0d c0       	rjmp	.+26     	; 0x274a <vfprintf+0x2f0>
    2730:	fe 01       	movw	r30, r28
    2732:	ed 0d       	add	r30, r13
    2734:	f1 1d       	adc	r31, r1
    2736:	80 81       	ld	r24, Z
    2738:	80 33       	cpi	r24, 0x30	; 48
    273a:	19 f4       	brne	.+6      	; 0x2742 <vfprintf+0x2e8>
    273c:	99 ee       	ldi	r25, 0xE9	; 233
    273e:	f9 22       	and	r15, r25
    2740:	08 c0       	rjmp	.+16     	; 0x2752 <vfprintf+0x2f8>
    2742:	1f 5f       	subi	r17, 0xFF	; 255
    2744:	f2 fe       	sbrs	r15, 2
    2746:	05 c0       	rjmp	.+10     	; 0x2752 <vfprintf+0x2f8>
    2748:	03 c0       	rjmp	.+6      	; 0x2750 <vfprintf+0x2f6>
    274a:	8f 2d       	mov	r24, r15
    274c:	86 78       	andi	r24, 0x86	; 134
    274e:	09 f0       	breq	.+2      	; 0x2752 <vfprintf+0x2f8>
    2750:	1f 5f       	subi	r17, 0xFF	; 255
    2752:	0f 2d       	mov	r16, r15
    2754:	f3 fc       	sbrc	r15, 3
    2756:	14 c0       	rjmp	.+40     	; 0x2780 <vfprintf+0x326>
    2758:	f0 fe       	sbrs	r15, 0
    275a:	0f c0       	rjmp	.+30     	; 0x277a <vfprintf+0x320>
    275c:	1e 15       	cp	r17, r14
    275e:	10 f0       	brcs	.+4      	; 0x2764 <vfprintf+0x30a>
    2760:	9d 2c       	mov	r9, r13
    2762:	0b c0       	rjmp	.+22     	; 0x277a <vfprintf+0x320>
    2764:	9d 2c       	mov	r9, r13
    2766:	9e 0c       	add	r9, r14
    2768:	91 1a       	sub	r9, r17
    276a:	1e 2d       	mov	r17, r14
    276c:	06 c0       	rjmp	.+12     	; 0x277a <vfprintf+0x320>
    276e:	80 e2       	ldi	r24, 0x20	; 32
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	b3 01       	movw	r22, r6
    2774:	0e 94 69 14 	call	0x28d2	; 0x28d2 <fputc>
    2778:	1f 5f       	subi	r17, 0xFF	; 255
    277a:	1e 15       	cp	r17, r14
    277c:	c0 f3       	brcs	.-16     	; 0x276e <vfprintf+0x314>
    277e:	04 c0       	rjmp	.+8      	; 0x2788 <vfprintf+0x32e>
    2780:	1e 15       	cp	r17, r14
    2782:	10 f4       	brcc	.+4      	; 0x2788 <vfprintf+0x32e>
    2784:	e1 1a       	sub	r14, r17
    2786:	01 c0       	rjmp	.+2      	; 0x278a <vfprintf+0x330>
    2788:	ee 24       	eor	r14, r14
    278a:	04 ff       	sbrs	r16, 4
    278c:	0f c0       	rjmp	.+30     	; 0x27ac <vfprintf+0x352>
    278e:	80 e3       	ldi	r24, 0x30	; 48
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	b3 01       	movw	r22, r6
    2794:	0e 94 69 14 	call	0x28d2	; 0x28d2 <fputc>
    2798:	02 ff       	sbrs	r16, 2
    279a:	1d c0       	rjmp	.+58     	; 0x27d6 <vfprintf+0x37c>
    279c:	01 fd       	sbrc	r16, 1
    279e:	03 c0       	rjmp	.+6      	; 0x27a6 <vfprintf+0x34c>
    27a0:	88 e7       	ldi	r24, 0x78	; 120
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	0e c0       	rjmp	.+28     	; 0x27c2 <vfprintf+0x368>
    27a6:	88 e5       	ldi	r24, 0x58	; 88
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0b c0       	rjmp	.+22     	; 0x27c2 <vfprintf+0x368>
    27ac:	80 2f       	mov	r24, r16
    27ae:	86 78       	andi	r24, 0x86	; 134
    27b0:	91 f0       	breq	.+36     	; 0x27d6 <vfprintf+0x37c>
    27b2:	01 ff       	sbrs	r16, 1
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <vfprintf+0x360>
    27b6:	8b e2       	ldi	r24, 0x2B	; 43
    27b8:	01 c0       	rjmp	.+2      	; 0x27bc <vfprintf+0x362>
    27ba:	80 e2       	ldi	r24, 0x20	; 32
    27bc:	f7 fc       	sbrc	r15, 7
    27be:	8d e2       	ldi	r24, 0x2D	; 45
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	b3 01       	movw	r22, r6
    27c4:	0e 94 69 14 	call	0x28d2	; 0x28d2 <fputc>
    27c8:	06 c0       	rjmp	.+12     	; 0x27d6 <vfprintf+0x37c>
    27ca:	80 e3       	ldi	r24, 0x30	; 48
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	b3 01       	movw	r22, r6
    27d0:	0e 94 69 14 	call	0x28d2	; 0x28d2 <fputc>
    27d4:	9a 94       	dec	r9
    27d6:	d9 14       	cp	r13, r9
    27d8:	c0 f3       	brcs	.-16     	; 0x27ca <vfprintf+0x370>
    27da:	da 94       	dec	r13
    27dc:	f1 01       	movw	r30, r2
    27de:	ed 0d       	add	r30, r13
    27e0:	f1 1d       	adc	r31, r1
    27e2:	80 81       	ld	r24, Z
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	b3 01       	movw	r22, r6
    27e8:	0e 94 69 14 	call	0x28d2	; 0x28d2 <fputc>
    27ec:	dd 20       	and	r13, r13
    27ee:	a9 f7       	brne	.-22     	; 0x27da <vfprintf+0x380>
    27f0:	06 c0       	rjmp	.+12     	; 0x27fe <vfprintf+0x3a4>
    27f2:	80 e2       	ldi	r24, 0x20	; 32
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	b3 01       	movw	r22, r6
    27f8:	0e 94 69 14 	call	0x28d2	; 0x28d2 <fputc>
    27fc:	ea 94       	dec	r14
    27fe:	ee 20       	and	r14, r14
    2800:	c1 f7       	brne	.-16     	; 0x27f2 <vfprintf+0x398>
    2802:	43 ce       	rjmp	.-890    	; 0x248a <vfprintf+0x30>
    2804:	f3 01       	movw	r30, r6
    2806:	66 81       	ldd	r22, Z+6	; 0x06
    2808:	77 81       	ldd	r23, Z+7	; 0x07
    280a:	cb 01       	movw	r24, r22
    280c:	2b 96       	adiw	r28, 0x0b	; 11
    280e:	e2 e1       	ldi	r30, 0x12	; 18
    2810:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__epilogue_restores__>

00002814 <__eerd_block_m328p>:
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22

00002818 <__eerd_blraw_m328p>:
    2818:	fc 01       	movw	r30, r24
    281a:	f9 99       	sbic	0x1f, 1	; 31
    281c:	fe cf       	rjmp	.-4      	; 0x281a <__eerd_blraw_m328p+0x2>
    281e:	06 c0       	rjmp	.+12     	; 0x282c <__eerd_blraw_m328p+0x14>
    2820:	f2 bd       	out	0x22, r31	; 34
    2822:	e1 bd       	out	0x21, r30	; 33
    2824:	f8 9a       	sbi	0x1f, 0	; 31
    2826:	31 96       	adiw	r30, 0x01	; 1
    2828:	00 b4       	in	r0, 0x20	; 32
    282a:	0d 92       	st	X+, r0
    282c:	41 50       	subi	r20, 0x01	; 1
    282e:	50 40       	sbci	r21, 0x00	; 0
    2830:	b8 f7       	brcc	.-18     	; 0x2820 <__eerd_blraw_m328p+0x8>
    2832:	08 95       	ret

00002834 <__eerd_byte_m328p>:
    2834:	f9 99       	sbic	0x1f, 1	; 31
    2836:	fe cf       	rjmp	.-4      	; 0x2834 <__eerd_byte_m328p>
    2838:	92 bd       	out	0x22, r25	; 34
    283a:	81 bd       	out	0x21, r24	; 33
    283c:	f8 9a       	sbi	0x1f, 0	; 31
    283e:	99 27       	eor	r25, r25
    2840:	80 b5       	in	r24, 0x20	; 32
    2842:	08 95       	ret

00002844 <__eerd_dword_m328p>:
    2844:	a6 e1       	ldi	r26, 0x16	; 22
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	44 e0       	ldi	r20, 0x04	; 4
    284a:	50 e0       	ldi	r21, 0x00	; 0
    284c:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__eerd_blraw_m328p>

00002850 <__eerd_word_m328p>:
    2850:	a8 e1       	ldi	r26, 0x18	; 24
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	42 e0       	ldi	r20, 0x02	; 2
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__eerd_blraw_m328p>

0000285c <__eewr_block_m328p>:
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	03 c0       	rjmp	.+6      	; 0x2868 <__eewr_block_m328p+0xc>
    2862:	2d 91       	ld	r18, X+
    2864:	0e 94 39 14 	call	0x2872	; 0x2872 <__eewr_r18_m328p>
    2868:	41 50       	subi	r20, 0x01	; 1
    286a:	50 40       	sbci	r21, 0x00	; 0
    286c:	d0 f7       	brcc	.-12     	; 0x2862 <__eewr_block_m328p+0x6>
    286e:	08 95       	ret

00002870 <__eewr_byte_m328p>:
    2870:	26 2f       	mov	r18, r22

00002872 <__eewr_r18_m328p>:
    2872:	f9 99       	sbic	0x1f, 1	; 31
    2874:	fe cf       	rjmp	.-4      	; 0x2872 <__eewr_r18_m328p>
    2876:	1f ba       	out	0x1f, r1	; 31
    2878:	92 bd       	out	0x22, r25	; 34
    287a:	81 bd       	out	0x21, r24	; 33
    287c:	20 bd       	out	0x20, r18	; 32
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	fa 9a       	sbi	0x1f, 2	; 31
    2884:	f9 9a       	sbi	0x1f, 1	; 31
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	08 95       	ret

0000288c <__eewr_dword_m328p>:
    288c:	24 2f       	mov	r18, r20
    288e:	0e 94 39 14 	call	0x2872	; 0x2872 <__eewr_r18_m328p>
    2892:	25 2f       	mov	r18, r21
    2894:	0e 94 39 14 	call	0x2872	; 0x2872 <__eewr_r18_m328p>
    2898:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__eewr_word_m328p>

0000289c <__eewr_word_m328p>:
    289c:	0e 94 38 14 	call	0x2870	; 0x2870 <__eewr_byte_m328p>
    28a0:	27 2f       	mov	r18, r23
    28a2:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__eewr_r18_m328p>

000028a6 <strnlen_P>:
    28a6:	fc 01       	movw	r30, r24
    28a8:	05 90       	lpm	r0, Z+
    28aa:	61 50       	subi	r22, 0x01	; 1
    28ac:	70 40       	sbci	r23, 0x00	; 0
    28ae:	01 10       	cpse	r0, r1
    28b0:	d8 f7       	brcc	.-10     	; 0x28a8 <strnlen_P+0x2>
    28b2:	80 95       	com	r24
    28b4:	90 95       	com	r25
    28b6:	8e 0f       	add	r24, r30
    28b8:	9f 1f       	adc	r25, r31
    28ba:	08 95       	ret

000028bc <strnlen>:
    28bc:	fc 01       	movw	r30, r24
    28be:	61 50       	subi	r22, 0x01	; 1
    28c0:	70 40       	sbci	r23, 0x00	; 0
    28c2:	01 90       	ld	r0, Z+
    28c4:	01 10       	cpse	r0, r1
    28c6:	d8 f7       	brcc	.-10     	; 0x28be <strnlen+0x2>
    28c8:	80 95       	com	r24
    28ca:	90 95       	com	r25
    28cc:	8e 0f       	add	r24, r30
    28ce:	9f 1f       	adc	r25, r31
    28d0:	08 95       	ret

000028d2 <fputc>:
    28d2:	0f 93       	push	r16
    28d4:	1f 93       	push	r17
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	8c 01       	movw	r16, r24
    28dc:	eb 01       	movw	r28, r22
    28de:	8b 81       	ldd	r24, Y+3	; 0x03
    28e0:	81 ff       	sbrs	r24, 1
    28e2:	1b c0       	rjmp	.+54     	; 0x291a <fputc+0x48>
    28e4:	82 ff       	sbrs	r24, 2
    28e6:	0d c0       	rjmp	.+26     	; 0x2902 <fputc+0x30>
    28e8:	2e 81       	ldd	r18, Y+6	; 0x06
    28ea:	3f 81       	ldd	r19, Y+7	; 0x07
    28ec:	8c 81       	ldd	r24, Y+4	; 0x04
    28ee:	9d 81       	ldd	r25, Y+5	; 0x05
    28f0:	28 17       	cp	r18, r24
    28f2:	39 07       	cpc	r19, r25
    28f4:	64 f4       	brge	.+24     	; 0x290e <fputc+0x3c>
    28f6:	e8 81       	ld	r30, Y
    28f8:	f9 81       	ldd	r31, Y+1	; 0x01
    28fa:	01 93       	st	Z+, r16
    28fc:	f9 83       	std	Y+1, r31	; 0x01
    28fe:	e8 83       	st	Y, r30
    2900:	06 c0       	rjmp	.+12     	; 0x290e <fputc+0x3c>
    2902:	e8 85       	ldd	r30, Y+8	; 0x08
    2904:	f9 85       	ldd	r31, Y+9	; 0x09
    2906:	80 2f       	mov	r24, r16
    2908:	09 95       	icall
    290a:	89 2b       	or	r24, r25
    290c:	31 f4       	brne	.+12     	; 0x291a <fputc+0x48>
    290e:	8e 81       	ldd	r24, Y+6	; 0x06
    2910:	9f 81       	ldd	r25, Y+7	; 0x07
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	9f 83       	std	Y+7, r25	; 0x07
    2916:	8e 83       	std	Y+6, r24	; 0x06
    2918:	02 c0       	rjmp	.+4      	; 0x291e <fputc+0x4c>
    291a:	0f ef       	ldi	r16, 0xFF	; 255
    291c:	1f ef       	ldi	r17, 0xFF	; 255
    291e:	c8 01       	movw	r24, r16
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	08 95       	ret

0000292a <__ultoa_invert>:
    292a:	fa 01       	movw	r30, r20
    292c:	aa 27       	eor	r26, r26
    292e:	28 30       	cpi	r18, 0x08	; 8
    2930:	51 f1       	breq	.+84     	; 0x2986 <__ultoa_invert+0x5c>
    2932:	20 31       	cpi	r18, 0x10	; 16
    2934:	81 f1       	breq	.+96     	; 0x2996 <__ultoa_invert+0x6c>
    2936:	e8 94       	clt
    2938:	6f 93       	push	r22
    293a:	6e 7f       	andi	r22, 0xFE	; 254
    293c:	6e 5f       	subi	r22, 0xFE	; 254
    293e:	7f 4f       	sbci	r23, 0xFF	; 255
    2940:	8f 4f       	sbci	r24, 0xFF	; 255
    2942:	9f 4f       	sbci	r25, 0xFF	; 255
    2944:	af 4f       	sbci	r26, 0xFF	; 255
    2946:	b1 e0       	ldi	r27, 0x01	; 1
    2948:	3e d0       	rcall	.+124    	; 0x29c6 <__ultoa_invert+0x9c>
    294a:	b4 e0       	ldi	r27, 0x04	; 4
    294c:	3c d0       	rcall	.+120    	; 0x29c6 <__ultoa_invert+0x9c>
    294e:	67 0f       	add	r22, r23
    2950:	78 1f       	adc	r23, r24
    2952:	89 1f       	adc	r24, r25
    2954:	9a 1f       	adc	r25, r26
    2956:	a1 1d       	adc	r26, r1
    2958:	68 0f       	add	r22, r24
    295a:	79 1f       	adc	r23, r25
    295c:	8a 1f       	adc	r24, r26
    295e:	91 1d       	adc	r25, r1
    2960:	a1 1d       	adc	r26, r1
    2962:	6a 0f       	add	r22, r26
    2964:	71 1d       	adc	r23, r1
    2966:	81 1d       	adc	r24, r1
    2968:	91 1d       	adc	r25, r1
    296a:	a1 1d       	adc	r26, r1
    296c:	20 d0       	rcall	.+64     	; 0x29ae <__ultoa_invert+0x84>
    296e:	09 f4       	brne	.+2      	; 0x2972 <__ultoa_invert+0x48>
    2970:	68 94       	set
    2972:	3f 91       	pop	r19
    2974:	2a e0       	ldi	r18, 0x0A	; 10
    2976:	26 9f       	mul	r18, r22
    2978:	11 24       	eor	r1, r1
    297a:	30 19       	sub	r19, r0
    297c:	30 5d       	subi	r19, 0xD0	; 208
    297e:	31 93       	st	Z+, r19
    2980:	de f6       	brtc	.-74     	; 0x2938 <__ultoa_invert+0xe>
    2982:	cf 01       	movw	r24, r30
    2984:	08 95       	ret
    2986:	46 2f       	mov	r20, r22
    2988:	47 70       	andi	r20, 0x07	; 7
    298a:	40 5d       	subi	r20, 0xD0	; 208
    298c:	41 93       	st	Z+, r20
    298e:	b3 e0       	ldi	r27, 0x03	; 3
    2990:	0f d0       	rcall	.+30     	; 0x29b0 <__ultoa_invert+0x86>
    2992:	c9 f7       	brne	.-14     	; 0x2986 <__ultoa_invert+0x5c>
    2994:	f6 cf       	rjmp	.-20     	; 0x2982 <__ultoa_invert+0x58>
    2996:	46 2f       	mov	r20, r22
    2998:	4f 70       	andi	r20, 0x0F	; 15
    299a:	40 5d       	subi	r20, 0xD0	; 208
    299c:	4a 33       	cpi	r20, 0x3A	; 58
    299e:	18 f0       	brcs	.+6      	; 0x29a6 <__ultoa_invert+0x7c>
    29a0:	49 5d       	subi	r20, 0xD9	; 217
    29a2:	31 fd       	sbrc	r19, 1
    29a4:	40 52       	subi	r20, 0x20	; 32
    29a6:	41 93       	st	Z+, r20
    29a8:	02 d0       	rcall	.+4      	; 0x29ae <__ultoa_invert+0x84>
    29aa:	a9 f7       	brne	.-22     	; 0x2996 <__ultoa_invert+0x6c>
    29ac:	ea cf       	rjmp	.-44     	; 0x2982 <__ultoa_invert+0x58>
    29ae:	b4 e0       	ldi	r27, 0x04	; 4
    29b0:	a6 95       	lsr	r26
    29b2:	97 95       	ror	r25
    29b4:	87 95       	ror	r24
    29b6:	77 95       	ror	r23
    29b8:	67 95       	ror	r22
    29ba:	ba 95       	dec	r27
    29bc:	c9 f7       	brne	.-14     	; 0x29b0 <__ultoa_invert+0x86>
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	61 05       	cpc	r22, r1
    29c2:	71 05       	cpc	r23, r1
    29c4:	08 95       	ret
    29c6:	9b 01       	movw	r18, r22
    29c8:	ac 01       	movw	r20, r24
    29ca:	0a 2e       	mov	r0, r26
    29cc:	06 94       	lsr	r0
    29ce:	57 95       	ror	r21
    29d0:	47 95       	ror	r20
    29d2:	37 95       	ror	r19
    29d4:	27 95       	ror	r18
    29d6:	ba 95       	dec	r27
    29d8:	c9 f7       	brne	.-14     	; 0x29cc <__ultoa_invert+0xa2>
    29da:	62 0f       	add	r22, r18
    29dc:	73 1f       	adc	r23, r19
    29de:	84 1f       	adc	r24, r20
    29e0:	95 1f       	adc	r25, r21
    29e2:	a0 1d       	adc	r26, r0
    29e4:	08 95       	ret

000029e6 <__mulsi3>:
    29e6:	62 9f       	mul	r22, r18
    29e8:	d0 01       	movw	r26, r0
    29ea:	73 9f       	mul	r23, r19
    29ec:	f0 01       	movw	r30, r0
    29ee:	82 9f       	mul	r24, r18
    29f0:	e0 0d       	add	r30, r0
    29f2:	f1 1d       	adc	r31, r1
    29f4:	64 9f       	mul	r22, r20
    29f6:	e0 0d       	add	r30, r0
    29f8:	f1 1d       	adc	r31, r1
    29fa:	92 9f       	mul	r25, r18
    29fc:	f0 0d       	add	r31, r0
    29fe:	83 9f       	mul	r24, r19
    2a00:	f0 0d       	add	r31, r0
    2a02:	74 9f       	mul	r23, r20
    2a04:	f0 0d       	add	r31, r0
    2a06:	65 9f       	mul	r22, r21
    2a08:	f0 0d       	add	r31, r0
    2a0a:	99 27       	eor	r25, r25
    2a0c:	72 9f       	mul	r23, r18
    2a0e:	b0 0d       	add	r27, r0
    2a10:	e1 1d       	adc	r30, r1
    2a12:	f9 1f       	adc	r31, r25
    2a14:	63 9f       	mul	r22, r19
    2a16:	b0 0d       	add	r27, r0
    2a18:	e1 1d       	adc	r30, r1
    2a1a:	f9 1f       	adc	r31, r25
    2a1c:	bd 01       	movw	r22, r26
    2a1e:	cf 01       	movw	r24, r30
    2a20:	11 24       	eor	r1, r1
    2a22:	08 95       	ret

00002a24 <__divmodsi4>:
    2a24:	97 fb       	bst	r25, 7
    2a26:	09 2e       	mov	r0, r25
    2a28:	05 26       	eor	r0, r21
    2a2a:	0e d0       	rcall	.+28     	; 0x2a48 <__divmodsi4_neg1>
    2a2c:	57 fd       	sbrc	r21, 7
    2a2e:	04 d0       	rcall	.+8      	; 0x2a38 <__divmodsi4_neg2>
    2a30:	4b d0       	rcall	.+150    	; 0x2ac8 <__udivmodsi4>
    2a32:	0a d0       	rcall	.+20     	; 0x2a48 <__divmodsi4_neg1>
    2a34:	00 1c       	adc	r0, r0
    2a36:	38 f4       	brcc	.+14     	; 0x2a46 <__divmodsi4_exit>

00002a38 <__divmodsi4_neg2>:
    2a38:	50 95       	com	r21
    2a3a:	40 95       	com	r20
    2a3c:	30 95       	com	r19
    2a3e:	21 95       	neg	r18
    2a40:	3f 4f       	sbci	r19, 0xFF	; 255
    2a42:	4f 4f       	sbci	r20, 0xFF	; 255
    2a44:	5f 4f       	sbci	r21, 0xFF	; 255

00002a46 <__divmodsi4_exit>:
    2a46:	08 95       	ret

00002a48 <__divmodsi4_neg1>:
    2a48:	f6 f7       	brtc	.-4      	; 0x2a46 <__divmodsi4_exit>
    2a4a:	90 95       	com	r25
    2a4c:	80 95       	com	r24
    2a4e:	70 95       	com	r23
    2a50:	61 95       	neg	r22
    2a52:	7f 4f       	sbci	r23, 0xFF	; 255
    2a54:	8f 4f       	sbci	r24, 0xFF	; 255
    2a56:	9f 4f       	sbci	r25, 0xFF	; 255
    2a58:	08 95       	ret

00002a5a <__prologue_saves__>:
    2a5a:	2f 92       	push	r2
    2a5c:	3f 92       	push	r3
    2a5e:	4f 92       	push	r4
    2a60:	5f 92       	push	r5
    2a62:	6f 92       	push	r6
    2a64:	7f 92       	push	r7
    2a66:	8f 92       	push	r8
    2a68:	9f 92       	push	r9
    2a6a:	af 92       	push	r10
    2a6c:	bf 92       	push	r11
    2a6e:	cf 92       	push	r12
    2a70:	df 92       	push	r13
    2a72:	ef 92       	push	r14
    2a74:	ff 92       	push	r15
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
    2a82:	ca 1b       	sub	r28, r26
    2a84:	db 0b       	sbc	r29, r27
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	de bf       	out	0x3e, r29	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	cd bf       	out	0x3d, r28	; 61
    2a90:	09 94       	ijmp

00002a92 <__epilogue_restores__>:
    2a92:	2a 88       	ldd	r2, Y+18	; 0x12
    2a94:	39 88       	ldd	r3, Y+17	; 0x11
    2a96:	48 88       	ldd	r4, Y+16	; 0x10
    2a98:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aa0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aa2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2aa4:	b9 84       	ldd	r11, Y+9	; 0x09
    2aa6:	c8 84       	ldd	r12, Y+8	; 0x08
    2aa8:	df 80       	ldd	r13, Y+7	; 0x07
    2aaa:	ee 80       	ldd	r14, Y+6	; 0x06
    2aac:	fd 80       	ldd	r15, Y+5	; 0x05
    2aae:	0c 81       	ldd	r16, Y+4	; 0x04
    2ab0:	1b 81       	ldd	r17, Y+3	; 0x03
    2ab2:	aa 81       	ldd	r26, Y+2	; 0x02
    2ab4:	b9 81       	ldd	r27, Y+1	; 0x01
    2ab6:	ce 0f       	add	r28, r30
    2ab8:	d1 1d       	adc	r29, r1
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
    2ac4:	ed 01       	movw	r28, r26
    2ac6:	08 95       	ret

00002ac8 <__udivmodsi4>:
    2ac8:	a1 e2       	ldi	r26, 0x21	; 33
    2aca:	1a 2e       	mov	r1, r26
    2acc:	aa 1b       	sub	r26, r26
    2ace:	bb 1b       	sub	r27, r27
    2ad0:	fd 01       	movw	r30, r26
    2ad2:	0d c0       	rjmp	.+26     	; 0x2aee <__udivmodsi4_ep>

00002ad4 <__udivmodsi4_loop>:
    2ad4:	aa 1f       	adc	r26, r26
    2ad6:	bb 1f       	adc	r27, r27
    2ad8:	ee 1f       	adc	r30, r30
    2ada:	ff 1f       	adc	r31, r31
    2adc:	a2 17       	cp	r26, r18
    2ade:	b3 07       	cpc	r27, r19
    2ae0:	e4 07       	cpc	r30, r20
    2ae2:	f5 07       	cpc	r31, r21
    2ae4:	20 f0       	brcs	.+8      	; 0x2aee <__udivmodsi4_ep>
    2ae6:	a2 1b       	sub	r26, r18
    2ae8:	b3 0b       	sbc	r27, r19
    2aea:	e4 0b       	sbc	r30, r20
    2aec:	f5 0b       	sbc	r31, r21

00002aee <__udivmodsi4_ep>:
    2aee:	66 1f       	adc	r22, r22
    2af0:	77 1f       	adc	r23, r23
    2af2:	88 1f       	adc	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	1a 94       	dec	r1
    2af8:	69 f7       	brne	.-38     	; 0x2ad4 <__udivmodsi4_loop>
    2afa:	60 95       	com	r22
    2afc:	70 95       	com	r23
    2afe:	80 95       	com	r24
    2b00:	90 95       	com	r25
    2b02:	9b 01       	movw	r18, r22
    2b04:	ac 01       	movw	r20, r24
    2b06:	bd 01       	movw	r22, r26
    2b08:	cf 01       	movw	r24, r30
    2b0a:	08 95       	ret

00002b0c <_exit>:
    2b0c:	f8 94       	cli

00002b0e <__stop_program>:
    2b0e:	ff cf       	rjmp	.-2      	; 0x2b0e <__stop_program>
